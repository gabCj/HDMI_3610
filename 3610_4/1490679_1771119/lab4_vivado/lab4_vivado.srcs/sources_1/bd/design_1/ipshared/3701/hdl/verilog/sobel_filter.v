// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel_filter,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=6.700000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.862500,HLS_SYN_LAT=4171584,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=1780,HLS_SYN_LUT=2700}" *)

module sobel_filter (
        ap_clk,
        ap_rst_n,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_pp0_stage0 = 27'd512;
parameter    ap_ST_fsm_state13 = 27'd1024;
parameter    ap_ST_fsm_state14 = 27'd2048;
parameter    ap_ST_fsm_state15 = 27'd4096;
parameter    ap_ST_fsm_state16 = 27'd8192;
parameter    ap_ST_fsm_state17 = 27'd16384;
parameter    ap_ST_fsm_state18 = 27'd32768;
parameter    ap_ST_fsm_state19 = 27'd65536;
parameter    ap_ST_fsm_state20 = 27'd131072;
parameter    ap_ST_fsm_state21 = 27'd262144;
parameter    ap_ST_fsm_state22 = 27'd524288;
parameter    ap_ST_fsm_pp1_stage0 = 27'd1048576;
parameter    ap_ST_fsm_pp1_stage1 = 27'd2097152;
parameter    ap_ST_fsm_state30 = 27'd4194304;
parameter    ap_ST_fsm_state31 = 27'd8388608;
parameter    ap_ST_fsm_state32 = 27'd16777216;
parameter    ap_ST_fsm_state33 = 27'd33554432;
parameter    ap_ST_fsm_state34 = 27'd67108864;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM0_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM0_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_USER_VALUE = 0;
parameter    C_M_AXI_GMEM0_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM0_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM1_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM1_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM1_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_USER_VALUE = 0;
parameter    C_M_AXI_GMEM1_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM1_CACHE_VALUE = 3;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM0_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM1_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_AWADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_AWID;
output  [7:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [C_M_AXI_GMEM0_AWUSER_WIDTH - 1:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_WDATA;
output  [C_M_AXI_GMEM0_WSTRB_WIDTH - 1:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_WID;
output  [C_M_AXI_GMEM0_WUSER_WIDTH - 1:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_ARADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_ARID;
output  [7:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [C_M_AXI_GMEM0_ARUSER_WIDTH - 1:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_RID;
input  [C_M_AXI_GMEM0_RUSER_WIDTH - 1:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_BID;
input  [C_M_AXI_GMEM0_BUSER_WIDTH - 1:0] m_axi_gmem0_BUSER;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [C_M_AXI_GMEM1_ADDR_WIDTH - 1:0] m_axi_gmem1_AWADDR;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_AWID;
output  [7:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [C_M_AXI_GMEM1_AWUSER_WIDTH - 1:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [C_M_AXI_GMEM1_DATA_WIDTH - 1:0] m_axi_gmem1_WDATA;
output  [C_M_AXI_GMEM1_WSTRB_WIDTH - 1:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_WID;
output  [C_M_AXI_GMEM1_WUSER_WIDTH - 1:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [C_M_AXI_GMEM1_ADDR_WIDTH - 1:0] m_axi_gmem1_ARADDR;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_ARID;
output  [7:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [C_M_AXI_GMEM1_ARUSER_WIDTH - 1:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [C_M_AXI_GMEM1_DATA_WIDTH - 1:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_RID;
input  [C_M_AXI_GMEM1_RUSER_WIDTH - 1:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_BID;
input  [C_M_AXI_GMEM1_BUSER_WIDTH - 1:0] m_axi_gmem1_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] inter_pix;
wire   [31:0] out_pix;
reg    gmem0_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    gmem0_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage1;
reg   [0:0] tmp_16_reg_1243;
reg    gmem1_blk_n_AW;
wire    ap_CS_fsm_state22;
reg    gmem1_blk_n_W;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter3;
wire    ap_block_pp1_stage0;
reg    gmem1_blk_n_B;
wire    ap_CS_fsm_state34;
wire    gmem0_AWREADY;
wire    gmem0_WREADY;
reg    gmem0_ARVALID;
wire    gmem0_ARREADY;
reg   [31:0] gmem0_ARADDR;
wire    gmem0_RVALID;
reg    gmem0_RREADY;
wire   [7:0] gmem0_RDATA;
wire    gmem0_RLAST;
wire   [0:0] gmem0_RID;
wire   [0:0] gmem0_RUSER;
wire   [1:0] gmem0_RRESP;
wire    gmem0_BVALID;
wire   [1:0] gmem0_BRESP;
wire   [0:0] gmem0_BID;
wire   [0:0] gmem0_BUSER;
reg    gmem1_AWVALID;
wire    gmem1_AWREADY;
reg    gmem1_WVALID;
wire    gmem1_WREADY;
wire   [31:0] gmem1_WDATA;
wire    gmem1_ARREADY;
wire    gmem1_RVALID;
wire   [31:0] gmem1_RDATA;
wire    gmem1_RLAST;
wire   [0:0] gmem1_RID;
wire   [0:0] gmem1_RUSER;
wire   [1:0] gmem1_RRESP;
wire    gmem1_BVALID;
reg    gmem1_BREADY;
wire   [1:0] gmem1_BRESP;
wire   [0:0] gmem1_BID;
wire   [0:0] gmem1_BUSER;
reg   [10:0] j_reg_355;
reg   [10:0] cols_assign_reg_377;
wire   [32:0] tmp_1_cast_fu_398_p1;
reg   [32:0] tmp_1_cast_reg_1121;
wire  signed [33:0] tmp_27_cast_fu_402_p1;
reg  signed [33:0] tmp_27_cast_reg_1126;
wire   [1:0] i_1_fu_412_p2;
reg   [1:0] i_1_reg_1135;
wire    ap_CS_fsm_state2;
wire   [0:0] cond_fu_452_p2;
reg   [0:0] cond_reg_1140;
wire   [0:0] tmp_fu_406_p2;
reg   [31:0] gmem0_addr_reg_1144;
wire   [0:0] tmp_5_fu_481_p2;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] j_1_fu_487_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [10:0] cache_0_addr_reg_1159;
reg   [10:0] cache_0_addr_reg_1159_pp0_iter1_reg;
reg   [10:0] cache_1_addr_reg_1164;
reg   [10:0] cache_1_addr_reg_1164_pp0_iter1_reg;
reg   [7:0] gmem0_addr_read_reg_1169;
wire   [10:0] i_2_fu_505_p2;
reg   [10:0] i_2_reg_1178;
wire    ap_CS_fsm_state14;
wire   [0:0] tmp_6_fu_511_p2;
reg   [0:0] tmp_6_reg_1183;
wire   [0:0] tmp_4_fu_499_p2;
wire   [0:0] tmp_7_fu_517_p2;
reg   [0:0] tmp_7_reg_1188;
wire   [1:0] tmp_14_fu_553_p1;
reg   [1:0] tmp_14_reg_1193;
wire   [10:0] tmp_s_fu_575_p3;
reg   [10:0] tmp_s_reg_1202;
reg   [31:0] gmem1_addr_reg_1208;
reg   [31:0] gmem0_addr_1_reg_1214;
wire    ap_CS_fsm_state15;
wire   [1:0] tmp_11_t_fu_657_p2;
reg   [1:0] tmp_11_t_reg_1220;
reg    ap_sig_ioackin_gmem1_AWREADY;
wire   [1:0] tmp_34_0_0_t_fu_662_p2;
reg   [1:0] tmp_34_0_0_t_reg_1224;
wire   [1:0] tmp_34_0_2_t_fu_667_p2;
reg   [1:0] tmp_34_0_2_t_reg_1231;
wire   [11:0] cols_assign_cast_fu_672_p1;
reg   [11:0] cols_assign_cast_reg_1238;
wire    ap_block_state23_pp1_stage0_iter0;
wire    ap_block_state25_pp1_stage0_iter1;
wire    ap_block_state27_pp1_stage0_iter2;
wire    ap_block_state29_pp1_stage0_iter3;
reg    ap_sig_ioackin_gmem1_WREADY;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] tmp_16_fu_676_p2;
wire   [10:0] j_2_fu_682_p2;
reg   [10:0] j_2_reg_1247;
wire   [0:0] or_cond2_fu_710_p2;
reg   [0:0] or_cond2_reg_1253;
reg   [0:0] or_cond2_reg_1253_pp1_iter1_reg;
reg   [0:0] or_cond2_reg_1253_pp1_iter2_reg;
reg   [10:0] cache_0_addr_2_reg_1259;
reg   [10:0] cache_1_addr_2_reg_1265;
reg   [10:0] cache_2_addr_1_reg_1271;
reg   [10:0] cache_3_addr_1_reg_1277;
reg    ap_block_state24_pp1_stage1_iter0;
wire    ap_block_state26_pp1_stage1_iter1;
wire    ap_block_state28_pp1_stage1_iter2;
reg    ap_block_pp1_stage1_11001;
wire   [7:0] tmp_35_fu_741_p6;
reg   [7:0] tmp_35_reg_1303;
wire   [7:0] tmp_36_fu_754_p6;
reg   [7:0] tmp_36_reg_1308;
reg   [7:0] gmem0_addr_1_read_reg_1333;
wire   [7:0] tmp_32_fu_774_p6;
reg   [7:0] tmp_32_reg_1341;
wire   [7:0] tmp_33_fu_787_p6;
reg   [7:0] tmp_33_reg_1347;
wire   [7:0] tmp_34_fu_800_p6;
reg   [7:0] tmp_34_reg_1352;
wire   [7:0] cache_0_q0;
reg   [7:0] cache_0_load_2_reg_1358;
reg    ap_enable_reg_pp1_iter1;
wire   [7:0] cache_1_q0;
reg   [7:0] cache_1_load_2_reg_1365;
wire   [7:0] cache_2_q1;
reg   [7:0] cache_2_load_2_reg_1372;
wire   [7:0] cache_3_q1;
reg   [7:0] cache_3_load_2_reg_1379;
wire   [10:0] x_weight_0_2_fu_852_p2;
reg   [10:0] x_weight_0_2_reg_1386;
wire   [10:0] y_weight_1_2_fu_896_p2;
reg   [10:0] y_weight_1_2_reg_1391;
wire   [7:0] tmp_37_fu_902_p6;
reg   [7:0] tmp_37_reg_1396;
wire   [7:0] tmp_38_fu_915_p1;
reg   [7:0] tmp_38_reg_1401;
wire   [7:0] tmp_39_fu_919_p6;
reg   [7:0] tmp_39_reg_1406;
wire   [7:0] tmp_43_fu_934_p6;
reg   [7:0] tmp_43_reg_1411;
wire   [8:0] tmp19_fu_947_p2;
reg   [8:0] tmp19_reg_1417;
wire   [7:0] tmp20_fu_953_p2;
reg   [7:0] tmp20_reg_1422;
wire   [0:0] tmp_19_fu_1001_p2;
reg   [0:0] tmp_19_reg_1427;
wire   [7:0] tmp_40_fu_1011_p2;
reg   [7:0] tmp_40_reg_1432;
wire   [7:0] tmp_41_fu_1016_p2;
reg   [7:0] tmp_41_reg_1437;
wire   [0:0] tmp_22_fu_1022_p2;
reg   [0:0] tmp_22_reg_1442;
wire   [7:0] tmp_45_fu_1028_p1;
reg   [7:0] tmp_45_reg_1447;
wire   [7:0] tmp_46_fu_1032_p2;
reg   [7:0] tmp_46_reg_1452;
wire   [7:0] val_fu_1104_p3;
reg   [7:0] val_reg_1457;
wire    ap_CS_fsm_state9;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state23;
reg    ap_block_pp1_stage1_subdone;
reg    ap_enable_reg_pp1_iter2;
reg   [10:0] cache_0_address0;
reg    cache_0_ce0;
reg    cache_0_we0;
reg   [10:0] cache_0_address1;
reg    cache_0_ce1;
reg    cache_0_we1;
wire   [7:0] cache_0_q1;
reg   [10:0] cache_1_address0;
reg    cache_1_ce0;
reg    cache_1_we0;
reg   [10:0] cache_1_address1;
reg    cache_1_ce1;
reg    cache_1_we1;
wire   [7:0] cache_1_q1;
reg   [10:0] cache_2_address0;
reg    cache_2_ce0;
wire   [7:0] cache_2_q0;
reg   [10:0] cache_2_address1;
reg    cache_2_ce1;
reg    cache_2_we1;
reg   [10:0] cache_3_address0;
reg    cache_3_ce0;
wire   [7:0] cache_3_q0;
reg   [10:0] cache_3_address1;
reg    cache_3_ce1;
reg    cache_3_we1;
reg   [1:0] i_reg_344;
wire    ap_CS_fsm_state13;
reg   [10:0] rows_assign_reg_366;
reg   [10:0] ap_phi_mux_cols_assign_phi_fu_381_p4;
wire   [63:0] tmp_15_fu_493_p1;
wire   [63:0] tmp_29_1_fu_716_p1;
wire   [63:0] tmp_24_fu_733_p1;
wire   [63:0] tmp_29_2_fu_767_p1;
wire  signed [63:0] inter_pix2_sum_cast_fu_471_p1;
wire   [63:0] out_pix4_sum_cast_fu_596_p1;
wire  signed [63:0] inter_pix2_sum6_cast_fu_647_p1;
reg    ap_reg_ioackin_gmem0_ARREADY;
reg    ap_sig_ioackin_gmem0_ARREADY;
reg    ap_reg_ioackin_gmem1_AWREADY;
reg    ap_reg_ioackin_gmem1_WREADY;
wire    ap_block_pp1_stage0_01001;
wire   [29:0] tmp_1_fu_388_p4;
wire   [0:0] tmp_12_fu_418_p1;
wire   [11:0] p_shl_fu_422_p3;
wire   [7:0] p_shl9_fu_434_p3;
wire   [12:0] p_shl_cast_fu_430_p1;
wire   [12:0] p_shl9_cast_fu_442_p1;
wire   [12:0] tmp_2_fu_446_p2;
wire  signed [31:0] tmp_13_fu_458_p1;
wire   [33:0] tmp_29_cast_fu_462_p1;
wire   [33:0] inter_pix2_sum_fu_466_p2;
wire   [21:0] p_shl1_fu_523_p3;
wire   [17:0] p_shl2_fu_535_p3;
wire   [22:0] p_shl1_cast_fu_531_p1;
wire   [22:0] p_shl2_cast_fu_543_p1;
wire   [10:0] tmp_9_fu_557_p2;
wire   [0:0] tmp_27_fu_563_p2;
wire   [10:0] tmp_28_fu_569_p2;
wire   [22:0] tmp_8_fu_547_p2;
wire  signed [31:0] tmp_29_fu_583_p1;
wire   [32:0] tmp_35_cast_fu_587_p1;
wire   [32:0] out_pix4_sum_fu_591_p2;
wire   [21:0] p_shl3_fu_606_p3;
wire   [17:0] p_shl4_fu_617_p3;
wire   [22:0] p_shl3_cast_fu_613_p1;
wire   [22:0] p_shl4_cast_fu_624_p1;
wire   [22:0] tmp_10_fu_628_p2;
wire  signed [31:0] tmp_30_fu_634_p1;
wire   [33:0] tmp_46_cast_fu_638_p1;
wire   [33:0] inter_pix2_sum6_fu_642_p2;
wire   [0:0] tmp_18_fu_694_p2;
wire   [0:0] tmp_17_fu_688_p2;
wire   [0:0] tmp16_fu_705_p2;
wire   [0:0] tmp15_fu_700_p2;
wire   [11:0] tmp_23_fu_724_p2;
wire  signed [31:0] tmp_23_cast_fu_729_p1;
wire   [8:0] p_shl5_fu_819_p3;
wire   [9:0] p_shl5_cast_fu_826_p1;
wire   [9:0] tmp_39_0_1_fu_830_p2;
wire  signed [10:0] tmp_39_0_1_cast_fu_836_p1;
wire   [10:0] tmp_361_cast_fu_816_p1;
wire   [10:0] x_weight_0_1_fu_840_p2;
wire   [10:0] tmp_36_0_2_cast_fu_849_p1;
wire   [8:0] tmp_361_cast1_fu_813_p1;
wire   [8:0] tmp_36_0_2_cast1_fu_846_p1;
wire   [8:0] y_weight_0_2_fu_858_p2;
wire   [8:0] tmp_41_1_fu_868_p3;
wire  signed [10:0] y_weight_0_2_cast_fu_864_p1;
wire   [10:0] tmp_41_1_cast_fu_875_p1;
wire   [8:0] p_shl6_fu_885_p3;
wire   [10:0] y_weight_1_1_fu_879_p2;
wire   [10:0] p_shl6_cast_fu_892_p1;
wire   [8:0] tmp_36_2_2_cast1_fu_943_p1;
wire   [8:0] tmp_36_2_cast1_fu_911_p1;
wire   [7:0] tmp_42_fu_928_p2;
wire   [8:0] tmp_39_2_1_fu_962_p3;
wire   [10:0] tmp_36_2_cast_fu_959_p1;
wire   [10:0] tmp_39_2_1_cast_fu_969_p1;
wire   [10:0] tmp18_fu_981_p2;
wire   [10:0] tmp19_cast_fu_986_p1;
wire   [10:0] y_weight_2_1_fu_973_p2;
wire   [10:0] tmp_36_2_2_cast_fu_978_p1;
wire   [10:0] x_weight_2_2_fu_989_p2;
wire   [7:0] tmp21_fu_1007_p2;
wire   [10:0] y_weight_2_2_fu_995_p2;
wire   [7:0] tmp_44_fu_1038_p3;
wire   [7:0] tmp_47_fu_1043_p3;
wire   [7:0] tmp_25_fu_1048_p2;
wire   [0:0] tmp_31_fu_1066_p2;
wire   [7:0] edge_val_fu_1054_p2;
wire   [0:0] tmp_26_fu_1060_p2;
wire   [0:0] sel_tmp1_fu_1080_p2;
wire   [0:0] sel_tmp2_fu_1085_p2;
wire   [0:0] tmp_48_fu_1099_p2;
wire   [7:0] sel_tmp_fu_1091_p3;
wire   [7:0] p_i_fu_1072_p3;
reg   [26:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_reg_ioackin_gmem0_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem1_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem1_WREADY = 1'b0;
end

sobel_filter_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
sobel_filter_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .inter_pix(inter_pix),
    .out_pix(out_pix)
);

sobel_filter_gmem0_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM0_CACHE_VALUE ))
sobel_filter_gmem0_m_axi_U(
    .AWVALID(m_axi_gmem0_AWVALID),
    .AWREADY(m_axi_gmem0_AWREADY),
    .AWADDR(m_axi_gmem0_AWADDR),
    .AWID(m_axi_gmem0_AWID),
    .AWLEN(m_axi_gmem0_AWLEN),
    .AWSIZE(m_axi_gmem0_AWSIZE),
    .AWBURST(m_axi_gmem0_AWBURST),
    .AWLOCK(m_axi_gmem0_AWLOCK),
    .AWCACHE(m_axi_gmem0_AWCACHE),
    .AWPROT(m_axi_gmem0_AWPROT),
    .AWQOS(m_axi_gmem0_AWQOS),
    .AWREGION(m_axi_gmem0_AWREGION),
    .AWUSER(m_axi_gmem0_AWUSER),
    .WVALID(m_axi_gmem0_WVALID),
    .WREADY(m_axi_gmem0_WREADY),
    .WDATA(m_axi_gmem0_WDATA),
    .WSTRB(m_axi_gmem0_WSTRB),
    .WLAST(m_axi_gmem0_WLAST),
    .WID(m_axi_gmem0_WID),
    .WUSER(m_axi_gmem0_WUSER),
    .ARVALID(m_axi_gmem0_ARVALID),
    .ARREADY(m_axi_gmem0_ARREADY),
    .ARADDR(m_axi_gmem0_ARADDR),
    .ARID(m_axi_gmem0_ARID),
    .ARLEN(m_axi_gmem0_ARLEN),
    .ARSIZE(m_axi_gmem0_ARSIZE),
    .ARBURST(m_axi_gmem0_ARBURST),
    .ARLOCK(m_axi_gmem0_ARLOCK),
    .ARCACHE(m_axi_gmem0_ARCACHE),
    .ARPROT(m_axi_gmem0_ARPROT),
    .ARQOS(m_axi_gmem0_ARQOS),
    .ARREGION(m_axi_gmem0_ARREGION),
    .ARUSER(m_axi_gmem0_ARUSER),
    .RVALID(m_axi_gmem0_RVALID),
    .RREADY(m_axi_gmem0_RREADY),
    .RDATA(m_axi_gmem0_RDATA),
    .RLAST(m_axi_gmem0_RLAST),
    .RID(m_axi_gmem0_RID),
    .RUSER(m_axi_gmem0_RUSER),
    .RRESP(m_axi_gmem0_RRESP),
    .BVALID(m_axi_gmem0_BVALID),
    .BREADY(m_axi_gmem0_BREADY),
    .BRESP(m_axi_gmem0_BRESP),
    .BID(m_axi_gmem0_BID),
    .BUSER(m_axi_gmem0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem0_ARVALID),
    .I_ARREADY(gmem0_ARREADY),
    .I_ARADDR(gmem0_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1920),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem0_RVALID),
    .I_RREADY(gmem0_RREADY),
    .I_RDATA(gmem0_RDATA),
    .I_RID(gmem0_RID),
    .I_RUSER(gmem0_RUSER),
    .I_RRESP(gmem0_RRESP),
    .I_RLAST(gmem0_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem0_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem0_WREADY),
    .I_WDATA(8'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd0),
    .I_BVALID(gmem0_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(gmem0_BRESP),
    .I_BID(gmem0_BID),
    .I_BUSER(gmem0_BUSER)
);

sobel_filter_gmem1_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM1_CACHE_VALUE ))
sobel_filter_gmem1_m_axi_U(
    .AWVALID(m_axi_gmem1_AWVALID),
    .AWREADY(m_axi_gmem1_AWREADY),
    .AWADDR(m_axi_gmem1_AWADDR),
    .AWID(m_axi_gmem1_AWID),
    .AWLEN(m_axi_gmem1_AWLEN),
    .AWSIZE(m_axi_gmem1_AWSIZE),
    .AWBURST(m_axi_gmem1_AWBURST),
    .AWLOCK(m_axi_gmem1_AWLOCK),
    .AWCACHE(m_axi_gmem1_AWCACHE),
    .AWPROT(m_axi_gmem1_AWPROT),
    .AWQOS(m_axi_gmem1_AWQOS),
    .AWREGION(m_axi_gmem1_AWREGION),
    .AWUSER(m_axi_gmem1_AWUSER),
    .WVALID(m_axi_gmem1_WVALID),
    .WREADY(m_axi_gmem1_WREADY),
    .WDATA(m_axi_gmem1_WDATA),
    .WSTRB(m_axi_gmem1_WSTRB),
    .WLAST(m_axi_gmem1_WLAST),
    .WID(m_axi_gmem1_WID),
    .WUSER(m_axi_gmem1_WUSER),
    .ARVALID(m_axi_gmem1_ARVALID),
    .ARREADY(m_axi_gmem1_ARREADY),
    .ARADDR(m_axi_gmem1_ARADDR),
    .ARID(m_axi_gmem1_ARID),
    .ARLEN(m_axi_gmem1_ARLEN),
    .ARSIZE(m_axi_gmem1_ARSIZE),
    .ARBURST(m_axi_gmem1_ARBURST),
    .ARLOCK(m_axi_gmem1_ARLOCK),
    .ARCACHE(m_axi_gmem1_ARCACHE),
    .ARPROT(m_axi_gmem1_ARPROT),
    .ARQOS(m_axi_gmem1_ARQOS),
    .ARREGION(m_axi_gmem1_ARREGION),
    .ARUSER(m_axi_gmem1_ARUSER),
    .RVALID(m_axi_gmem1_RVALID),
    .RREADY(m_axi_gmem1_RREADY),
    .RDATA(m_axi_gmem1_RDATA),
    .RLAST(m_axi_gmem1_RLAST),
    .RID(m_axi_gmem1_RID),
    .RUSER(m_axi_gmem1_RUSER),
    .RRESP(m_axi_gmem1_RRESP),
    .BVALID(m_axi_gmem1_BVALID),
    .BREADY(m_axi_gmem1_BREADY),
    .BRESP(m_axi_gmem1_BRESP),
    .BID(m_axi_gmem1_BID),
    .BUSER(m_axi_gmem1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(gmem1_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem1_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(gmem1_RDATA),
    .I_RID(gmem1_RID),
    .I_RUSER(gmem1_RUSER),
    .I_RRESP(gmem1_RRESP),
    .I_RLAST(gmem1_RLAST),
    .I_AWVALID(gmem1_AWVALID),
    .I_AWREADY(gmem1_AWREADY),
    .I_AWADDR(gmem1_addr_reg_1208),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1920),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem1_WVALID),
    .I_WREADY(gmem1_WREADY),
    .I_WDATA(gmem1_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem1_BVALID),
    .I_BREADY(gmem1_BREADY),
    .I_BRESP(gmem1_BRESP),
    .I_BID(gmem1_BID),
    .I_BUSER(gmem1_BUSER)
);

sobel_filter_cachbkb #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
cache_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_0_address0),
    .ce0(cache_0_ce0),
    .we0(cache_0_we0),
    .d0(gmem0_addr_read_reg_1169),
    .q0(cache_0_q0),
    .address1(cache_0_address1),
    .ce1(cache_0_ce1),
    .we1(cache_0_we1),
    .d1(gmem0_addr_1_read_reg_1333),
    .q1(cache_0_q1)
);

sobel_filter_cachbkb #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
cache_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_1_address0),
    .ce0(cache_1_ce0),
    .we0(cache_1_we0),
    .d0(gmem0_addr_read_reg_1169),
    .q0(cache_1_q0),
    .address1(cache_1_address1),
    .ce1(cache_1_ce1),
    .we1(cache_1_we1),
    .d1(gmem0_addr_1_read_reg_1333),
    .q1(cache_1_q1)
);

sobel_filter_cachdEe #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
cache_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_2_address0),
    .ce0(cache_2_ce0),
    .q0(cache_2_q0),
    .address1(cache_2_address1),
    .ce1(cache_2_ce1),
    .we1(cache_2_we1),
    .d1(gmem0_addr_1_read_reg_1333),
    .q1(cache_2_q1)
);

sobel_filter_cachdEe #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
cache_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_3_address0),
    .ce0(cache_3_ce0),
    .q0(cache_3_q0),
    .address1(cache_3_address1),
    .ce1(cache_3_ce1),
    .we1(cache_3_we1),
    .d1(gmem0_addr_1_read_reg_1333),
    .q1(cache_3_q1)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U1(
    .din0(cache_0_q0),
    .din1(cache_1_q0),
    .din2(cache_2_q0),
    .din3(cache_3_q0),
    .din4(tmp_34_0_0_t_reg_1224),
    .dout(tmp_35_fu_741_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U2(
    .din0(cache_0_q0),
    .din1(cache_1_q0),
    .din2(cache_2_q0),
    .din3(cache_3_q0),
    .din4(tmp_34_0_2_t_reg_1231),
    .dout(tmp_36_fu_754_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U3(
    .din0(cache_0_q1),
    .din1(cache_1_q1),
    .din2(cache_2_q0),
    .din3(cache_3_q0),
    .din4(tmp_34_0_0_t_reg_1224),
    .dout(tmp_32_fu_774_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U4(
    .din0(cache_0_q1),
    .din1(cache_1_q1),
    .din2(cache_2_q0),
    .din3(cache_3_q0),
    .din4(tmp_14_reg_1193),
    .dout(tmp_33_fu_787_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U5(
    .din0(cache_0_q1),
    .din1(cache_1_q1),
    .din2(cache_2_q0),
    .din3(cache_3_q0),
    .din4(tmp_34_0_2_t_reg_1231),
    .dout(tmp_34_fu_800_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U6(
    .din0(cache_0_load_2_reg_1358),
    .din1(cache_1_load_2_reg_1365),
    .din2(cache_2_load_2_reg_1372),
    .din3(cache_3_load_2_reg_1379),
    .din4(tmp_34_0_0_t_reg_1224),
    .dout(tmp_37_fu_902_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U7(
    .din0(cache_0_load_2_reg_1358),
    .din1(cache_1_load_2_reg_1365),
    .din2(cache_2_load_2_reg_1372),
    .din3(cache_3_load_2_reg_1379),
    .din4(tmp_14_reg_1193),
    .dout(tmp_39_fu_919_p6)
);

sobel_filter_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_fYi_U8(
    .din0(cache_0_load_2_reg_1358),
    .din1(cache_1_load_2_reg_1365),
    .din2(cache_2_load_2_reg_1372),
    .din3(cache_3_load_2_reg_1379),
    .din4(tmp_34_0_2_t_reg_1231),
    .dout(tmp_43_fu_934_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state10)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state23) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((ap_sig_ioackin_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state23)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state23);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if (((ap_sig_ioackin_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem0_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((ap_sig_ioackin_gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_gmem0_ARREADY <= 1'b0;
        end else if ((((gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_gmem0_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem1_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state22)) begin
            if ((ap_sig_ioackin_gmem1_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem1_AWREADY <= 1'b0;
            end else if ((gmem1_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem1_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem1_WREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            if ((1'b0 == ap_block_pp1_stage0_11001)) begin
                ap_reg_ioackin_gmem1_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp1_stage0_01001) & (gmem1_WREADY == 1'b1))) begin
                ap_reg_ioackin_gmem1_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_16_reg_1243 == 1'd0))) begin
        cols_assign_reg_377 <= j_2_reg_1247;
    end else if (((ap_sig_ioackin_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        cols_assign_reg_377 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_reg_344 <= i_1_reg_1135;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_344 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_5_fu_481_p2 == 1'd0))) begin
        j_reg_355 <= j_1_fu_487_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_reg_355 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_406_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        rows_assign_reg_366 <= 11'd0;
    end else if (((gmem1_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        rows_assign_reg_366 <= i_2_reg_1178;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_16_fu_676_p2 == 1'd0))) begin
        cache_0_addr_2_reg_1259 <= tmp_29_1_fu_716_p1;
        cache_1_addr_2_reg_1265 <= tmp_29_1_fu_716_p1;
        cache_2_addr_1_reg_1271 <= tmp_29_1_fu_716_p1;
        cache_3_addr_1_reg_1277 <= tmp_29_1_fu_716_p1;
        or_cond2_reg_1253 <= or_cond2_fu_710_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_5_fu_481_p2 == 1'd0))) begin
        cache_0_addr_reg_1159 <= tmp_15_fu_493_p1;
        cache_1_addr_reg_1164 <= tmp_15_fu_493_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_0_addr_reg_1159_pp0_iter1_reg <= cache_0_addr_reg_1159;
        cache_1_addr_reg_1164_pp0_iter1_reg <= cache_1_addr_reg_1164;
        gmem0_addr_read_reg_1169 <= gmem0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cache_0_load_2_reg_1358 <= cache_0_q0;
        cache_1_load_2_reg_1365 <= cache_1_q0;
        cache_2_load_2_reg_1372 <= cache_2_q1;
        cache_3_load_2_reg_1379 <= cache_3_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cols_assign_cast_reg_1238[10 : 0] <= cols_assign_cast_fu_672_p1[10 : 0];
        or_cond2_reg_1253_pp1_iter1_reg <= or_cond2_reg_1253;
        or_cond2_reg_1253_pp1_iter2_reg <= or_cond2_reg_1253_pp1_iter1_reg;
        tmp_16_reg_1243 <= tmp_16_fu_676_p2;
        tmp_19_reg_1427 <= tmp_19_fu_1001_p2;
        tmp_22_reg_1442 <= tmp_22_fu_1022_p2;
        tmp_32_reg_1341 <= tmp_32_fu_774_p6;
        tmp_33_reg_1347 <= tmp_33_fu_787_p6;
        tmp_34_reg_1352 <= tmp_34_fu_800_p6;
        tmp_40_reg_1432 <= tmp_40_fu_1011_p2;
        tmp_41_reg_1437 <= tmp_41_fu_1016_p2;
        tmp_45_reg_1447 <= tmp_45_fu_1028_p1;
        tmp_46_reg_1452 <= tmp_46_fu_1032_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_406_p2 == 1'd0))) begin
        cond_reg_1140 <= cond_fu_452_p2;
        gmem0_addr_reg_1144 <= inter_pix2_sum_cast_fu_471_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (tmp_16_reg_1243 == 1'd0))) begin
        gmem0_addr_1_read_reg_1333 <= gmem0_RDATA;
        tmp_35_reg_1303 <= tmp_35_fu_741_p6;
        tmp_36_reg_1308 <= tmp_36_fu_754_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        gmem0_addr_1_reg_1214 <= inter_pix2_sum6_cast_fu_647_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (tmp_4_fu_499_p2 == 1'd0))) begin
        gmem1_addr_reg_1208 <= out_pix4_sum_cast_fu_596_p1;
        tmp_14_reg_1193 <= tmp_14_fu_553_p1;
        tmp_6_reg_1183 <= tmp_6_fu_511_p2;
        tmp_7_reg_1188 <= tmp_7_fu_517_p2;
        tmp_s_reg_1202 <= tmp_s_fu_575_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_1135 <= i_1_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_2_reg_1178 <= i_2_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        j_2_reg_1247 <= j_2_fu_682_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        tmp19_reg_1417 <= tmp19_fu_947_p2;
        tmp20_reg_1422 <= tmp20_fu_953_p2;
        tmp_37_reg_1396 <= tmp_37_fu_902_p6;
        tmp_38_reg_1401 <= tmp_38_fu_915_p1;
        tmp_39_reg_1406 <= tmp_39_fu_919_p6;
        tmp_43_reg_1411 <= tmp_43_fu_934_p6;
        val_reg_1457 <= val_fu_1104_p3;
        x_weight_0_2_reg_1386 <= x_weight_0_2_fu_852_p2;
        y_weight_1_2_reg_1391 <= y_weight_1_2_fu_896_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        tmp_11_t_reg_1220 <= tmp_11_t_fu_657_p2;
        tmp_34_0_0_t_reg_1224 <= tmp_34_0_0_t_fu_662_p2;
        tmp_34_0_2_t_reg_1231 <= tmp_34_0_2_t_fu_667_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_1_cast_reg_1121[29 : 0] <= tmp_1_cast_fu_398_p1[29 : 0];
        tmp_27_cast_reg_1126 <= tmp_27_cast_fu_402_p1;
    end
end

always @ (*) begin
    if ((tmp_5_fu_481_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_16_fu_676_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state23 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state23 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_4_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_16_reg_1243 == 1'd0))) begin
        ap_phi_mux_cols_assign_phi_fu_381_p4 = j_2_reg_1247;
    end else begin
        ap_phi_mux_cols_assign_phi_fu_381_p4 = cols_assign_reg_377;
    end
end

always @ (*) begin
    if (((tmp_4_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem0_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem0_ARREADY = gmem0_ARREADY;
    end else begin
        ap_sig_ioackin_gmem0_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem1_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem1_AWREADY = gmem1_AWREADY;
    end else begin
        ap_sig_ioackin_gmem1_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem1_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem1_WREADY = gmem1_WREADY;
    end else begin
        ap_sig_ioackin_gmem1_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        cache_0_address0 = tmp_29_2_fu_767_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        cache_0_address0 = tmp_29_1_fu_716_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        cache_0_address0 = cache_0_addr_reg_1159_pp0_iter1_reg;
    end else begin
        cache_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cache_0_address1 = cache_0_addr_2_reg_1259;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        cache_0_address1 = tmp_24_fu_733_p1;
    end else begin
        cache_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        cache_0_ce0 = 1'b1;
    end else begin
        cache_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        cache_0_ce1 = 1'b1;
    end else begin
        cache_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cond_reg_1140 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cache_0_we0 = 1'b1;
    end else begin
        cache_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_11_t_reg_1220 == 2'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cache_0_we1 = 1'b1;
    end else begin
        cache_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        cache_1_address0 = tmp_29_2_fu_767_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        cache_1_address0 = tmp_29_1_fu_716_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        cache_1_address0 = cache_1_addr_reg_1164_pp0_iter1_reg;
    end else begin
        cache_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cache_1_address1 = cache_1_addr_2_reg_1265;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        cache_1_address1 = tmp_24_fu_733_p1;
    end else begin
        cache_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        cache_1_ce0 = 1'b1;
    end else begin
        cache_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        cache_1_ce1 = 1'b1;
    end else begin
        cache_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (cond_reg_1140 == 1'd0))) begin
        cache_1_we0 = 1'b1;
    end else begin
        cache_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_11_t_reg_1220 == 2'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cache_1_we1 = 1'b1;
    end else begin
        cache_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp1_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
            cache_2_address0 = tmp_24_fu_733_p1;
        end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            cache_2_address0 = tmp_29_1_fu_716_p1;
        end else begin
            cache_2_address0 = 'bx;
        end
    end else begin
        cache_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cache_2_address1 = cache_2_addr_1_reg_1271;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        cache_2_address1 = tmp_29_2_fu_767_p1;
    end else begin
        cache_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        cache_2_ce0 = 1'b1;
    end else begin
        cache_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        cache_2_ce1 = 1'b1;
    end else begin
        cache_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_11_t_reg_1220 == 2'd2) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cache_2_we1 = 1'b1;
    end else begin
        cache_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp1_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
            cache_3_address0 = tmp_24_fu_733_p1;
        end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            cache_3_address0 = tmp_29_1_fu_716_p1;
        end else begin
            cache_3_address0 = 'bx;
        end
    end else begin
        cache_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cache_3_address1 = cache_3_addr_1_reg_1277;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        cache_3_address1 = tmp_29_2_fu_767_p1;
    end else begin
        cache_3_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        cache_3_ce0 = 1'b1;
    end else begin
        cache_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        cache_3_ce1 = 1'b1;
    end else begin
        cache_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_11_t_reg_1220 == 2'd3) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cache_3_we1 = 1'b1;
    end else begin
        cache_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem0_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            gmem0_ARADDR = gmem0_addr_1_reg_1214;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            gmem0_ARADDR = gmem0_addr_reg_1144;
        end else begin
            gmem0_ARADDR = 'bx;
        end
    end else begin
        gmem0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem0_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state16)) | ((ap_reg_ioackin_gmem0_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
        gmem0_ARVALID = 1'b1;
    end else begin
        gmem0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (tmp_16_reg_1243 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        gmem0_RREADY = 1'b1;
    end else begin
        gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem0_blk_n_AR = m_axi_gmem0_ARREADY;
    end else begin
        gmem0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (tmp_16_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem0_blk_n_R = m_axi_gmem0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem1_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state22))) begin
        gmem1_AWVALID = 1'b1;
    end else begin
        gmem1_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem1_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        gmem1_BREADY = 1'b1;
    end else begin
        gmem1_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_01001) & (ap_reg_ioackin_gmem1_WREADY == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        gmem1_WVALID = 1'b1;
    end else begin
        gmem1_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        gmem1_blk_n_AW = m_axi_gmem1_AWREADY;
    end else begin
        gmem1_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        gmem1_blk_n_B = m_axi_gmem1_BVALID;
    end else begin
        gmem1_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        gmem1_blk_n_W = m_axi_gmem1_WREADY;
    end else begin
        gmem1_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_406_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ap_sig_ioackin_gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (tmp_5_fu_481_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (tmp_5_fu_481_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state14 : begin
            if (((tmp_4_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((ap_sig_ioackin_gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((ap_sig_ioackin_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (tmp_16_fu_676_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (tmp_16_fu_676_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((gmem1_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_sig_ioackin_gmem1_WREADY == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_sig_ioackin_gmem1_WREADY == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((gmem0_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_16_reg_1243 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((gmem0_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_16_reg_1243 == 1'd0));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = (gmem0_RVALID == 1'b0);
end

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_pp1_stage1_iter0 = ((gmem0_RVALID == 1'b0) & (tmp_16_reg_1243 == 1'd0));
end

assign ap_block_state25_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cols_assign_cast_fu_672_p1 = ap_phi_mux_cols_assign_phi_fu_381_p4;

assign cond_fu_452_p2 = ((i_reg_344 == 2'd0) ? 1'b1 : 1'b0);

assign edge_val_fu_1054_p2 = (tmp_25_fu_1048_p2 ^ 8'd255);

assign gmem1_WDATA = {{{{val_reg_1457}, {val_reg_1457}}, {val_reg_1457}}, {val_reg_1457}};

assign i_1_fu_412_p2 = (i_reg_344 + 2'd1);

assign i_2_fu_505_p2 = (rows_assign_reg_366 + 11'd1);

assign inter_pix2_sum6_cast_fu_647_p1 = $signed(inter_pix2_sum6_fu_642_p2);

assign inter_pix2_sum6_fu_642_p2 = ($signed(tmp_27_cast_reg_1126) + $signed(tmp_46_cast_fu_638_p1));

assign inter_pix2_sum_cast_fu_471_p1 = $signed(inter_pix2_sum_fu_466_p2);

assign inter_pix2_sum_fu_466_p2 = ($signed(tmp_27_cast_reg_1126) + $signed(tmp_29_cast_fu_462_p1));

assign j_1_fu_487_p2 = (j_reg_355 + 11'd1);

assign j_2_fu_682_p2 = (ap_phi_mux_cols_assign_phi_fu_381_p4 + 11'd1);

assign or_cond2_fu_710_p2 = (tmp16_fu_705_p2 | tmp15_fu_700_p2);

assign out_pix4_sum_cast_fu_596_p1 = out_pix4_sum_fu_591_p2;

assign out_pix4_sum_fu_591_p2 = (tmp_1_cast_reg_1121 + tmp_35_cast_fu_587_p1);

assign p_i_fu_1072_p3 = ((tmp_31_fu_1066_p2[0:0] === 1'b1) ? 8'd0 : edge_val_fu_1054_p2);

assign p_shl1_cast_fu_531_p1 = p_shl1_fu_523_p3;

assign p_shl1_fu_523_p3 = {{rows_assign_reg_366}, {11'd0}};

assign p_shl2_cast_fu_543_p1 = p_shl2_fu_535_p3;

assign p_shl2_fu_535_p3 = {{rows_assign_reg_366}, {7'd0}};

assign p_shl3_cast_fu_613_p1 = p_shl3_fu_606_p3;

assign p_shl3_fu_606_p3 = {{tmp_s_reg_1202}, {11'd0}};

assign p_shl4_cast_fu_624_p1 = p_shl4_fu_617_p3;

assign p_shl4_fu_617_p3 = {{tmp_s_reg_1202}, {7'd0}};

assign p_shl5_cast_fu_826_p1 = p_shl5_fu_819_p3;

assign p_shl5_fu_819_p3 = {{tmp_33_reg_1347}, {1'd0}};

assign p_shl6_cast_fu_892_p1 = p_shl6_fu_885_p3;

assign p_shl6_fu_885_p3 = {{tmp_36_reg_1308}, {1'd0}};

assign p_shl9_cast_fu_442_p1 = p_shl9_fu_434_p3;

assign p_shl9_fu_434_p3 = {{tmp_12_fu_418_p1}, {7'd0}};

assign p_shl_cast_fu_430_p1 = p_shl_fu_422_p3;

assign p_shl_fu_422_p3 = {{tmp_12_fu_418_p1}, {11'd0}};

assign sel_tmp1_fu_1080_p2 = (or_cond2_reg_1253_pp1_iter2_reg ^ 1'd1);

assign sel_tmp2_fu_1085_p2 = (tmp_26_fu_1060_p2 & sel_tmp1_fu_1080_p2);

assign sel_tmp_fu_1091_p3 = ((sel_tmp2_fu_1085_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign tmp15_fu_700_p2 = (tmp_6_reg_1183 | tmp_18_fu_694_p2);

assign tmp16_fu_705_p2 = (tmp_7_reg_1188 | tmp_17_fu_688_p2);

assign tmp18_fu_981_p2 = (x_weight_0_2_reg_1386 + tmp_39_2_1_cast_fu_969_p1);

assign tmp19_cast_fu_986_p1 = tmp19_reg_1417;

assign tmp19_fu_947_p2 = (tmp_36_2_2_cast1_fu_943_p1 + tmp_36_2_cast1_fu_911_p1);

assign tmp20_fu_953_p2 = (tmp_42_fu_928_p2 + tmp_37_fu_902_p6);

assign tmp21_fu_1007_p2 = (tmp_43_reg_1411 + tmp_38_reg_1401);

assign tmp_10_fu_628_p2 = (p_shl3_cast_fu_613_p1 - p_shl4_cast_fu_624_p1);

assign tmp_11_t_fu_657_p2 = (tmp_14_reg_1193 ^ 2'd2);

assign tmp_12_fu_418_p1 = i_reg_344[0:0];

assign tmp_13_fu_458_p1 = $signed(tmp_2_fu_446_p2);

assign tmp_14_fu_553_p1 = rows_assign_reg_366[1:0];

assign tmp_15_fu_493_p1 = j_reg_355;

assign tmp_16_fu_676_p2 = ((ap_phi_mux_cols_assign_phi_fu_381_p4 == 11'd1920) ? 1'b1 : 1'b0);

assign tmp_17_fu_688_p2 = ((ap_phi_mux_cols_assign_phi_fu_381_p4 == 11'd0) ? 1'b1 : 1'b0);

assign tmp_18_fu_694_p2 = ((ap_phi_mux_cols_assign_phi_fu_381_p4 == 11'd1919) ? 1'b1 : 1'b0);

assign tmp_19_fu_1001_p2 = (($signed(x_weight_2_2_fu_989_p2) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign tmp_1_cast_fu_398_p1 = tmp_1_fu_388_p4;

assign tmp_1_fu_388_p4 = {{out_pix[31:2]}};

assign tmp_22_fu_1022_p2 = (($signed(y_weight_2_2_fu_995_p2) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign tmp_23_cast_fu_729_p1 = $signed(tmp_23_fu_724_p2);

assign tmp_23_fu_724_p2 = ($signed(12'd4095) + $signed(cols_assign_cast_reg_1238));

assign tmp_24_fu_733_p1 = $unsigned(tmp_23_cast_fu_729_p1);

assign tmp_25_fu_1048_p2 = (tmp_44_fu_1038_p3 + tmp_47_fu_1043_p3);

assign tmp_26_fu_1060_p2 = ((tmp_25_fu_1048_p2 < 8'd55) ? 1'b1 : 1'b0);

assign tmp_27_cast_fu_402_p1 = $signed(inter_pix);

assign tmp_27_fu_563_p2 = ((tmp_9_fu_557_p2 < 11'd1080) ? 1'b1 : 1'b0);

assign tmp_28_fu_569_p2 = (11'd970 + rows_assign_reg_366);

assign tmp_29_1_fu_716_p1 = ap_phi_mux_cols_assign_phi_fu_381_p4;

assign tmp_29_2_fu_767_p1 = j_2_reg_1247;

assign tmp_29_cast_fu_462_p1 = $unsigned(tmp_13_fu_458_p1);

assign tmp_29_fu_583_p1 = $signed(tmp_8_fu_547_p2);

assign tmp_2_fu_446_p2 = (p_shl_cast_fu_430_p1 - p_shl9_cast_fu_442_p1);

assign tmp_30_fu_634_p1 = $signed(tmp_10_fu_628_p2);

assign tmp_31_fu_1066_p2 = ((tmp_25_fu_1048_p2 > 8'd155) ? 1'b1 : 1'b0);

assign tmp_34_0_0_t_fu_662_p2 = ($signed(2'd3) + $signed(tmp_14_reg_1193));

assign tmp_34_0_2_t_fu_667_p2 = (2'd1 + tmp_14_reg_1193);

assign tmp_35_cast_fu_587_p1 = $unsigned(tmp_29_fu_583_p1);

assign tmp_361_cast1_fu_813_p1 = tmp_32_reg_1341;

assign tmp_361_cast_fu_816_p1 = tmp_32_reg_1341;

assign tmp_36_0_2_cast1_fu_846_p1 = tmp_34_reg_1352;

assign tmp_36_0_2_cast_fu_849_p1 = tmp_34_reg_1352;

assign tmp_36_2_2_cast1_fu_943_p1 = tmp_43_fu_934_p6;

assign tmp_36_2_2_cast_fu_978_p1 = tmp_43_reg_1411;

assign tmp_36_2_cast1_fu_911_p1 = tmp_37_fu_902_p6;

assign tmp_36_2_cast_fu_959_p1 = tmp_37_reg_1396;

assign tmp_38_fu_915_p1 = x_weight_0_2_fu_852_p2[7:0];

assign tmp_39_0_1_cast_fu_836_p1 = $signed(tmp_39_0_1_fu_830_p2);

assign tmp_39_0_1_fu_830_p2 = (10'd0 - p_shl5_cast_fu_826_p1);

assign tmp_39_2_1_cast_fu_969_p1 = tmp_39_2_1_fu_962_p3;

assign tmp_39_2_1_fu_962_p3 = {{tmp_39_reg_1406}, {1'd0}};

assign tmp_40_fu_1011_p2 = (tmp20_reg_1422 + tmp21_fu_1007_p2);

assign tmp_41_1_cast_fu_875_p1 = tmp_41_1_fu_868_p3;

assign tmp_41_1_fu_868_p3 = {{tmp_35_reg_1303}, {1'd0}};

assign tmp_41_fu_1016_p2 = (8'd0 - tmp_40_fu_1011_p2);

assign tmp_42_fu_928_p2 = tmp_39_fu_919_p6 << 8'd1;

assign tmp_44_fu_1038_p3 = ((tmp_19_reg_1427[0:0] === 1'b1) ? tmp_40_reg_1432 : tmp_41_reg_1437);

assign tmp_45_fu_1028_p1 = y_weight_2_2_fu_995_p2[7:0];

assign tmp_46_cast_fu_638_p1 = $unsigned(tmp_30_fu_634_p1);

assign tmp_46_fu_1032_p2 = (8'd0 - tmp_45_fu_1028_p1);

assign tmp_47_fu_1043_p3 = ((tmp_22_reg_1442[0:0] === 1'b1) ? tmp_45_reg_1447 : tmp_46_reg_1452);

assign tmp_48_fu_1099_p2 = (sel_tmp2_fu_1085_p2 | or_cond2_reg_1253_pp1_iter2_reg);

assign tmp_4_fu_499_p2 = ((rows_assign_reg_366 == 11'd1080) ? 1'b1 : 1'b0);

assign tmp_5_fu_481_p2 = ((j_reg_355 == 11'd1920) ? 1'b1 : 1'b0);

assign tmp_6_fu_511_p2 = ((rows_assign_reg_366 == 11'd0) ? 1'b1 : 1'b0);

assign tmp_7_fu_517_p2 = ((rows_assign_reg_366 == 11'd1079) ? 1'b1 : 1'b0);

assign tmp_8_fu_547_p2 = (p_shl1_cast_fu_531_p1 - p_shl2_cast_fu_543_p1);

assign tmp_9_fu_557_p2 = (11'd2 + rows_assign_reg_366);

assign tmp_fu_406_p2 = ((i_reg_344 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_s_fu_575_p3 = ((tmp_27_fu_563_p2[0:0] === 1'b1) ? tmp_9_fu_557_p2 : tmp_28_fu_569_p2);

assign val_fu_1104_p3 = ((tmp_48_fu_1099_p2[0:0] === 1'b1) ? sel_tmp_fu_1091_p3 : p_i_fu_1072_p3);

assign x_weight_0_1_fu_840_p2 = ($signed(tmp_39_0_1_cast_fu_836_p1) - $signed(tmp_361_cast_fu_816_p1));

assign x_weight_0_2_fu_852_p2 = (x_weight_0_1_fu_840_p2 - tmp_36_0_2_cast_fu_849_p1);

assign x_weight_2_2_fu_989_p2 = (tmp18_fu_981_p2 + tmp19_cast_fu_986_p1);

assign y_weight_0_2_cast_fu_864_p1 = $signed(y_weight_0_2_fu_858_p2);

assign y_weight_0_2_fu_858_p2 = (tmp_361_cast1_fu_813_p1 - tmp_36_0_2_cast1_fu_846_p1);

assign y_weight_1_1_fu_879_p2 = ($signed(y_weight_0_2_cast_fu_864_p1) + $signed(tmp_41_1_cast_fu_875_p1));

assign y_weight_1_2_fu_896_p2 = (y_weight_1_1_fu_879_p2 - p_shl6_cast_fu_892_p1);

assign y_weight_2_1_fu_973_p2 = (tmp_36_2_cast_fu_959_p1 + y_weight_1_2_reg_1391);

assign y_weight_2_2_fu_995_p2 = (y_weight_2_1_fu_973_p2 - tmp_36_2_2_cast_fu_978_p1);

always @ (posedge ap_clk) begin
    tmp_1_cast_reg_1121[32:30] <= 3'b000;
    cols_assign_cast_reg_1238[11] <= 1'b0;
end

endmodule //sobel_filter
