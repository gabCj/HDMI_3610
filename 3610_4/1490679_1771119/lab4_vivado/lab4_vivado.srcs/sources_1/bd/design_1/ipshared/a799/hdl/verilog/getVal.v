// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module getVal (
        ap_clk,
        ap_rst,
        xDiff,
        yDiff,
        Y_0_read,
        Y_1_read,
        Y_2_read,
        Y_3_read,
        Y_4_read,
        Y_5_read,
        Y_6_read,
        Y_7_read,
        Y_8_read,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [1:0] xDiff;
input  [1:0] yDiff;
input  [7:0] Y_0_read;
input  [7:0] Y_1_read;
input  [7:0] Y_2_read;
input  [7:0] Y_3_read;
input  [7:0] Y_4_read;
input  [7:0] Y_5_read;
input  [7:0] Y_6_read;
input  [7:0] Y_7_read;
input  [7:0] Y_8_read;
output  [7:0] ap_return;
input   ap_ce;

reg   [7:0] Y_8_read_1_reg_190;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] Y_7_read_1_reg_195;
reg   [7:0] Y_6_read_1_reg_200;
reg   [7:0] Y_5_read_1_reg_205;
reg   [7:0] Y_4_read_1_reg_210;
reg   [7:0] Y_3_read_1_reg_215;
reg   [7:0] Y_2_read_1_reg_220;
reg   [7:0] Y_1_read_1_reg_225;
reg   [7:0] Y_0_read_1_reg_230;
wire   [3:0] tmp_109_fu_170_p2;
reg   [3:0] tmp_109_reg_235;
wire  signed [1:0] p_shl_fu_106_p1;
wire    ap_block_pp0_stage0;
wire  signed [1:0] yDiff_cast_fu_114_p0;
wire   [3:0] p_shl_fu_106_p3;
wire  signed [3:0] yDiff_cast_fu_114_p1;
wire  signed [3:0] tmp_fu_118_p2;
wire  signed [4:0] tmp_cast_fu_124_p1;
wire  signed [1:0] xDiff_cast_fu_134_p0;
wire  signed [1:0] tmp_108_fu_144_p0;
wire  signed [4:0] xDiff_cast_fu_134_p1;
wire   [4:0] tmp9_fu_128_p2;
wire   [4:0] fullIndex_fu_148_p2;
wire   [0:0] tmp_115_fu_154_p3;
wire   [3:0] tmp_s_fu_138_p2;
wire   [3:0] p_v_fu_162_p3;
wire  signed [3:0] tmp_108_fu_144_p1;
wire   [7:0] tmp_110_fu_176_p11;

sobel_filter_mux_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_bkb_U1(
    .din0(Y_0_read_1_reg_230),
    .din1(Y_1_read_1_reg_225),
    .din2(Y_2_read_1_reg_220),
    .din3(Y_3_read_1_reg_215),
    .din4(Y_4_read_1_reg_210),
    .din5(Y_5_read_1_reg_205),
    .din6(Y_6_read_1_reg_200),
    .din7(Y_7_read_1_reg_195),
    .din8(Y_8_read_1_reg_190),
    .din9(tmp_109_reg_235),
    .dout(tmp_110_fu_176_p11)
);

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        Y_0_read_1_reg_230 <= Y_0_read;
        Y_1_read_1_reg_225 <= Y_1_read;
        Y_2_read_1_reg_220 <= Y_2_read;
        Y_3_read_1_reg_215 <= Y_3_read;
        Y_4_read_1_reg_210 <= Y_4_read;
        Y_5_read_1_reg_205 <= Y_5_read;
        Y_6_read_1_reg_200 <= Y_6_read;
        Y_7_read_1_reg_195 <= Y_7_read;
        Y_8_read_1_reg_190 <= Y_8_read;
        tmp_109_reg_235 <= tmp_109_fu_170_p2;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_return = tmp_110_fu_176_p11;

assign fullIndex_fu_148_p2 = ($signed(xDiff_cast_fu_134_p1) + $signed(tmp9_fu_128_p2));

assign p_shl_fu_106_p1 = yDiff;

assign p_shl_fu_106_p3 = {{p_shl_fu_106_p1}, {2'd0}};

assign p_v_fu_162_p3 = ((tmp_115_fu_154_p3[0:0] === 1'b1) ? tmp_fu_118_p2 : tmp_s_fu_138_p2);

assign tmp9_fu_128_p2 = ($signed(tmp_cast_fu_124_p1) + $signed(5'd4));

assign tmp_108_fu_144_p0 = xDiff;

assign tmp_108_fu_144_p1 = tmp_108_fu_144_p0;

assign tmp_109_fu_170_p2 = ($signed(p_v_fu_162_p3) + $signed(tmp_108_fu_144_p1));

assign tmp_115_fu_154_p3 = fullIndex_fu_148_p2[32'd4];

assign tmp_cast_fu_124_p1 = tmp_fu_118_p2;

assign tmp_fu_118_p2 = ($signed(p_shl_fu_106_p3) - $signed(yDiff_cast_fu_114_p1));

assign tmp_s_fu_138_p2 = ($signed(tmp_fu_118_p2) + $signed(4'd4));

assign xDiff_cast_fu_134_p0 = xDiff;

assign xDiff_cast_fu_134_p1 = xDiff_cast_fu_134_p0;

assign yDiff_cast_fu_114_p0 = yDiff;

assign yDiff_cast_fu_114_p1 = yDiff_cast_fu_114_p0;

endmodule //getVal
