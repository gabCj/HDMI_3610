// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module getVal (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        index,
        xDiff,
        yDiff,
        Y_address0,
        Y_ce0,
        Y_q0,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [13:0] index;
input  [1:0] xDiff;
input  [1:0] yDiff;
output  [12:0] Y_address0;
output   Y_ce0;
input  [7:0] Y_q0;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Y_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] fullIndex_1_fu_152_p3;
reg   [15:0] fullIndex_1_reg_168;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] tmp_70_fu_163_p1;
wire   [8:0] p_shl2_fu_68_p3;
wire   [12:0] p_shl_fu_60_p3;
wire  signed [12:0] p_shl2_cast_fu_76_p1;
wire  signed [12:0] xDiff_cast_fu_86_p1;
wire   [12:0] tmp_fu_80_p2;
wire   [12:0] tmp1_fu_90_p2;
wire  signed [14:0] index_cast_fu_100_p1;
wire  signed [14:0] tmp1_cast_fu_96_p1;
wire   [14:0] fullIndex_fu_104_p2;
wire   [14:0] fullIndex_2_fu_118_p2;
wire   [0:0] tmp_s_fu_128_p2;
wire   [14:0] fullIndex_3_fu_134_p2;
wire   [14:0] p_s_fu_140_p3;
wire   [0:0] tmp_71_fu_110_p3;
wire   [15:0] fullIndex_2_cast_fu_124_p1;
wire  signed [15:0] p_cast_fu_148_p1;
wire  signed [31:0] fullIndex_1_cast_fu_160_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_reset_start_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fullIndex_1_reg_168 <= fullIndex_1_fu_152_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Y_ce0 = 1'b1;
    end else begin
        Y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_start_pp0 = 1'b1;
    end else begin
        ap_reset_start_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Y_address0 = tmp_70_fu_163_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = Y_q0;

assign fullIndex_1_cast_fu_160_p1 = $signed(fullIndex_1_reg_168);

assign fullIndex_1_fu_152_p3 = ((tmp_71_fu_110_p3[0:0] === 1'b1) ? fullIndex_2_cast_fu_124_p1 : p_cast_fu_148_p1);

assign fullIndex_2_cast_fu_124_p1 = fullIndex_2_fu_118_p2;

assign fullIndex_2_fu_118_p2 = (fullIndex_fu_104_p2 + 15'd7680);

assign fullIndex_3_fu_134_p2 = ($signed(fullIndex_fu_104_p2) + $signed(15'd25088));

assign fullIndex_fu_104_p2 = ($signed(index_cast_fu_100_p1) + $signed(tmp1_cast_fu_96_p1));

assign index_cast_fu_100_p1 = $signed(index);

assign p_cast_fu_148_p1 = $signed(p_s_fu_140_p3);

assign p_s_fu_140_p3 = ((tmp_s_fu_128_p2[0:0] === 1'b1) ? fullIndex_fu_104_p2 : fullIndex_3_fu_134_p2);

assign p_shl2_cast_fu_76_p1 = $signed(p_shl2_fu_68_p3);

assign p_shl2_fu_68_p3 = {{yDiff}, {7'd0}};

assign p_shl_fu_60_p3 = {{yDiff}, {11'd0}};

assign tmp1_cast_fu_96_p1 = $signed(tmp1_fu_90_p2);

assign tmp1_fu_90_p2 = ($signed(xDiff_cast_fu_86_p1) + $signed(tmp_fu_80_p2));

assign tmp_70_fu_163_p1 = $unsigned(fullIndex_1_cast_fu_160_p1);

assign tmp_71_fu_110_p3 = fullIndex_fu_104_p2[32'd14];

assign tmp_fu_80_p2 = ($signed(p_shl_fu_60_p3) - $signed(p_shl2_cast_fu_76_p1));

assign tmp_s_fu_128_p2 = (($signed(fullIndex_fu_104_p2) < $signed(15'd7680)) ? 1'b1 : 1'b0);

assign xDiff_cast_fu_86_p1 = $signed(xDiff);

endmodule //getVal
