// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "getVal.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic getVal::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic getVal::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> getVal::ap_ST_fsm_pp0_stage0 = "1";
const bool getVal::ap_const_boolean_1 = true;
const sc_lv<32> getVal::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool getVal::ap_const_boolean_0 = false;
const sc_lv<11> getVal::ap_const_lv11_0 = "00000000000";
const sc_lv<7> getVal::ap_const_lv7_0 = "0000000";
const sc_lv<32> getVal::ap_const_lv32_E = "1110";
const sc_lv<15> getVal::ap_const_lv15_1E00 = "1111000000000";
const sc_lv<15> getVal::ap_const_lv15_6200 = "110001000000000";

getVal::getVal(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Y_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_70_fu_163_p1 );

    SC_METHOD(thread_Y_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp0_0to1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to1 );

    SC_METHOD(thread_ap_reset_start_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to1 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( Y_q0 );

    SC_METHOD(thread_fullIndex_1_cast_fu_160_p1);
    sensitive << ( fullIndex_1_reg_168 );

    SC_METHOD(thread_fullIndex_1_fu_152_p3);
    sensitive << ( tmp_71_fu_110_p3 );
    sensitive << ( fullIndex_2_cast_fu_124_p1 );
    sensitive << ( p_cast_fu_148_p1 );

    SC_METHOD(thread_fullIndex_2_cast_fu_124_p1);
    sensitive << ( fullIndex_2_fu_118_p2 );

    SC_METHOD(thread_fullIndex_2_fu_118_p2);
    sensitive << ( fullIndex_fu_104_p2 );

    SC_METHOD(thread_fullIndex_3_fu_134_p2);
    sensitive << ( fullIndex_fu_104_p2 );

    SC_METHOD(thread_fullIndex_fu_104_p2);
    sensitive << ( index_cast_fu_100_p1 );
    sensitive << ( tmp1_cast_fu_96_p1 );

    SC_METHOD(thread_index_cast_fu_100_p1);
    sensitive << ( index );

    SC_METHOD(thread_p_cast_fu_148_p1);
    sensitive << ( p_s_fu_140_p3 );

    SC_METHOD(thread_p_s_fu_140_p3);
    sensitive << ( fullIndex_fu_104_p2 );
    sensitive << ( tmp_s_fu_128_p2 );
    sensitive << ( fullIndex_3_fu_134_p2 );

    SC_METHOD(thread_p_shl2_cast_fu_76_p1);
    sensitive << ( p_shl2_fu_68_p3 );

    SC_METHOD(thread_p_shl2_fu_68_p3);
    sensitive << ( yDiff );

    SC_METHOD(thread_p_shl_fu_60_p3);
    sensitive << ( yDiff );

    SC_METHOD(thread_tmp1_cast_fu_96_p1);
    sensitive << ( tmp1_fu_90_p2 );

    SC_METHOD(thread_tmp1_fu_90_p2);
    sensitive << ( xDiff_cast_fu_86_p1 );
    sensitive << ( tmp_fu_80_p2 );

    SC_METHOD(thread_tmp_70_fu_163_p1);
    sensitive << ( fullIndex_1_cast_fu_160_p1 );

    SC_METHOD(thread_tmp_71_fu_110_p3);
    sensitive << ( fullIndex_fu_104_p2 );

    SC_METHOD(thread_tmp_fu_80_p2);
    sensitive << ( p_shl_fu_60_p3 );
    sensitive << ( p_shl2_cast_fu_76_p1 );

    SC_METHOD(thread_tmp_s_fu_128_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( fullIndex_fu_104_p2 );

    SC_METHOD(thread_xDiff_cast_fu_86_p1);
    sensitive << ( xDiff );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );
    sensitive << ( ap_reset_start_pp0 );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "getVal_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
    sc_trace(mVcdFile, index, "(port)index");
    sc_trace(mVcdFile, xDiff, "(port)xDiff");
    sc_trace(mVcdFile, yDiff, "(port)yDiff");
    sc_trace(mVcdFile, Y_address0, "(port)Y_address0");
    sc_trace(mVcdFile, Y_ce0, "(port)Y_ce0");
    sc_trace(mVcdFile, Y_q0, "(port)Y_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, fullIndex_1_fu_152_p3, "fullIndex_1_fu_152_p3");
    sc_trace(mVcdFile, fullIndex_1_reg_168, "fullIndex_1_reg_168");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, tmp_70_fu_163_p1, "tmp_70_fu_163_p1");
    sc_trace(mVcdFile, p_shl2_fu_68_p3, "p_shl2_fu_68_p3");
    sc_trace(mVcdFile, p_shl_fu_60_p3, "p_shl_fu_60_p3");
    sc_trace(mVcdFile, p_shl2_cast_fu_76_p1, "p_shl2_cast_fu_76_p1");
    sc_trace(mVcdFile, xDiff_cast_fu_86_p1, "xDiff_cast_fu_86_p1");
    sc_trace(mVcdFile, tmp_fu_80_p2, "tmp_fu_80_p2");
    sc_trace(mVcdFile, tmp1_fu_90_p2, "tmp1_fu_90_p2");
    sc_trace(mVcdFile, index_cast_fu_100_p1, "index_cast_fu_100_p1");
    sc_trace(mVcdFile, tmp1_cast_fu_96_p1, "tmp1_cast_fu_96_p1");
    sc_trace(mVcdFile, fullIndex_fu_104_p2, "fullIndex_fu_104_p2");
    sc_trace(mVcdFile, fullIndex_2_fu_118_p2, "fullIndex_2_fu_118_p2");
    sc_trace(mVcdFile, tmp_s_fu_128_p2, "tmp_s_fu_128_p2");
    sc_trace(mVcdFile, fullIndex_3_fu_134_p2, "fullIndex_3_fu_134_p2");
    sc_trace(mVcdFile, p_s_fu_140_p3, "p_s_fu_140_p3");
    sc_trace(mVcdFile, tmp_71_fu_110_p3, "tmp_71_fu_110_p3");
    sc_trace(mVcdFile, fullIndex_2_cast_fu_124_p1, "fullIndex_2_cast_fu_124_p1");
    sc_trace(mVcdFile, p_cast_fu_148_p1, "p_cast_fu_148_p1");
    sc_trace(mVcdFile, fullIndex_1_cast_fu_160_p1, "fullIndex_1_cast_fu_160_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to1, "ap_idle_pp0_0to1");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_reset_start_pp0, "ap_reset_start_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

getVal::~getVal() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void getVal::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        fullIndex_1_reg_168 = fullIndex_1_fu_152_p3.read();
    }
}

void getVal::thread_Y_address0() {
    Y_address0 =  (sc_lv<13>) (tmp_70_fu_163_p1.read());
}

void getVal::thread_Y_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        Y_ce0 = ap_const_logic_1;
    } else {
        Y_ce0 = ap_const_logic_0;
    }
}

void getVal::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void getVal::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getVal::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void getVal::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0));
}

void getVal::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0);
}

void getVal::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getVal::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getVal::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void getVal::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void getVal::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void getVal::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void getVal::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void getVal::thread_ap_idle_pp0_0to1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0_0to1 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to1 = ap_const_logic_0;
    }
}

void getVal::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void getVal::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to1.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void getVal::thread_ap_reset_start_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()))) {
        ap_reset_start_pp0 = ap_const_logic_1;
    } else {
        ap_reset_start_pp0 = ap_const_logic_0;
    }
}

void getVal::thread_ap_return() {
    ap_return = Y_q0.read();
}

void getVal::thread_fullIndex_1_cast_fu_160_p1() {
    fullIndex_1_cast_fu_160_p1 = esl_sext<32,16>(fullIndex_1_reg_168.read());
}

void getVal::thread_fullIndex_1_fu_152_p3() {
    fullIndex_1_fu_152_p3 = (!tmp_71_fu_110_p3.read()[0].is_01())? sc_lv<16>(): ((tmp_71_fu_110_p3.read()[0].to_bool())? fullIndex_2_cast_fu_124_p1.read(): p_cast_fu_148_p1.read());
}

void getVal::thread_fullIndex_2_cast_fu_124_p1() {
    fullIndex_2_cast_fu_124_p1 = esl_zext<16,15>(fullIndex_2_fu_118_p2.read());
}

void getVal::thread_fullIndex_2_fu_118_p2() {
    fullIndex_2_fu_118_p2 = (!fullIndex_fu_104_p2.read().is_01() || !ap_const_lv15_1E00.is_01())? sc_lv<15>(): (sc_biguint<15>(fullIndex_fu_104_p2.read()) + sc_biguint<15>(ap_const_lv15_1E00));
}

void getVal::thread_fullIndex_3_fu_134_p2() {
    fullIndex_3_fu_134_p2 = (!fullIndex_fu_104_p2.read().is_01() || !ap_const_lv15_6200.is_01())? sc_lv<15>(): (sc_biguint<15>(fullIndex_fu_104_p2.read()) + sc_bigint<15>(ap_const_lv15_6200));
}

void getVal::thread_fullIndex_fu_104_p2() {
    fullIndex_fu_104_p2 = (!index_cast_fu_100_p1.read().is_01() || !tmp1_cast_fu_96_p1.read().is_01())? sc_lv<15>(): (sc_bigint<15>(index_cast_fu_100_p1.read()) + sc_bigint<15>(tmp1_cast_fu_96_p1.read()));
}

void getVal::thread_index_cast_fu_100_p1() {
    index_cast_fu_100_p1 = esl_sext<15,14>(index.read());
}

void getVal::thread_p_cast_fu_148_p1() {
    p_cast_fu_148_p1 = esl_sext<16,15>(p_s_fu_140_p3.read());
}

void getVal::thread_p_s_fu_140_p3() {
    p_s_fu_140_p3 = (!tmp_s_fu_128_p2.read()[0].is_01())? sc_lv<15>(): ((tmp_s_fu_128_p2.read()[0].to_bool())? fullIndex_fu_104_p2.read(): fullIndex_3_fu_134_p2.read());
}

void getVal::thread_p_shl2_cast_fu_76_p1() {
    p_shl2_cast_fu_76_p1 = esl_sext<13,9>(p_shl2_fu_68_p3.read());
}

void getVal::thread_p_shl2_fu_68_p3() {
    p_shl2_fu_68_p3 = esl_concat<2,7>(yDiff.read(), ap_const_lv7_0);
}

void getVal::thread_p_shl_fu_60_p3() {
    p_shl_fu_60_p3 = esl_concat<2,11>(yDiff.read(), ap_const_lv11_0);
}

void getVal::thread_tmp1_cast_fu_96_p1() {
    tmp1_cast_fu_96_p1 = esl_sext<15,13>(tmp1_fu_90_p2.read());
}

void getVal::thread_tmp1_fu_90_p2() {
    tmp1_fu_90_p2 = (!xDiff_cast_fu_86_p1.read().is_01() || !tmp_fu_80_p2.read().is_01())? sc_lv<13>(): (sc_bigint<13>(xDiff_cast_fu_86_p1.read()) + sc_biguint<13>(tmp_fu_80_p2.read()));
}

void getVal::thread_tmp_70_fu_163_p1() {
    tmp_70_fu_163_p1 = esl_zext<64,32>(fullIndex_1_cast_fu_160_p1.read());
}

void getVal::thread_tmp_71_fu_110_p3() {
    tmp_71_fu_110_p3 = fullIndex_fu_104_p2.read().range(14, 14);
}

void getVal::thread_tmp_fu_80_p2() {
    tmp_fu_80_p2 = (!p_shl_fu_60_p3.read().is_01() || !p_shl2_cast_fu_76_p1.read().is_01())? sc_lv<13>(): (sc_biguint<13>(p_shl_fu_60_p3.read()) - sc_bigint<13>(p_shl2_cast_fu_76_p1.read()));
}

void getVal::thread_tmp_s_fu_128_p2() {
    tmp_s_fu_128_p2 = (!fullIndex_fu_104_p2.read().is_01() || !ap_const_lv15_1E00.is_01())? sc_lv<1>(): (sc_bigint<15>(fullIndex_fu_104_p2.read()) < sc_bigint<15>(ap_const_lv15_1E00));
}

void getVal::thread_xDiff_cast_fu_86_p1() {
    xDiff_cast_fu_86_p1 = esl_sext<13,2>(xDiff.read());
}

void getVal::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

