// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "getVal.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic getVal::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic getVal::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> getVal::ap_ST_fsm_state1 = "1";
const sc_lv<9> getVal::ap_ST_fsm_state2 = "10";
const sc_lv<9> getVal::ap_ST_fsm_state3 = "100";
const sc_lv<9> getVal::ap_ST_fsm_state4 = "1000";
const sc_lv<9> getVal::ap_ST_fsm_state5 = "10000";
const sc_lv<9> getVal::ap_ST_fsm_state6 = "100000";
const sc_lv<9> getVal::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> getVal::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> getVal::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> getVal::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> getVal::ap_const_lv1_0 = "0";
const sc_lv<3> getVal::ap_const_lv3_0 = "000";
const sc_lv<2> getVal::ap_const_lv2_0 = "00";
const sc_lv<4> getVal::ap_const_lv4_0 = "0000";
const sc_lv<8> getVal::ap_const_lv8_0 = "00000000";
const sc_lv<32> getVal::ap_const_lv32_1 = "1";
const sc_lv<32> getVal::ap_const_lv32_8 = "1000";
const sc_lv<11> getVal::ap_const_lv11_0 = "00000000000";
const sc_lv<7> getVal::ap_const_lv7_0 = "0000000";
const bool getVal::ap_const_boolean_1 = true;

getVal::getVal(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Y_blk_n_AR);
    sensitive << ( m_axi_Y_ARREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Y_blk_n_R);
    sensitive << ( m_axi_Y_RVALID );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_Y_RVALID );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( m_axi_Y_RVALID );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_return);
    sensitive << ( m_axi_Y_RVALID );
    sensitive << ( m_axi_Y_RDATA );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_Y_ARREADY);
    sensitive << ( m_axi_Y_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_Y_ARREADY );

    SC_METHOD(thread_m_axi_Y_ARADDR);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( Y_addr_reg_150 );
    sensitive << ( ap_reg_ioackin_m_axi_Y_ARREADY );

    SC_METHOD(thread_m_axi_Y_ARBURST);

    SC_METHOD(thread_m_axi_Y_ARCACHE);

    SC_METHOD(thread_m_axi_Y_ARID);

    SC_METHOD(thread_m_axi_Y_ARLEN);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_m_axi_Y_ARREADY );

    SC_METHOD(thread_m_axi_Y_ARLOCK);

    SC_METHOD(thread_m_axi_Y_ARPROT);

    SC_METHOD(thread_m_axi_Y_ARQOS);

    SC_METHOD(thread_m_axi_Y_ARREGION);

    SC_METHOD(thread_m_axi_Y_ARSIZE);

    SC_METHOD(thread_m_axi_Y_ARUSER);

    SC_METHOD(thread_m_axi_Y_ARVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_m_axi_Y_ARREADY );

    SC_METHOD(thread_m_axi_Y_AWADDR);

    SC_METHOD(thread_m_axi_Y_AWBURST);

    SC_METHOD(thread_m_axi_Y_AWCACHE);

    SC_METHOD(thread_m_axi_Y_AWID);

    SC_METHOD(thread_m_axi_Y_AWLEN);

    SC_METHOD(thread_m_axi_Y_AWLOCK);

    SC_METHOD(thread_m_axi_Y_AWPROT);

    SC_METHOD(thread_m_axi_Y_AWQOS);

    SC_METHOD(thread_m_axi_Y_AWREGION);

    SC_METHOD(thread_m_axi_Y_AWSIZE);

    SC_METHOD(thread_m_axi_Y_AWUSER);

    SC_METHOD(thread_m_axi_Y_AWVALID);

    SC_METHOD(thread_m_axi_Y_BREADY);

    SC_METHOD(thread_m_axi_Y_RREADY);
    sensitive << ( m_axi_Y_RVALID );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_m_axi_Y_WDATA);

    SC_METHOD(thread_m_axi_Y_WID);

    SC_METHOD(thread_m_axi_Y_WLAST);

    SC_METHOD(thread_m_axi_Y_WSTRB);

    SC_METHOD(thread_m_axi_Y_WUSER);

    SC_METHOD(thread_m_axi_Y_WVALID);

    SC_METHOD(thread_p_shl2_cast_fu_96_p1);
    sensitive << ( p_shl2_fu_88_p3 );

    SC_METHOD(thread_p_shl2_fu_88_p3);
    sensitive << ( yDiff );

    SC_METHOD(thread_p_shl_fu_80_p3);
    sensitive << ( yDiff );

    SC_METHOD(thread_sext_cast_fu_130_p1);
    sensitive << ( Y_offset );

    SC_METHOD(thread_sum_cast_fu_140_p1);
    sensitive << ( sum_fu_134_p2 );

    SC_METHOD(thread_sum_fu_134_p2);
    sensitive << ( tmp_cast_fu_126_p1 );
    sensitive << ( sext_cast_fu_130_p1 );

    SC_METHOD(thread_tmp1_cast_fu_116_p1);
    sensitive << ( tmp1_fu_110_p2 );

    SC_METHOD(thread_tmp1_fu_110_p2);
    sensitive << ( tmp_fu_100_p2 );
    sensitive << ( xDiff_cast_fu_106_p1 );

    SC_METHOD(thread_tmp_33_fu_120_p2);
    sensitive << ( index );
    sensitive << ( tmp1_cast_fu_116_p1 );

    SC_METHOD(thread_tmp_cast_fu_126_p1);
    sensitive << ( tmp_33_fu_120_p2 );

    SC_METHOD(thread_tmp_fu_100_p2);
    sensitive << ( p_shl_fu_80_p3 );
    sensitive << ( p_shl2_cast_fu_96_p1 );

    SC_METHOD(thread_xDiff_cast_fu_106_p1);
    sensitive << ( xDiff );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_Y_RVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_sig_ioackin_m_axi_Y_ARREADY );

    ap_CS_fsm = "000000001";
    ap_reg_ioackin_m_axi_Y_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "getVal_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, index, "(port)index");
    sc_trace(mVcdFile, xDiff, "(port)xDiff");
    sc_trace(mVcdFile, yDiff, "(port)yDiff");
    sc_trace(mVcdFile, m_axi_Y_AWVALID, "(port)m_axi_Y_AWVALID");
    sc_trace(mVcdFile, m_axi_Y_AWREADY, "(port)m_axi_Y_AWREADY");
    sc_trace(mVcdFile, m_axi_Y_AWADDR, "(port)m_axi_Y_AWADDR");
    sc_trace(mVcdFile, m_axi_Y_AWID, "(port)m_axi_Y_AWID");
    sc_trace(mVcdFile, m_axi_Y_AWLEN, "(port)m_axi_Y_AWLEN");
    sc_trace(mVcdFile, m_axi_Y_AWSIZE, "(port)m_axi_Y_AWSIZE");
    sc_trace(mVcdFile, m_axi_Y_AWBURST, "(port)m_axi_Y_AWBURST");
    sc_trace(mVcdFile, m_axi_Y_AWLOCK, "(port)m_axi_Y_AWLOCK");
    sc_trace(mVcdFile, m_axi_Y_AWCACHE, "(port)m_axi_Y_AWCACHE");
    sc_trace(mVcdFile, m_axi_Y_AWPROT, "(port)m_axi_Y_AWPROT");
    sc_trace(mVcdFile, m_axi_Y_AWQOS, "(port)m_axi_Y_AWQOS");
    sc_trace(mVcdFile, m_axi_Y_AWREGION, "(port)m_axi_Y_AWREGION");
    sc_trace(mVcdFile, m_axi_Y_AWUSER, "(port)m_axi_Y_AWUSER");
    sc_trace(mVcdFile, m_axi_Y_WVALID, "(port)m_axi_Y_WVALID");
    sc_trace(mVcdFile, m_axi_Y_WREADY, "(port)m_axi_Y_WREADY");
    sc_trace(mVcdFile, m_axi_Y_WDATA, "(port)m_axi_Y_WDATA");
    sc_trace(mVcdFile, m_axi_Y_WSTRB, "(port)m_axi_Y_WSTRB");
    sc_trace(mVcdFile, m_axi_Y_WLAST, "(port)m_axi_Y_WLAST");
    sc_trace(mVcdFile, m_axi_Y_WID, "(port)m_axi_Y_WID");
    sc_trace(mVcdFile, m_axi_Y_WUSER, "(port)m_axi_Y_WUSER");
    sc_trace(mVcdFile, m_axi_Y_ARVALID, "(port)m_axi_Y_ARVALID");
    sc_trace(mVcdFile, m_axi_Y_ARREADY, "(port)m_axi_Y_ARREADY");
    sc_trace(mVcdFile, m_axi_Y_ARADDR, "(port)m_axi_Y_ARADDR");
    sc_trace(mVcdFile, m_axi_Y_ARID, "(port)m_axi_Y_ARID");
    sc_trace(mVcdFile, m_axi_Y_ARLEN, "(port)m_axi_Y_ARLEN");
    sc_trace(mVcdFile, m_axi_Y_ARSIZE, "(port)m_axi_Y_ARSIZE");
    sc_trace(mVcdFile, m_axi_Y_ARBURST, "(port)m_axi_Y_ARBURST");
    sc_trace(mVcdFile, m_axi_Y_ARLOCK, "(port)m_axi_Y_ARLOCK");
    sc_trace(mVcdFile, m_axi_Y_ARCACHE, "(port)m_axi_Y_ARCACHE");
    sc_trace(mVcdFile, m_axi_Y_ARPROT, "(port)m_axi_Y_ARPROT");
    sc_trace(mVcdFile, m_axi_Y_ARQOS, "(port)m_axi_Y_ARQOS");
    sc_trace(mVcdFile, m_axi_Y_ARREGION, "(port)m_axi_Y_ARREGION");
    sc_trace(mVcdFile, m_axi_Y_ARUSER, "(port)m_axi_Y_ARUSER");
    sc_trace(mVcdFile, m_axi_Y_RVALID, "(port)m_axi_Y_RVALID");
    sc_trace(mVcdFile, m_axi_Y_RREADY, "(port)m_axi_Y_RREADY");
    sc_trace(mVcdFile, m_axi_Y_RDATA, "(port)m_axi_Y_RDATA");
    sc_trace(mVcdFile, m_axi_Y_RLAST, "(port)m_axi_Y_RLAST");
    sc_trace(mVcdFile, m_axi_Y_RID, "(port)m_axi_Y_RID");
    sc_trace(mVcdFile, m_axi_Y_RUSER, "(port)m_axi_Y_RUSER");
    sc_trace(mVcdFile, m_axi_Y_RRESP, "(port)m_axi_Y_RRESP");
    sc_trace(mVcdFile, m_axi_Y_BVALID, "(port)m_axi_Y_BVALID");
    sc_trace(mVcdFile, m_axi_Y_BREADY, "(port)m_axi_Y_BREADY");
    sc_trace(mVcdFile, m_axi_Y_BRESP, "(port)m_axi_Y_BRESP");
    sc_trace(mVcdFile, m_axi_Y_BID, "(port)m_axi_Y_BID");
    sc_trace(mVcdFile, m_axi_Y_BUSER, "(port)m_axi_Y_BUSER");
    sc_trace(mVcdFile, Y_offset, "(port)Y_offset");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, Y_blk_n_AR, "Y_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, Y_blk_n_R, "Y_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, Y_addr_reg_150, "Y_addr_reg_150");
    sc_trace(mVcdFile, sum_cast_fu_140_p1, "sum_cast_fu_140_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_Y_ARREADY, "ap_reg_ioackin_m_axi_Y_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_Y_ARREADY, "ap_sig_ioackin_m_axi_Y_ARREADY");
    sc_trace(mVcdFile, p_shl2_fu_88_p3, "p_shl2_fu_88_p3");
    sc_trace(mVcdFile, p_shl_fu_80_p3, "p_shl_fu_80_p3");
    sc_trace(mVcdFile, p_shl2_cast_fu_96_p1, "p_shl2_cast_fu_96_p1");
    sc_trace(mVcdFile, tmp_fu_100_p2, "tmp_fu_100_p2");
    sc_trace(mVcdFile, xDiff_cast_fu_106_p1, "xDiff_cast_fu_106_p1");
    sc_trace(mVcdFile, tmp1_fu_110_p2, "tmp1_fu_110_p2");
    sc_trace(mVcdFile, tmp1_cast_fu_116_p1, "tmp1_cast_fu_116_p1");
    sc_trace(mVcdFile, tmp_33_fu_120_p2, "tmp_33_fu_120_p2");
    sc_trace(mVcdFile, tmp_cast_fu_126_p1, "tmp_cast_fu_126_p1");
    sc_trace(mVcdFile, sext_cast_fu_130_p1, "sext_cast_fu_130_p1");
    sc_trace(mVcdFile, sum_fu_134_p2, "sum_fu_134_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

getVal::~getVal() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void getVal::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_Y_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_Y_ARREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_Y_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_Y_ARREADY.read())) {
                ap_reg_ioackin_m_axi_Y_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        Y_addr_reg_150 =  (sc_lv<32>) (sum_cast_fu_140_p1.read());
    }
}

void getVal::thread_Y_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Y_blk_n_AR = m_axi_Y_ARREADY.read();
    } else {
        Y_blk_n_AR = ap_const_logic_1;
    }
}

void getVal::thread_Y_blk_n_R() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        Y_blk_n_R = m_axi_Y_RVALID.read();
    } else {
        Y_blk_n_R = ap_const_logic_1;
    }
}

void getVal::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void getVal::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void getVal::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void getVal::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(m_axi_Y_RVALID.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void getVal::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void getVal::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(m_axi_Y_RVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void getVal::thread_ap_return() {
    ap_return = m_axi_Y_RDATA.read();
}

void getVal::thread_ap_sig_ioackin_m_axi_Y_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_Y_ARREADY.read())) {
        ap_sig_ioackin_m_axi_Y_ARREADY = m_axi_Y_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_Y_ARREADY = ap_const_logic_1;
    }
}

void getVal::thread_m_axi_Y_ARADDR() {
    m_axi_Y_ARADDR = Y_addr_reg_150.read();
}

void getVal::thread_m_axi_Y_ARBURST() {
    m_axi_Y_ARBURST = ap_const_lv2_0;
}

void getVal::thread_m_axi_Y_ARCACHE() {
    m_axi_Y_ARCACHE = ap_const_lv4_0;
}

void getVal::thread_m_axi_Y_ARID() {
    m_axi_Y_ARID = ap_const_lv1_0;
}

void getVal::thread_m_axi_Y_ARLEN() {
    m_axi_Y_ARLEN = ap_const_lv32_1;
}

void getVal::thread_m_axi_Y_ARLOCK() {
    m_axi_Y_ARLOCK = ap_const_lv2_0;
}

void getVal::thread_m_axi_Y_ARPROT() {
    m_axi_Y_ARPROT = ap_const_lv3_0;
}

void getVal::thread_m_axi_Y_ARQOS() {
    m_axi_Y_ARQOS = ap_const_lv4_0;
}

void getVal::thread_m_axi_Y_ARREGION() {
    m_axi_Y_ARREGION = ap_const_lv4_0;
}

void getVal::thread_m_axi_Y_ARSIZE() {
    m_axi_Y_ARSIZE = ap_const_lv3_0;
}

void getVal::thread_m_axi_Y_ARUSER() {
    m_axi_Y_ARUSER = ap_const_lv1_0;
}

void getVal::thread_m_axi_Y_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_Y_ARREADY.read()))) {
        m_axi_Y_ARVALID = ap_const_logic_1;
    } else {
        m_axi_Y_ARVALID = ap_const_logic_0;
    }
}

void getVal::thread_m_axi_Y_AWADDR() {
    m_axi_Y_AWADDR = ap_const_lv32_0;
}

void getVal::thread_m_axi_Y_AWBURST() {
    m_axi_Y_AWBURST = ap_const_lv2_0;
}

void getVal::thread_m_axi_Y_AWCACHE() {
    m_axi_Y_AWCACHE = ap_const_lv4_0;
}

void getVal::thread_m_axi_Y_AWID() {
    m_axi_Y_AWID = ap_const_lv1_0;
}

void getVal::thread_m_axi_Y_AWLEN() {
    m_axi_Y_AWLEN = ap_const_lv32_0;
}

void getVal::thread_m_axi_Y_AWLOCK() {
    m_axi_Y_AWLOCK = ap_const_lv2_0;
}

void getVal::thread_m_axi_Y_AWPROT() {
    m_axi_Y_AWPROT = ap_const_lv3_0;
}

void getVal::thread_m_axi_Y_AWQOS() {
    m_axi_Y_AWQOS = ap_const_lv4_0;
}

void getVal::thread_m_axi_Y_AWREGION() {
    m_axi_Y_AWREGION = ap_const_lv4_0;
}

void getVal::thread_m_axi_Y_AWSIZE() {
    m_axi_Y_AWSIZE = ap_const_lv3_0;
}

void getVal::thread_m_axi_Y_AWUSER() {
    m_axi_Y_AWUSER = ap_const_lv1_0;
}

void getVal::thread_m_axi_Y_AWVALID() {
    m_axi_Y_AWVALID = ap_const_logic_0;
}

void getVal::thread_m_axi_Y_BREADY() {
    m_axi_Y_BREADY = ap_const_logic_0;
}

void getVal::thread_m_axi_Y_RREADY() {
    if ((esl_seteq<1,1,1>(m_axi_Y_RVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        m_axi_Y_RREADY = ap_const_logic_1;
    } else {
        m_axi_Y_RREADY = ap_const_logic_0;
    }
}

void getVal::thread_m_axi_Y_WDATA() {
    m_axi_Y_WDATA = ap_const_lv8_0;
}

void getVal::thread_m_axi_Y_WID() {
    m_axi_Y_WID = ap_const_lv1_0;
}

void getVal::thread_m_axi_Y_WLAST() {
    m_axi_Y_WLAST = ap_const_logic_0;
}

void getVal::thread_m_axi_Y_WSTRB() {
    m_axi_Y_WSTRB = ap_const_lv1_0;
}

void getVal::thread_m_axi_Y_WUSER() {
    m_axi_Y_WUSER = ap_const_lv1_0;
}

void getVal::thread_m_axi_Y_WVALID() {
    m_axi_Y_WVALID = ap_const_logic_0;
}

void getVal::thread_p_shl2_cast_fu_96_p1() {
    p_shl2_cast_fu_96_p1 = esl_sext<13,9>(p_shl2_fu_88_p3.read());
}

void getVal::thread_p_shl2_fu_88_p3() {
    p_shl2_fu_88_p3 = esl_concat<2,7>(yDiff.read(), ap_const_lv7_0);
}

void getVal::thread_p_shl_fu_80_p3() {
    p_shl_fu_80_p3 = esl_concat<2,11>(yDiff.read(), ap_const_lv11_0);
}

void getVal::thread_sext_cast_fu_130_p1() {
    sext_cast_fu_130_p1 = esl_sext<33,32>(Y_offset.read());
}

void getVal::thread_sum_cast_fu_140_p1() {
    sum_cast_fu_140_p1 = esl_sext<64,33>(sum_fu_134_p2.read());
}

void getVal::thread_sum_fu_134_p2() {
    sum_fu_134_p2 = (!tmp_cast_fu_126_p1.read().is_01() || !sext_cast_fu_130_p1.read().is_01())? sc_lv<33>(): (sc_bigint<33>(tmp_cast_fu_126_p1.read()) + sc_bigint<33>(sext_cast_fu_130_p1.read()));
}

void getVal::thread_tmp1_cast_fu_116_p1() {
    tmp1_cast_fu_116_p1 = esl_sext<23,13>(tmp1_fu_110_p2.read());
}

void getVal::thread_tmp1_fu_110_p2() {
    tmp1_fu_110_p2 = (!tmp_fu_100_p2.read().is_01() || !xDiff_cast_fu_106_p1.read().is_01())? sc_lv<13>(): (sc_biguint<13>(tmp_fu_100_p2.read()) + sc_bigint<13>(xDiff_cast_fu_106_p1.read()));
}

void getVal::thread_tmp_33_fu_120_p2() {
    tmp_33_fu_120_p2 = (!index.read().is_01() || !tmp1_cast_fu_116_p1.read().is_01())? sc_lv<23>(): (sc_biguint<23>(index.read()) + sc_bigint<23>(tmp1_cast_fu_116_p1.read()));
}

void getVal::thread_tmp_cast_fu_126_p1() {
    tmp_cast_fu_126_p1 = esl_sext<33,23>(tmp_33_fu_120_p2.read());
}

void getVal::thread_tmp_fu_100_p2() {
    tmp_fu_100_p2 = (!p_shl_fu_80_p3.read().is_01() || !p_shl2_cast_fu_96_p1.read().is_01())? sc_lv<13>(): (sc_biguint<13>(p_shl_fu_80_p3.read()) - sc_bigint<13>(p_shl2_cast_fu_96_p1.read()));
}

void getVal::thread_xDiff_cast_fu_106_p1() {
    xDiff_cast_fu_106_p1 = esl_sext<13,2>(xDiff.read());
}

void getVal::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_Y_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(m_axi_Y_RVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXX";
            break;
    }
}

}

