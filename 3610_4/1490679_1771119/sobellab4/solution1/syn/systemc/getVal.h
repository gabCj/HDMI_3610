// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _getVal_HH_
#define _getVal_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct getVal : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > ap_ce;
    sc_in< sc_lv<14> > index;
    sc_in< sc_lv<2> > xDiff;
    sc_in< sc_lv<2> > yDiff;
    sc_out< sc_lv<13> > Y_address0;
    sc_out< sc_logic > Y_ce0;
    sc_in< sc_lv<8> > Y_q0;
    sc_out< sc_lv<8> > ap_return;


    // Module declarations
    getVal(sc_module_name name);
    SC_HAS_PROCESS(getVal);

    ~getVal();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<16> > fullIndex_1_fu_152_p3;
    sc_signal< sc_lv<16> > fullIndex_1_reg_168;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<64> > tmp_70_fu_163_p1;
    sc_signal< sc_lv<9> > p_shl2_fu_68_p3;
    sc_signal< sc_lv<13> > p_shl_fu_60_p3;
    sc_signal< sc_lv<13> > p_shl2_cast_fu_76_p1;
    sc_signal< sc_lv<13> > xDiff_cast_fu_86_p1;
    sc_signal< sc_lv<13> > tmp_fu_80_p2;
    sc_signal< sc_lv<13> > tmp1_fu_90_p2;
    sc_signal< sc_lv<15> > index_cast_fu_100_p1;
    sc_signal< sc_lv<15> > tmp1_cast_fu_96_p1;
    sc_signal< sc_lv<15> > fullIndex_fu_104_p2;
    sc_signal< sc_lv<15> > fullIndex_2_fu_118_p2;
    sc_signal< sc_lv<1> > tmp_s_fu_128_p2;
    sc_signal< sc_lv<15> > fullIndex_3_fu_134_p2;
    sc_signal< sc_lv<15> > p_s_fu_140_p3;
    sc_signal< sc_lv<1> > tmp_71_fu_110_p3;
    sc_signal< sc_lv<16> > fullIndex_2_cast_fu_124_p1;
    sc_signal< sc_lv<16> > p_cast_fu_148_p1;
    sc_signal< sc_lv<32> > fullIndex_1_cast_fu_160_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to1;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_reset_start_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<15> ap_const_lv15_1E00;
    static const sc_lv<15> ap_const_lv15_6200;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Y_address0();
    void thread_Y_ce0();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_reset_start_pp0();
    void thread_ap_return();
    void thread_fullIndex_1_cast_fu_160_p1();
    void thread_fullIndex_1_fu_152_p3();
    void thread_fullIndex_2_cast_fu_124_p1();
    void thread_fullIndex_2_fu_118_p2();
    void thread_fullIndex_3_fu_134_p2();
    void thread_fullIndex_fu_104_p2();
    void thread_index_cast_fu_100_p1();
    void thread_p_cast_fu_148_p1();
    void thread_p_s_fu_140_p3();
    void thread_p_shl2_cast_fu_76_p1();
    void thread_p_shl2_fu_68_p3();
    void thread_p_shl_fu_60_p3();
    void thread_tmp1_cast_fu_96_p1();
    void thread_tmp1_fu_90_p2();
    void thread_tmp_70_fu_163_p1();
    void thread_tmp_71_fu_110_p3();
    void thread_tmp_fu_80_p2();
    void thread_tmp_s_fu_128_p2();
    void thread_xDiff_cast_fu_86_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
