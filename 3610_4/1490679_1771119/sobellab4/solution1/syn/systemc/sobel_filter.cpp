// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sobel_filter.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sobel_filter::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sobel_filter::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> sobel_filter::ap_ST_fsm_state1 = "1";
const sc_lv<7> sobel_filter::ap_ST_fsm_state2 = "10";
const sc_lv<7> sobel_filter::ap_ST_fsm_state3 = "100";
const sc_lv<7> sobel_filter::ap_ST_fsm_state4 = "1000";
const sc_lv<7> sobel_filter::ap_ST_fsm_state5 = "10000";
const sc_lv<7> sobel_filter::ap_ST_fsm_state6 = "100000";
const sc_lv<7> sobel_filter::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> sobel_filter::ap_const_lv32_0 = "00000000000000000000000000000000";
const int sobel_filter::C_S_AXI_DATA_WIDTH = "100000";
const int sobel_filter::C_M_AXI_GMEM0_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sobel_filter::C_M_AXI_GMEM0_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sobel_filter::C_M_AXI_GMEM0_CACHE_VALUE = "11";
const int sobel_filter::C_M_AXI_GMEM1_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sobel_filter::C_M_AXI_GMEM1_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sobel_filter::C_M_AXI_GMEM1_CACHE_VALUE = "11";
const sc_lv<32> sobel_filter::ap_const_lv32_1 = "1";
const sc_lv<32> sobel_filter::ap_const_lv32_2 = "10";
const sc_lv<32> sobel_filter::ap_const_lv32_4 = "100";
const sc_lv<32> sobel_filter::ap_const_lv32_5 = "101";
const sc_lv<2> sobel_filter::ap_const_lv2_0 = "00";
const sc_lv<32> sobel_filter::ap_const_lv32_3 = "11";
const sc_lv<11> sobel_filter::ap_const_lv11_0 = "00000000000";
const sc_lv<1> sobel_filter::ap_const_lv1_0 = "0";
const sc_lv<32> sobel_filter::ap_const_lv32_6 = "110";
const sc_lv<1> sobel_filter::ap_const_lv1_1 = "1";
const sc_lv<2> sobel_filter::ap_const_lv2_2 = "10";
const sc_lv<2> sobel_filter::ap_const_lv2_1 = "1";
const sc_lv<11> sobel_filter::ap_const_lv11_780 = "11110000000";
const sc_lv<11> sobel_filter::ap_const_lv11_1 = "1";
const sc_lv<11> sobel_filter::ap_const_lv11_438 = "10000111000";
const sc_lv<8> sobel_filter::ap_const_lv8_0 = "00000000";
const sc_lv<3> sobel_filter::ap_const_lv3_0 = "000";
const sc_lv<4> sobel_filter::ap_const_lv4_0 = "0000";
const bool sobel_filter::ap_const_boolean_1 = true;

sobel_filter::sobel_filter(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sobel_filter_AXILiteS_s_axi_U = new sobel_filter_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("sobel_filter_AXILiteS_s_axi_U");
    sobel_filter_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    sobel_filter_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    sobel_filter_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    sobel_filter_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    sobel_filter_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    sobel_filter_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    sobel_filter_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    sobel_filter_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    sobel_filter_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    sobel_filter_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    sobel_filter_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    sobel_filter_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    sobel_filter_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    sobel_filter_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    sobel_filter_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    sobel_filter_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    sobel_filter_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    sobel_filter_AXILiteS_s_axi_U->ACLK(ap_clk);
    sobel_filter_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    sobel_filter_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    sobel_filter_AXILiteS_s_axi_U->ap_start(ap_start);
    sobel_filter_AXILiteS_s_axi_U->interrupt(interrupt);
    sobel_filter_AXILiteS_s_axi_U->ap_ready(ap_ready);
    sobel_filter_AXILiteS_s_axi_U->ap_done(ap_done);
    sobel_filter_AXILiteS_s_axi_U->ap_idle(ap_idle);
    sobel_filter_AXILiteS_s_axi_U->inter_pix(inter_pix);
    sobel_filter_AXILiteS_s_axi_U->out_pix(out_pix);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( tmp_3_fu_150_p2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( tmp_3_fu_150_p2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_i_1_fu_132_p2);
    sensitive << ( i_reg_82 );

    SC_METHOD(thread_i_2_fu_156_p2);
    sensitive << ( i1_reg_104 );

    SC_METHOD(thread_j_1_fu_144_p2);
    sensitive << ( j_reg_93 );

    SC_METHOD(thread_j_2_fu_168_p2);
    sensitive << ( j2_reg_115 );

    SC_METHOD(thread_m_axi_gmem0_ARADDR);

    SC_METHOD(thread_m_axi_gmem0_ARBURST);

    SC_METHOD(thread_m_axi_gmem0_ARCACHE);

    SC_METHOD(thread_m_axi_gmem0_ARID);

    SC_METHOD(thread_m_axi_gmem0_ARLEN);

    SC_METHOD(thread_m_axi_gmem0_ARLOCK);

    SC_METHOD(thread_m_axi_gmem0_ARPROT);

    SC_METHOD(thread_m_axi_gmem0_ARQOS);

    SC_METHOD(thread_m_axi_gmem0_ARREGION);

    SC_METHOD(thread_m_axi_gmem0_ARSIZE);

    SC_METHOD(thread_m_axi_gmem0_ARUSER);

    SC_METHOD(thread_m_axi_gmem0_ARVALID);

    SC_METHOD(thread_m_axi_gmem0_AWADDR);

    SC_METHOD(thread_m_axi_gmem0_AWBURST);

    SC_METHOD(thread_m_axi_gmem0_AWCACHE);

    SC_METHOD(thread_m_axi_gmem0_AWID);

    SC_METHOD(thread_m_axi_gmem0_AWLEN);

    SC_METHOD(thread_m_axi_gmem0_AWLOCK);

    SC_METHOD(thread_m_axi_gmem0_AWPROT);

    SC_METHOD(thread_m_axi_gmem0_AWQOS);

    SC_METHOD(thread_m_axi_gmem0_AWREGION);

    SC_METHOD(thread_m_axi_gmem0_AWSIZE);

    SC_METHOD(thread_m_axi_gmem0_AWUSER);

    SC_METHOD(thread_m_axi_gmem0_AWVALID);

    SC_METHOD(thread_m_axi_gmem0_BREADY);

    SC_METHOD(thread_m_axi_gmem0_RREADY);

    SC_METHOD(thread_m_axi_gmem0_WDATA);

    SC_METHOD(thread_m_axi_gmem0_WID);

    SC_METHOD(thread_m_axi_gmem0_WLAST);

    SC_METHOD(thread_m_axi_gmem0_WSTRB);

    SC_METHOD(thread_m_axi_gmem0_WUSER);

    SC_METHOD(thread_m_axi_gmem0_WVALID);

    SC_METHOD(thread_m_axi_gmem1_ARADDR);

    SC_METHOD(thread_m_axi_gmem1_ARBURST);

    SC_METHOD(thread_m_axi_gmem1_ARCACHE);

    SC_METHOD(thread_m_axi_gmem1_ARID);

    SC_METHOD(thread_m_axi_gmem1_ARLEN);

    SC_METHOD(thread_m_axi_gmem1_ARLOCK);

    SC_METHOD(thread_m_axi_gmem1_ARPROT);

    SC_METHOD(thread_m_axi_gmem1_ARQOS);

    SC_METHOD(thread_m_axi_gmem1_ARREGION);

    SC_METHOD(thread_m_axi_gmem1_ARSIZE);

    SC_METHOD(thread_m_axi_gmem1_ARUSER);

    SC_METHOD(thread_m_axi_gmem1_ARVALID);

    SC_METHOD(thread_m_axi_gmem1_AWADDR);

    SC_METHOD(thread_m_axi_gmem1_AWBURST);

    SC_METHOD(thread_m_axi_gmem1_AWCACHE);

    SC_METHOD(thread_m_axi_gmem1_AWID);

    SC_METHOD(thread_m_axi_gmem1_AWLEN);

    SC_METHOD(thread_m_axi_gmem1_AWLOCK);

    SC_METHOD(thread_m_axi_gmem1_AWPROT);

    SC_METHOD(thread_m_axi_gmem1_AWQOS);

    SC_METHOD(thread_m_axi_gmem1_AWREGION);

    SC_METHOD(thread_m_axi_gmem1_AWSIZE);

    SC_METHOD(thread_m_axi_gmem1_AWUSER);

    SC_METHOD(thread_m_axi_gmem1_AWVALID);

    SC_METHOD(thread_m_axi_gmem1_BREADY);

    SC_METHOD(thread_m_axi_gmem1_RREADY);

    SC_METHOD(thread_m_axi_gmem1_WDATA);

    SC_METHOD(thread_m_axi_gmem1_WID);

    SC_METHOD(thread_m_axi_gmem1_WLAST);

    SC_METHOD(thread_m_axi_gmem1_WSTRB);

    SC_METHOD(thread_m_axi_gmem1_WUSER);

    SC_METHOD(thread_m_axi_gmem1_WVALID);

    SC_METHOD(thread_tmp_3_fu_150_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i1_reg_104 );

    SC_METHOD(thread_tmp_4_fu_138_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_reg_93 );

    SC_METHOD(thread_tmp_fu_126_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_82 );

    SC_METHOD(thread_tmp_s_fu_162_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( j2_reg_115 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_126_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_3_fu_150_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_4_fu_138_p2 );
    sensitive << ( tmp_s_fu_162_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sobel_filter_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_gmem0_AWVALID, "(port)m_axi_gmem0_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem0_AWREADY, "(port)m_axi_gmem0_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem0_AWADDR, "(port)m_axi_gmem0_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem0_AWID, "(port)m_axi_gmem0_AWID");
    sc_trace(mVcdFile, m_axi_gmem0_AWLEN, "(port)m_axi_gmem0_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem0_AWSIZE, "(port)m_axi_gmem0_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem0_AWBURST, "(port)m_axi_gmem0_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem0_AWLOCK, "(port)m_axi_gmem0_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem0_AWCACHE, "(port)m_axi_gmem0_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem0_AWPROT, "(port)m_axi_gmem0_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem0_AWQOS, "(port)m_axi_gmem0_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem0_AWREGION, "(port)m_axi_gmem0_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem0_AWUSER, "(port)m_axi_gmem0_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem0_WVALID, "(port)m_axi_gmem0_WVALID");
    sc_trace(mVcdFile, m_axi_gmem0_WREADY, "(port)m_axi_gmem0_WREADY");
    sc_trace(mVcdFile, m_axi_gmem0_WDATA, "(port)m_axi_gmem0_WDATA");
    sc_trace(mVcdFile, m_axi_gmem0_WSTRB, "(port)m_axi_gmem0_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem0_WLAST, "(port)m_axi_gmem0_WLAST");
    sc_trace(mVcdFile, m_axi_gmem0_WID, "(port)m_axi_gmem0_WID");
    sc_trace(mVcdFile, m_axi_gmem0_WUSER, "(port)m_axi_gmem0_WUSER");
    sc_trace(mVcdFile, m_axi_gmem0_ARVALID, "(port)m_axi_gmem0_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem0_ARREADY, "(port)m_axi_gmem0_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem0_ARADDR, "(port)m_axi_gmem0_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem0_ARID, "(port)m_axi_gmem0_ARID");
    sc_trace(mVcdFile, m_axi_gmem0_ARLEN, "(port)m_axi_gmem0_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem0_ARSIZE, "(port)m_axi_gmem0_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem0_ARBURST, "(port)m_axi_gmem0_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem0_ARLOCK, "(port)m_axi_gmem0_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem0_ARCACHE, "(port)m_axi_gmem0_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem0_ARPROT, "(port)m_axi_gmem0_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem0_ARQOS, "(port)m_axi_gmem0_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem0_ARREGION, "(port)m_axi_gmem0_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem0_ARUSER, "(port)m_axi_gmem0_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem0_RVALID, "(port)m_axi_gmem0_RVALID");
    sc_trace(mVcdFile, m_axi_gmem0_RREADY, "(port)m_axi_gmem0_RREADY");
    sc_trace(mVcdFile, m_axi_gmem0_RDATA, "(port)m_axi_gmem0_RDATA");
    sc_trace(mVcdFile, m_axi_gmem0_RLAST, "(port)m_axi_gmem0_RLAST");
    sc_trace(mVcdFile, m_axi_gmem0_RID, "(port)m_axi_gmem0_RID");
    sc_trace(mVcdFile, m_axi_gmem0_RUSER, "(port)m_axi_gmem0_RUSER");
    sc_trace(mVcdFile, m_axi_gmem0_RRESP, "(port)m_axi_gmem0_RRESP");
    sc_trace(mVcdFile, m_axi_gmem0_BVALID, "(port)m_axi_gmem0_BVALID");
    sc_trace(mVcdFile, m_axi_gmem0_BREADY, "(port)m_axi_gmem0_BREADY");
    sc_trace(mVcdFile, m_axi_gmem0_BRESP, "(port)m_axi_gmem0_BRESP");
    sc_trace(mVcdFile, m_axi_gmem0_BID, "(port)m_axi_gmem0_BID");
    sc_trace(mVcdFile, m_axi_gmem0_BUSER, "(port)m_axi_gmem0_BUSER");
    sc_trace(mVcdFile, m_axi_gmem1_AWVALID, "(port)m_axi_gmem1_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem1_AWREADY, "(port)m_axi_gmem1_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem1_AWADDR, "(port)m_axi_gmem1_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem1_AWID, "(port)m_axi_gmem1_AWID");
    sc_trace(mVcdFile, m_axi_gmem1_AWLEN, "(port)m_axi_gmem1_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem1_AWSIZE, "(port)m_axi_gmem1_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem1_AWBURST, "(port)m_axi_gmem1_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem1_AWLOCK, "(port)m_axi_gmem1_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem1_AWCACHE, "(port)m_axi_gmem1_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem1_AWPROT, "(port)m_axi_gmem1_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem1_AWQOS, "(port)m_axi_gmem1_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem1_AWREGION, "(port)m_axi_gmem1_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem1_AWUSER, "(port)m_axi_gmem1_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem1_WVALID, "(port)m_axi_gmem1_WVALID");
    sc_trace(mVcdFile, m_axi_gmem1_WREADY, "(port)m_axi_gmem1_WREADY");
    sc_trace(mVcdFile, m_axi_gmem1_WDATA, "(port)m_axi_gmem1_WDATA");
    sc_trace(mVcdFile, m_axi_gmem1_WSTRB, "(port)m_axi_gmem1_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem1_WLAST, "(port)m_axi_gmem1_WLAST");
    sc_trace(mVcdFile, m_axi_gmem1_WID, "(port)m_axi_gmem1_WID");
    sc_trace(mVcdFile, m_axi_gmem1_WUSER, "(port)m_axi_gmem1_WUSER");
    sc_trace(mVcdFile, m_axi_gmem1_ARVALID, "(port)m_axi_gmem1_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem1_ARREADY, "(port)m_axi_gmem1_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem1_ARADDR, "(port)m_axi_gmem1_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem1_ARID, "(port)m_axi_gmem1_ARID");
    sc_trace(mVcdFile, m_axi_gmem1_ARLEN, "(port)m_axi_gmem1_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem1_ARSIZE, "(port)m_axi_gmem1_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem1_ARBURST, "(port)m_axi_gmem1_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem1_ARLOCK, "(port)m_axi_gmem1_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem1_ARCACHE, "(port)m_axi_gmem1_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem1_ARPROT, "(port)m_axi_gmem1_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem1_ARQOS, "(port)m_axi_gmem1_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem1_ARREGION, "(port)m_axi_gmem1_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem1_ARUSER, "(port)m_axi_gmem1_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem1_RVALID, "(port)m_axi_gmem1_RVALID");
    sc_trace(mVcdFile, m_axi_gmem1_RREADY, "(port)m_axi_gmem1_RREADY");
    sc_trace(mVcdFile, m_axi_gmem1_RDATA, "(port)m_axi_gmem1_RDATA");
    sc_trace(mVcdFile, m_axi_gmem1_RLAST, "(port)m_axi_gmem1_RLAST");
    sc_trace(mVcdFile, m_axi_gmem1_RID, "(port)m_axi_gmem1_RID");
    sc_trace(mVcdFile, m_axi_gmem1_RUSER, "(port)m_axi_gmem1_RUSER");
    sc_trace(mVcdFile, m_axi_gmem1_RRESP, "(port)m_axi_gmem1_RRESP");
    sc_trace(mVcdFile, m_axi_gmem1_BVALID, "(port)m_axi_gmem1_BVALID");
    sc_trace(mVcdFile, m_axi_gmem1_BREADY, "(port)m_axi_gmem1_BREADY");
    sc_trace(mVcdFile, m_axi_gmem1_BRESP, "(port)m_axi_gmem1_BRESP");
    sc_trace(mVcdFile, m_axi_gmem1_BID, "(port)m_axi_gmem1_BID");
    sc_trace(mVcdFile, m_axi_gmem1_BUSER, "(port)m_axi_gmem1_BUSER");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, inter_pix, "inter_pix");
    sc_trace(mVcdFile, out_pix, "out_pix");
    sc_trace(mVcdFile, tmp_fu_126_p2, "tmp_fu_126_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_1_fu_132_p2, "i_1_fu_132_p2");
    sc_trace(mVcdFile, i_1_reg_178, "i_1_reg_178");
    sc_trace(mVcdFile, j_1_fu_144_p2, "j_1_fu_144_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_3_fu_150_p2, "tmp_3_fu_150_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, i_2_fu_156_p2, "i_2_fu_156_p2");
    sc_trace(mVcdFile, i_2_reg_195, "i_2_reg_195");
    sc_trace(mVcdFile, j_2_fu_168_p2, "j_2_fu_168_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_reg_82, "i_reg_82");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, j_reg_93, "j_reg_93");
    sc_trace(mVcdFile, tmp_4_fu_138_p2, "tmp_4_fu_138_p2");
    sc_trace(mVcdFile, i1_reg_104, "i1_reg_104");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, j2_reg_115, "j2_reg_115");
    sc_trace(mVcdFile, tmp_s_fu_162_p2, "tmp_s_fu_162_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sobel_filter.hdltvin.dat");
    mHdltvoutHandle.open("sobel_filter.hdltvout.dat");
}

sobel_filter::~sobel_filter() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sobel_filter_AXILiteS_s_axi_U;
}

void sobel_filter::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void sobel_filter::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_126_p2.read(), ap_const_lv1_1))) {
        i1_reg_104 = ap_const_lv11_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i1_reg_104 = i_2_reg_195.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_reg_82 = i_1_reg_178.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_82 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(tmp_s_fu_162_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        j2_reg_115 = j_2_fu_168_p2.read();
    } else if ((esl_seteq<1,1,1>(tmp_3_fu_150_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        j2_reg_115 = ap_const_lv11_0;
    }
    if ((esl_seteq<1,1,1>(tmp_4_fu_138_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        j_reg_93 = j_1_fu_144_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_fu_126_p2.read(), ap_const_lv1_0))) {
        j_reg_93 = ap_const_lv11_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_178 = i_1_fu_132_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_2_reg_195 = i_2_fu_156_p2.read();
    }
}

void sobel_filter::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sobel_filter::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sobel_filter::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sobel_filter::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sobel_filter::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sobel_filter::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sobel_filter::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void sobel_filter::thread_ap_done() {
    if ((esl_seteq<1,1,1>(tmp_3_fu_150_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sobel_filter::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sobel_filter::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(tmp_3_fu_150_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sobel_filter::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void sobel_filter::thread_i_1_fu_132_p2() {
    i_1_fu_132_p2 = (!i_reg_82.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_reg_82.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void sobel_filter::thread_i_2_fu_156_p2() {
    i_2_fu_156_p2 = (!i1_reg_104.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i1_reg_104.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void sobel_filter::thread_j_1_fu_144_p2() {
    j_1_fu_144_p2 = (!j_reg_93.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(j_reg_93.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void sobel_filter::thread_j_2_fu_168_p2() {
    j_2_fu_168_p2 = (!j2_reg_115.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(j2_reg_115.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void sobel_filter::thread_m_axi_gmem0_ARADDR() {
    m_axi_gmem0_ARADDR = ap_const_lv32_0;
}

void sobel_filter::thread_m_axi_gmem0_ARBURST() {
    m_axi_gmem0_ARBURST = ap_const_lv2_0;
}

void sobel_filter::thread_m_axi_gmem0_ARCACHE() {
    m_axi_gmem0_ARCACHE = ap_const_lv4_0;
}

void sobel_filter::thread_m_axi_gmem0_ARID() {
    m_axi_gmem0_ARID = ap_const_lv1_0;
}

void sobel_filter::thread_m_axi_gmem0_ARLEN() {
    m_axi_gmem0_ARLEN = ap_const_lv8_0;
}

void sobel_filter::thread_m_axi_gmem0_ARLOCK() {
    m_axi_gmem0_ARLOCK = ap_const_lv2_0;
}

void sobel_filter::thread_m_axi_gmem0_ARPROT() {
    m_axi_gmem0_ARPROT = ap_const_lv3_0;
}

void sobel_filter::thread_m_axi_gmem0_ARQOS() {
    m_axi_gmem0_ARQOS = ap_const_lv4_0;
}

void sobel_filter::thread_m_axi_gmem0_ARREGION() {
    m_axi_gmem0_ARREGION = ap_const_lv4_0;
}

void sobel_filter::thread_m_axi_gmem0_ARSIZE() {
    m_axi_gmem0_ARSIZE = ap_const_lv3_0;
}

void sobel_filter::thread_m_axi_gmem0_ARUSER() {
    m_axi_gmem0_ARUSER = ap_const_lv1_0;
}

void sobel_filter::thread_m_axi_gmem0_ARVALID() {
    m_axi_gmem0_ARVALID = ap_const_logic_0;
}

void sobel_filter::thread_m_axi_gmem0_AWADDR() {
    m_axi_gmem0_AWADDR = ap_const_lv32_0;
}

void sobel_filter::thread_m_axi_gmem0_AWBURST() {
    m_axi_gmem0_AWBURST = ap_const_lv2_0;
}

void sobel_filter::thread_m_axi_gmem0_AWCACHE() {
    m_axi_gmem0_AWCACHE = ap_const_lv4_0;
}

void sobel_filter::thread_m_axi_gmem0_AWID() {
    m_axi_gmem0_AWID = ap_const_lv1_0;
}

void sobel_filter::thread_m_axi_gmem0_AWLEN() {
    m_axi_gmem0_AWLEN = ap_const_lv8_0;
}

void sobel_filter::thread_m_axi_gmem0_AWLOCK() {
    m_axi_gmem0_AWLOCK = ap_const_lv2_0;
}

void sobel_filter::thread_m_axi_gmem0_AWPROT() {
    m_axi_gmem0_AWPROT = ap_const_lv3_0;
}

void sobel_filter::thread_m_axi_gmem0_AWQOS() {
    m_axi_gmem0_AWQOS = ap_const_lv4_0;
}

void sobel_filter::thread_m_axi_gmem0_AWREGION() {
    m_axi_gmem0_AWREGION = ap_const_lv4_0;
}

void sobel_filter::thread_m_axi_gmem0_AWSIZE() {
    m_axi_gmem0_AWSIZE = ap_const_lv3_0;
}

void sobel_filter::thread_m_axi_gmem0_AWUSER() {
    m_axi_gmem0_AWUSER = ap_const_lv1_0;
}

void sobel_filter::thread_m_axi_gmem0_AWVALID() {
    m_axi_gmem0_AWVALID = ap_const_logic_0;
}

void sobel_filter::thread_m_axi_gmem0_BREADY() {
    m_axi_gmem0_BREADY = ap_const_logic_0;
}

void sobel_filter::thread_m_axi_gmem0_RREADY() {
    m_axi_gmem0_RREADY = ap_const_logic_0;
}

void sobel_filter::thread_m_axi_gmem0_WDATA() {
    m_axi_gmem0_WDATA = ap_const_lv32_0;
}

void sobel_filter::thread_m_axi_gmem0_WID() {
    m_axi_gmem0_WID = ap_const_lv1_0;
}

void sobel_filter::thread_m_axi_gmem0_WLAST() {
    m_axi_gmem0_WLAST = ap_const_logic_0;
}

void sobel_filter::thread_m_axi_gmem0_WSTRB() {
    m_axi_gmem0_WSTRB = ap_const_lv4_0;
}

void sobel_filter::thread_m_axi_gmem0_WUSER() {
    m_axi_gmem0_WUSER = ap_const_lv1_0;
}

void sobel_filter::thread_m_axi_gmem0_WVALID() {
    m_axi_gmem0_WVALID = ap_const_logic_0;
}

void sobel_filter::thread_m_axi_gmem1_ARADDR() {
    m_axi_gmem1_ARADDR = ap_const_lv32_0;
}

void sobel_filter::thread_m_axi_gmem1_ARBURST() {
    m_axi_gmem1_ARBURST = ap_const_lv2_0;
}

void sobel_filter::thread_m_axi_gmem1_ARCACHE() {
    m_axi_gmem1_ARCACHE = ap_const_lv4_0;
}

void sobel_filter::thread_m_axi_gmem1_ARID() {
    m_axi_gmem1_ARID = ap_const_lv1_0;
}

void sobel_filter::thread_m_axi_gmem1_ARLEN() {
    m_axi_gmem1_ARLEN = ap_const_lv8_0;
}

void sobel_filter::thread_m_axi_gmem1_ARLOCK() {
    m_axi_gmem1_ARLOCK = ap_const_lv2_0;
}

void sobel_filter::thread_m_axi_gmem1_ARPROT() {
    m_axi_gmem1_ARPROT = ap_const_lv3_0;
}

void sobel_filter::thread_m_axi_gmem1_ARQOS() {
    m_axi_gmem1_ARQOS = ap_const_lv4_0;
}

void sobel_filter::thread_m_axi_gmem1_ARREGION() {
    m_axi_gmem1_ARREGION = ap_const_lv4_0;
}

void sobel_filter::thread_m_axi_gmem1_ARSIZE() {
    m_axi_gmem1_ARSIZE = ap_const_lv3_0;
}

void sobel_filter::thread_m_axi_gmem1_ARUSER() {
    m_axi_gmem1_ARUSER = ap_const_lv1_0;
}

void sobel_filter::thread_m_axi_gmem1_ARVALID() {
    m_axi_gmem1_ARVALID = ap_const_logic_0;
}

void sobel_filter::thread_m_axi_gmem1_AWADDR() {
    m_axi_gmem1_AWADDR = ap_const_lv32_0;
}

void sobel_filter::thread_m_axi_gmem1_AWBURST() {
    m_axi_gmem1_AWBURST = ap_const_lv2_0;
}

void sobel_filter::thread_m_axi_gmem1_AWCACHE() {
    m_axi_gmem1_AWCACHE = ap_const_lv4_0;
}

void sobel_filter::thread_m_axi_gmem1_AWID() {
    m_axi_gmem1_AWID = ap_const_lv1_0;
}

void sobel_filter::thread_m_axi_gmem1_AWLEN() {
    m_axi_gmem1_AWLEN = ap_const_lv8_0;
}

void sobel_filter::thread_m_axi_gmem1_AWLOCK() {
    m_axi_gmem1_AWLOCK = ap_const_lv2_0;
}

void sobel_filter::thread_m_axi_gmem1_AWPROT() {
    m_axi_gmem1_AWPROT = ap_const_lv3_0;
}

void sobel_filter::thread_m_axi_gmem1_AWQOS() {
    m_axi_gmem1_AWQOS = ap_const_lv4_0;
}

void sobel_filter::thread_m_axi_gmem1_AWREGION() {
    m_axi_gmem1_AWREGION = ap_const_lv4_0;
}

void sobel_filter::thread_m_axi_gmem1_AWSIZE() {
    m_axi_gmem1_AWSIZE = ap_const_lv3_0;
}

void sobel_filter::thread_m_axi_gmem1_AWUSER() {
    m_axi_gmem1_AWUSER = ap_const_lv1_0;
}

void sobel_filter::thread_m_axi_gmem1_AWVALID() {
    m_axi_gmem1_AWVALID = ap_const_logic_0;
}

void sobel_filter::thread_m_axi_gmem1_BREADY() {
    m_axi_gmem1_BREADY = ap_const_logic_0;
}

void sobel_filter::thread_m_axi_gmem1_RREADY() {
    m_axi_gmem1_RREADY = ap_const_logic_0;
}

void sobel_filter::thread_m_axi_gmem1_WDATA() {
    m_axi_gmem1_WDATA = ap_const_lv32_0;
}

void sobel_filter::thread_m_axi_gmem1_WID() {
    m_axi_gmem1_WID = ap_const_lv1_0;
}

void sobel_filter::thread_m_axi_gmem1_WLAST() {
    m_axi_gmem1_WLAST = ap_const_logic_0;
}

void sobel_filter::thread_m_axi_gmem1_WSTRB() {
    m_axi_gmem1_WSTRB = ap_const_lv4_0;
}

void sobel_filter::thread_m_axi_gmem1_WUSER() {
    m_axi_gmem1_WUSER = ap_const_lv1_0;
}

void sobel_filter::thread_m_axi_gmem1_WVALID() {
    m_axi_gmem1_WVALID = ap_const_logic_0;
}

void sobel_filter::thread_tmp_3_fu_150_p2() {
    tmp_3_fu_150_p2 = (!i1_reg_104.read().is_01() || !ap_const_lv11_438.is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_104.read() == ap_const_lv11_438);
}

void sobel_filter::thread_tmp_4_fu_138_p2() {
    tmp_4_fu_138_p2 = (!j_reg_93.read().is_01() || !ap_const_lv11_780.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_93.read() == ap_const_lv11_780);
}

void sobel_filter::thread_tmp_fu_126_p2() {
    tmp_fu_126_p2 = (!i_reg_82.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_82.read() == ap_const_lv2_2);
}

void sobel_filter::thread_tmp_s_fu_162_p2() {
    tmp_s_fu_162_p2 = (!j2_reg_115.read().is_01() || !ap_const_lv11_780.is_01())? sc_lv<1>(): sc_lv<1>(j2_reg_115.read() == ap_const_lv11_780);
}

void sobel_filter::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_126_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(tmp_4_fu_138_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(tmp_3_fu_150_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(tmp_s_fu_162_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

void sobel_filter::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_gmem0_AWVALID\" :  \"" << m_axi_gmem0_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_AWREADY\" :  \"" << m_axi_gmem0_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWADDR\" :  \"" << m_axi_gmem0_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWID\" :  \"" << m_axi_gmem0_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWLEN\" :  \"" << m_axi_gmem0_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWSIZE\" :  \"" << m_axi_gmem0_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWBURST\" :  \"" << m_axi_gmem0_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWLOCK\" :  \"" << m_axi_gmem0_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWCACHE\" :  \"" << m_axi_gmem0_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWPROT\" :  \"" << m_axi_gmem0_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWQOS\" :  \"" << m_axi_gmem0_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWREGION\" :  \"" << m_axi_gmem0_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWUSER\" :  \"" << m_axi_gmem0_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_WVALID\" :  \"" << m_axi_gmem0_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_WREADY\" :  \"" << m_axi_gmem0_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_WDATA\" :  \"" << m_axi_gmem0_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_WSTRB\" :  \"" << m_axi_gmem0_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_WLAST\" :  \"" << m_axi_gmem0_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_WID\" :  \"" << m_axi_gmem0_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_WUSER\" :  \"" << m_axi_gmem0_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARVALID\" :  \"" << m_axi_gmem0_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_ARREADY\" :  \"" << m_axi_gmem0_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARADDR\" :  \"" << m_axi_gmem0_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARID\" :  \"" << m_axi_gmem0_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARLEN\" :  \"" << m_axi_gmem0_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARSIZE\" :  \"" << m_axi_gmem0_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARBURST\" :  \"" << m_axi_gmem0_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARLOCK\" :  \"" << m_axi_gmem0_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARCACHE\" :  \"" << m_axi_gmem0_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARPROT\" :  \"" << m_axi_gmem0_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARQOS\" :  \"" << m_axi_gmem0_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARREGION\" :  \"" << m_axi_gmem0_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARUSER\" :  \"" << m_axi_gmem0_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_RVALID\" :  \"" << m_axi_gmem0_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_RREADY\" :  \"" << m_axi_gmem0_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_RDATA\" :  \"" << m_axi_gmem0_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_RLAST\" :  \"" << m_axi_gmem0_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_RID\" :  \"" << m_axi_gmem0_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_RUSER\" :  \"" << m_axi_gmem0_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_RRESP\" :  \"" << m_axi_gmem0_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_BVALID\" :  \"" << m_axi_gmem0_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_BREADY\" :  \"" << m_axi_gmem0_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_BRESP\" :  \"" << m_axi_gmem0_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_BID\" :  \"" << m_axi_gmem0_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_BUSER\" :  \"" << m_axi_gmem0_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWVALID\" :  \"" << m_axi_gmem1_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_AWREADY\" :  \"" << m_axi_gmem1_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWADDR\" :  \"" << m_axi_gmem1_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWID\" :  \"" << m_axi_gmem1_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWLEN\" :  \"" << m_axi_gmem1_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWSIZE\" :  \"" << m_axi_gmem1_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWBURST\" :  \"" << m_axi_gmem1_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWLOCK\" :  \"" << m_axi_gmem1_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWCACHE\" :  \"" << m_axi_gmem1_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWPROT\" :  \"" << m_axi_gmem1_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWQOS\" :  \"" << m_axi_gmem1_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWREGION\" :  \"" << m_axi_gmem1_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWUSER\" :  \"" << m_axi_gmem1_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_WVALID\" :  \"" << m_axi_gmem1_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_WREADY\" :  \"" << m_axi_gmem1_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_WDATA\" :  \"" << m_axi_gmem1_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_WSTRB\" :  \"" << m_axi_gmem1_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_WLAST\" :  \"" << m_axi_gmem1_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_WID\" :  \"" << m_axi_gmem1_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_WUSER\" :  \"" << m_axi_gmem1_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARVALID\" :  \"" << m_axi_gmem1_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_ARREADY\" :  \"" << m_axi_gmem1_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARADDR\" :  \"" << m_axi_gmem1_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARID\" :  \"" << m_axi_gmem1_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARLEN\" :  \"" << m_axi_gmem1_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARSIZE\" :  \"" << m_axi_gmem1_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARBURST\" :  \"" << m_axi_gmem1_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARLOCK\" :  \"" << m_axi_gmem1_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARCACHE\" :  \"" << m_axi_gmem1_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARPROT\" :  \"" << m_axi_gmem1_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARQOS\" :  \"" << m_axi_gmem1_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARREGION\" :  \"" << m_axi_gmem1_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARUSER\" :  \"" << m_axi_gmem1_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_RVALID\" :  \"" << m_axi_gmem1_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_RREADY\" :  \"" << m_axi_gmem1_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_RDATA\" :  \"" << m_axi_gmem1_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_RLAST\" :  \"" << m_axi_gmem1_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_RID\" :  \"" << m_axi_gmem1_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_RUSER\" :  \"" << m_axi_gmem1_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_RRESP\" :  \"" << m_axi_gmem1_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_BVALID\" :  \"" << m_axi_gmem1_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_BREADY\" :  \"" << m_axi_gmem1_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_BRESP\" :  \"" << m_axi_gmem1_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_BID\" :  \"" << m_axi_gmem1_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_BUSER\" :  \"" << m_axi_gmem1_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

