// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sobel_filter_HH_
#define _sobel_filter_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sobel_filter_urembkb.h"
#include "sobel_filter_AXILiteS_s_axi.h"
#include "sobel_filter_gmem1_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_GMEM0_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_GMEM0_ID_WIDTH = 1,
         unsigned int C_M_AXI_GMEM0_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM0_DATA_WIDTH = 32,
         unsigned int C_M_AXI_GMEM0_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM0_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM0_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM0_BUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM1_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_GMEM1_ID_WIDTH = 1,
         unsigned int C_M_AXI_GMEM1_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM1_DATA_WIDTH = 32,
         unsigned int C_M_AXI_GMEM1_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM1_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM1_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM1_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct sobel_filter : public sc_module {
    // Port declarations 110
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_gmem0_AWVALID;
    sc_in< sc_logic > m_axi_gmem0_AWREADY;
    sc_out< sc_uint<C_M_AXI_GMEM0_ADDR_WIDTH> > m_axi_gmem0_AWADDR;
    sc_out< sc_uint<C_M_AXI_GMEM0_ID_WIDTH> > m_axi_gmem0_AWID;
    sc_out< sc_lv<8> > m_axi_gmem0_AWLEN;
    sc_out< sc_lv<3> > m_axi_gmem0_AWSIZE;
    sc_out< sc_lv<2> > m_axi_gmem0_AWBURST;
    sc_out< sc_lv<2> > m_axi_gmem0_AWLOCK;
    sc_out< sc_lv<4> > m_axi_gmem0_AWCACHE;
    sc_out< sc_lv<3> > m_axi_gmem0_AWPROT;
    sc_out< sc_lv<4> > m_axi_gmem0_AWQOS;
    sc_out< sc_lv<4> > m_axi_gmem0_AWREGION;
    sc_out< sc_uint<C_M_AXI_GMEM0_AWUSER_WIDTH> > m_axi_gmem0_AWUSER;
    sc_out< sc_logic > m_axi_gmem0_WVALID;
    sc_in< sc_logic > m_axi_gmem0_WREADY;
    sc_out< sc_uint<C_M_AXI_GMEM0_DATA_WIDTH> > m_axi_gmem0_WDATA;
    sc_out< sc_uint<C_M_AXI_GMEM0_DATA_WIDTH/8> > m_axi_gmem0_WSTRB;
    sc_out< sc_logic > m_axi_gmem0_WLAST;
    sc_out< sc_uint<C_M_AXI_GMEM0_ID_WIDTH> > m_axi_gmem0_WID;
    sc_out< sc_uint<C_M_AXI_GMEM0_WUSER_WIDTH> > m_axi_gmem0_WUSER;
    sc_out< sc_logic > m_axi_gmem0_ARVALID;
    sc_in< sc_logic > m_axi_gmem0_ARREADY;
    sc_out< sc_uint<C_M_AXI_GMEM0_ADDR_WIDTH> > m_axi_gmem0_ARADDR;
    sc_out< sc_uint<C_M_AXI_GMEM0_ID_WIDTH> > m_axi_gmem0_ARID;
    sc_out< sc_lv<8> > m_axi_gmem0_ARLEN;
    sc_out< sc_lv<3> > m_axi_gmem0_ARSIZE;
    sc_out< sc_lv<2> > m_axi_gmem0_ARBURST;
    sc_out< sc_lv<2> > m_axi_gmem0_ARLOCK;
    sc_out< sc_lv<4> > m_axi_gmem0_ARCACHE;
    sc_out< sc_lv<3> > m_axi_gmem0_ARPROT;
    sc_out< sc_lv<4> > m_axi_gmem0_ARQOS;
    sc_out< sc_lv<4> > m_axi_gmem0_ARREGION;
    sc_out< sc_uint<C_M_AXI_GMEM0_ARUSER_WIDTH> > m_axi_gmem0_ARUSER;
    sc_in< sc_logic > m_axi_gmem0_RVALID;
    sc_out< sc_logic > m_axi_gmem0_RREADY;
    sc_in< sc_uint<C_M_AXI_GMEM0_DATA_WIDTH> > m_axi_gmem0_RDATA;
    sc_in< sc_logic > m_axi_gmem0_RLAST;
    sc_in< sc_uint<C_M_AXI_GMEM0_ID_WIDTH> > m_axi_gmem0_RID;
    sc_in< sc_uint<C_M_AXI_GMEM0_RUSER_WIDTH> > m_axi_gmem0_RUSER;
    sc_in< sc_lv<2> > m_axi_gmem0_RRESP;
    sc_in< sc_logic > m_axi_gmem0_BVALID;
    sc_out< sc_logic > m_axi_gmem0_BREADY;
    sc_in< sc_lv<2> > m_axi_gmem0_BRESP;
    sc_in< sc_uint<C_M_AXI_GMEM0_ID_WIDTH> > m_axi_gmem0_BID;
    sc_in< sc_uint<C_M_AXI_GMEM0_BUSER_WIDTH> > m_axi_gmem0_BUSER;
    sc_out< sc_logic > m_axi_gmem1_AWVALID;
    sc_in< sc_logic > m_axi_gmem1_AWREADY;
    sc_out< sc_uint<C_M_AXI_GMEM1_ADDR_WIDTH> > m_axi_gmem1_AWADDR;
    sc_out< sc_uint<C_M_AXI_GMEM1_ID_WIDTH> > m_axi_gmem1_AWID;
    sc_out< sc_lv<8> > m_axi_gmem1_AWLEN;
    sc_out< sc_lv<3> > m_axi_gmem1_AWSIZE;
    sc_out< sc_lv<2> > m_axi_gmem1_AWBURST;
    sc_out< sc_lv<2> > m_axi_gmem1_AWLOCK;
    sc_out< sc_lv<4> > m_axi_gmem1_AWCACHE;
    sc_out< sc_lv<3> > m_axi_gmem1_AWPROT;
    sc_out< sc_lv<4> > m_axi_gmem1_AWQOS;
    sc_out< sc_lv<4> > m_axi_gmem1_AWREGION;
    sc_out< sc_uint<C_M_AXI_GMEM1_AWUSER_WIDTH> > m_axi_gmem1_AWUSER;
    sc_out< sc_logic > m_axi_gmem1_WVALID;
    sc_in< sc_logic > m_axi_gmem1_WREADY;
    sc_out< sc_uint<C_M_AXI_GMEM1_DATA_WIDTH> > m_axi_gmem1_WDATA;
    sc_out< sc_uint<C_M_AXI_GMEM1_DATA_WIDTH/8> > m_axi_gmem1_WSTRB;
    sc_out< sc_logic > m_axi_gmem1_WLAST;
    sc_out< sc_uint<C_M_AXI_GMEM1_ID_WIDTH> > m_axi_gmem1_WID;
    sc_out< sc_uint<C_M_AXI_GMEM1_WUSER_WIDTH> > m_axi_gmem1_WUSER;
    sc_out< sc_logic > m_axi_gmem1_ARVALID;
    sc_in< sc_logic > m_axi_gmem1_ARREADY;
    sc_out< sc_uint<C_M_AXI_GMEM1_ADDR_WIDTH> > m_axi_gmem1_ARADDR;
    sc_out< sc_uint<C_M_AXI_GMEM1_ID_WIDTH> > m_axi_gmem1_ARID;
    sc_out< sc_lv<8> > m_axi_gmem1_ARLEN;
    sc_out< sc_lv<3> > m_axi_gmem1_ARSIZE;
    sc_out< sc_lv<2> > m_axi_gmem1_ARBURST;
    sc_out< sc_lv<2> > m_axi_gmem1_ARLOCK;
    sc_out< sc_lv<4> > m_axi_gmem1_ARCACHE;
    sc_out< sc_lv<3> > m_axi_gmem1_ARPROT;
    sc_out< sc_lv<4> > m_axi_gmem1_ARQOS;
    sc_out< sc_lv<4> > m_axi_gmem1_ARREGION;
    sc_out< sc_uint<C_M_AXI_GMEM1_ARUSER_WIDTH> > m_axi_gmem1_ARUSER;
    sc_in< sc_logic > m_axi_gmem1_RVALID;
    sc_out< sc_logic > m_axi_gmem1_RREADY;
    sc_in< sc_uint<C_M_AXI_GMEM1_DATA_WIDTH> > m_axi_gmem1_RDATA;
    sc_in< sc_logic > m_axi_gmem1_RLAST;
    sc_in< sc_uint<C_M_AXI_GMEM1_ID_WIDTH> > m_axi_gmem1_RID;
    sc_in< sc_uint<C_M_AXI_GMEM1_RUSER_WIDTH> > m_axi_gmem1_RUSER;
    sc_in< sc_lv<2> > m_axi_gmem1_RRESP;
    sc_in< sc_logic > m_axi_gmem1_BVALID;
    sc_out< sc_logic > m_axi_gmem1_BREADY;
    sc_in< sc_lv<2> > m_axi_gmem1_BRESP;
    sc_in< sc_uint<C_M_AXI_GMEM1_ID_WIDTH> > m_axi_gmem1_BID;
    sc_in< sc_uint<C_M_AXI_GMEM1_BUSER_WIDTH> > m_axi_gmem1_BUSER;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const3;
    sc_signal< sc_lv<2> > ap_var_for_const5;
    sc_signal< sc_lv<32> > ap_var_for_const7;
    sc_signal< sc_lv<3> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const6;
    sc_signal< sc_lv<4> > ap_var_for_const8;


    // Module declarations
    sobel_filter(sc_module_name name);
    SC_HAS_PROCESS(sobel_filter);

    ~sobel_filter();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sobel_filter_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* sobel_filter_AXILiteS_s_axi_U;
    sobel_filter_gmem1_m_axi<32,32,5,16,16,16,16,C_M_AXI_GMEM1_ID_WIDTH,C_M_AXI_GMEM1_ADDR_WIDTH,C_M_AXI_GMEM1_DATA_WIDTH,C_M_AXI_GMEM1_AWUSER_WIDTH,C_M_AXI_GMEM1_ARUSER_WIDTH,C_M_AXI_GMEM1_WUSER_WIDTH,C_M_AXI_GMEM1_RUSER_WIDTH,C_M_AXI_GMEM1_BUSER_WIDTH,C_M_AXI_GMEM1_USER_VALUE,C_M_AXI_GMEM1_PROT_VALUE,C_M_AXI_GMEM1_CACHE_VALUE>* sobel_filter_gmem1_m_axi_U;
    sobel_filter_urembkb<1,17,13,12,13>* sobel_filter_urembkb_U1;
    sobel_filter_urembkb<1,17,13,12,13>* sobel_filter_urembkb_U2;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<12> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > inter_pix;
    sc_signal< sc_lv<32> > out_pix;
    sc_signal< sc_logic > gmem1_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > gmem1_blk_n_W;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > gmem1_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter17;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > tmp_11_reg_539;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter18;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_508;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter17_exitcond_flatten_reg_508;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter23;
    sc_signal< sc_lv<1> > tmp_13_reg_543;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter22_tmp_13_reg_543;
    sc_signal< sc_logic > gmem1_AWVALID;
    sc_signal< sc_logic > gmem1_AWREADY;
    sc_signal< sc_lv<32> > gmem1_AWADDR;
    sc_signal< sc_logic > gmem1_WVALID;
    sc_signal< sc_logic > gmem1_WREADY;
    sc_signal< sc_logic > gmem1_ARREADY;
    sc_signal< sc_logic > gmem1_RVALID;
    sc_signal< sc_lv<32> > gmem1_RDATA;
    sc_signal< sc_logic > gmem1_RLAST;
    sc_signal< sc_lv<1> > gmem1_RID;
    sc_signal< sc_lv<1> > gmem1_RUSER;
    sc_signal< sc_lv<2> > gmem1_RRESP;
    sc_signal< sc_logic > gmem1_BVALID;
    sc_signal< sc_logic > gmem1_BREADY;
    sc_signal< sc_lv<2> > gmem1_BRESP;
    sc_signal< sc_lv<1> > gmem1_BID;
    sc_signal< sc_lv<1> > gmem1_BUSER;
    sc_signal< sc_lv<13> > indvar_flatten_reg_182;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< bool > ap_block_state11_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state12_pp1_stage0_iter1;
    sc_signal< bool > ap_block_state13_pp1_stage0_iter2;
    sc_signal< bool > ap_block_state14_pp1_stage0_iter3;
    sc_signal< bool > ap_block_state15_pp1_stage0_iter4;
    sc_signal< bool > ap_block_state16_pp1_stage0_iter5;
    sc_signal< bool > ap_block_state17_pp1_stage0_iter6;
    sc_signal< bool > ap_block_state18_pp1_stage0_iter7;
    sc_signal< bool > ap_block_state19_pp1_stage0_iter8;
    sc_signal< bool > ap_block_state20_pp1_stage0_iter9;
    sc_signal< bool > ap_block_state21_pp1_stage0_iter10;
    sc_signal< bool > ap_block_state22_pp1_stage0_iter11;
    sc_signal< bool > ap_block_state23_pp1_stage0_iter12;
    sc_signal< bool > ap_block_state24_pp1_stage0_iter13;
    sc_signal< bool > ap_block_state25_pp1_stage0_iter14;
    sc_signal< bool > ap_block_state26_pp1_stage0_iter15;
    sc_signal< bool > ap_block_state27_pp1_stage0_iter16;
    sc_signal< bool > ap_block_state28_pp1_stage0_iter17;
    sc_signal< sc_logic > ap_sig_ioackin_gmem1_AWREADY;
    sc_signal< bool > ap_block_state28_io;
    sc_signal< bool > ap_block_state29_pp1_stage0_iter18;
    sc_signal< sc_logic > ap_sig_ioackin_gmem1_WREADY;
    sc_signal< bool > ap_block_state29_io;
    sc_signal< bool > ap_block_state30_pp1_stage0_iter19;
    sc_signal< bool > ap_block_state31_pp1_stage0_iter20;
    sc_signal< bool > ap_block_state32_pp1_stage0_iter21;
    sc_signal< bool > ap_block_state33_pp1_stage0_iter22;
    sc_signal< bool > ap_block_state34_pp1_stage0_iter23;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<2> > i2_reg_194;
    sc_signal< sc_lv<11> > j3_reg_205;
    sc_signal< sc_lv<33> > tmp_3_cast_fu_226_p1;
    sc_signal< sc_lv<33> > tmp_3_cast_reg_479;
    sc_signal< sc_lv<1> > tmp_1_fu_230_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<11> > i_1_fu_236_p2;
    sc_signal< sc_lv<11> > i_1_reg_489;
    sc_signal< sc_lv<32> > gmem1_addr_reg_494;
    sc_signal< sc_lv<11> > j_1_fu_307_p2;
    sc_signal< sc_lv<11> > j_1_reg_503;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_343_p2;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter1_exitcond_flatten_reg_508;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter2_exitcond_flatten_reg_508;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter3_exitcond_flatten_reg_508;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter4_exitcond_flatten_reg_508;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter5_exitcond_flatten_reg_508;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter6_exitcond_flatten_reg_508;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter7_exitcond_flatten_reg_508;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter8_exitcond_flatten_reg_508;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter9_exitcond_flatten_reg_508;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter10_exitcond_flatten_reg_508;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter11_exitcond_flatten_reg_508;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter12_exitcond_flatten_reg_508;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter13_exitcond_flatten_reg_508;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter14_exitcond_flatten_reg_508;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter15_exitcond_flatten_reg_508;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter16_exitcond_flatten_reg_508;
    sc_signal< sc_lv<13> > indvar_flatten_next_fu_349_p2;
    sc_signal< sc_lv<13> > indvar_flatten_next_reg_512;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<14> > tmp_25_mid2_v_v_fu_405_p2;
    sc_signal< sc_lv<14> > tmp_25_mid2_v_v_reg_518;
    sc_signal< sc_lv<14> > ap_reg_pp1_iter1_tmp_25_mid2_v_v_reg_518;
    sc_signal< sc_lv<14> > ap_reg_pp1_iter2_tmp_25_mid2_v_v_reg_518;
    sc_signal< sc_lv<14> > ap_reg_pp1_iter3_tmp_25_mid2_v_v_reg_518;
    sc_signal< sc_lv<14> > ap_reg_pp1_iter4_tmp_25_mid2_v_v_reg_518;
    sc_signal< sc_lv<14> > ap_reg_pp1_iter5_tmp_25_mid2_v_v_reg_518;
    sc_signal< sc_lv<14> > ap_reg_pp1_iter6_tmp_25_mid2_v_v_reg_518;
    sc_signal< sc_lv<14> > ap_reg_pp1_iter7_tmp_25_mid2_v_v_reg_518;
    sc_signal< sc_lv<14> > ap_reg_pp1_iter8_tmp_25_mid2_v_v_reg_518;
    sc_signal< sc_lv<14> > ap_reg_pp1_iter9_tmp_25_mid2_v_v_reg_518;
    sc_signal< sc_lv<14> > ap_reg_pp1_iter10_tmp_25_mid2_v_v_reg_518;
    sc_signal< sc_lv<14> > ap_reg_pp1_iter11_tmp_25_mid2_v_v_reg_518;
    sc_signal< sc_lv<14> > ap_reg_pp1_iter12_tmp_25_mid2_v_v_reg_518;
    sc_signal< sc_lv<14> > ap_reg_pp1_iter13_tmp_25_mid2_v_v_reg_518;
    sc_signal< sc_lv<14> > ap_reg_pp1_iter14_tmp_25_mid2_v_v_reg_518;
    sc_signal< sc_lv<14> > ap_reg_pp1_iter15_tmp_25_mid2_v_v_reg_518;
    sc_signal< sc_lv<2> > i2_mid2_fu_411_p3;
    sc_signal< sc_lv<11> > j_2_fu_431_p3;
    sc_signal< sc_lv<32> > gmem1_addr_1_reg_533;
    sc_signal< sc_lv<1> > tmp_11_fu_467_p2;
    sc_signal< sc_lv<1> > tmp_13_fu_473_p2;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter17_tmp_13_reg_543;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter18_tmp_13_reg_543;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter19_tmp_13_reg_543;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter20_tmp_13_reg_543;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter21_tmp_13_reg_543;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state11;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter7;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter8;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter9;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter10;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter11;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter12;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter13;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter14;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter15;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter16;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter19;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter20;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter21;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter22;
    sc_signal< sc_lv<11> > i_reg_160;
    sc_signal< sc_lv<11> > j_reg_171;
    sc_signal< sc_lv<13> > ap_phi_mux_indvar_flatten_phi_fu_186_p4;
    sc_signal< sc_lv<64> > out_pix4_sum_cast_fu_291_p1;
    sc_signal< sc_lv<64> > out_pix4_sum7_cast_fu_457_p1;
    sc_signal< sc_logic > ap_reg_ioackin_gmem1_AWREADY;
    sc_signal< sc_logic > ap_reg_ioackin_gmem1_WREADY;
    sc_signal< bool > ap_block_pp1_stage0_01001;
    sc_signal< sc_lv<30> > tmp_fu_216_p4;
    sc_signal< sc_lv<22> > p_shl1_fu_242_p3;
    sc_signal< sc_lv<18> > p_shl2_fu_254_p3;
    sc_signal< sc_lv<23> > p_shl1_cast_fu_250_p1;
    sc_signal< sc_lv<23> > p_shl2_cast_fu_262_p1;
    sc_signal< sc_lv<23> > tmp_2_fu_266_p2;
    sc_signal< sc_lv<23> > tmp_4_fu_272_p2;
    sc_signal< sc_lv<32> > tmp_6_fu_278_p1;
    sc_signal< sc_lv<33> > tmp_8_cast_fu_282_p1;
    sc_signal< sc_lv<33> > out_pix4_sum_fu_286_p2;
    sc_signal< sc_lv<13> > p_shl_fu_313_p3;
    sc_signal< sc_lv<9> > p_shl3_fu_325_p3;
    sc_signal< sc_lv<14> > p_shl_cast_fu_321_p1;
    sc_signal< sc_lv<14> > p_shl3_cast_fu_333_p1;
    sc_signal< sc_lv<2> > i_s_fu_361_p2;
    sc_signal< sc_lv<13> > p_shl_mid1_fu_367_p3;
    sc_signal< sc_lv<9> > p_shl3_mid1_fu_379_p3;
    sc_signal< sc_lv<14> > p_shl_cast_mid1_fu_375_p1;
    sc_signal< sc_lv<14> > p_shl3_cast_mid1_fu_387_p1;
    sc_signal< sc_lv<1> > tmp_3_fu_355_p2;
    sc_signal< sc_lv<14> > tmp_7_mid1_fu_391_p2;
    sc_signal< sc_lv<14> > tmp_7_fu_337_p2;
    sc_signal< sc_lv<14> > tmp_7_mid2_fu_397_p3;
    sc_signal< sc_lv<12> > grp_fu_419_p1;
    sc_signal< sc_lv<11> > j3_op_fu_425_p2;
    sc_signal< sc_lv<13> > grp_fu_439_p0;
    sc_signal< sc_lv<12> > grp_fu_439_p1;
    sc_signal< sc_lv<32> > tmp_25_mid2_v_fu_445_p1;
    sc_signal< sc_lv<33> > tmp_25_mid2_cast_fu_448_p1;
    sc_signal< sc_lv<33> > out_pix4_sum7_fu_452_p2;
    sc_signal< sc_lv<13> > grp_fu_419_p2;
    sc_signal< sc_lv<13> > grp_fu_439_p2;
    sc_signal< sc_lv<1> > tmp_5_fu_301_p2;
    sc_signal< sc_logic > grp_fu_419_ce;
    sc_signal< sc_logic > grp_fu_439_ce;
    sc_signal< sc_logic > ap_CS_fsm_state35;
    sc_signal< sc_lv<12> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< bool > ap_condition_582;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<12> ap_ST_fsm_state1;
    static const sc_lv<12> ap_ST_fsm_state2;
    static const sc_lv<12> ap_ST_fsm_state3;
    static const sc_lv<12> ap_ST_fsm_state4;
    static const sc_lv<12> ap_ST_fsm_state5;
    static const sc_lv<12> ap_ST_fsm_state6;
    static const sc_lv<12> ap_ST_fsm_state7;
    static const sc_lv<12> ap_ST_fsm_state8;
    static const sc_lv<12> ap_ST_fsm_state9;
    static const sc_lv<12> ap_ST_fsm_state10;
    static const sc_lv<12> ap_ST_fsm_pp1_stage0;
    static const sc_lv<12> ap_ST_fsm_state35;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_9;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_GMEM0_USER_VALUE;
    static const int C_M_AXI_GMEM0_PROT_VALUE;
    static const int C_M_AXI_GMEM0_CACHE_VALUE;
    static const int C_M_AXI_GMEM1_USER_VALUE;
    static const int C_M_AXI_GMEM1_PROT_VALUE;
    static const int C_M_AXI_GMEM1_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_780;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<11> ap_const_lv11_438;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<23> ap_const_lv23_7FF100;
    static const sc_lv<11> ap_const_lv11_780;
    static const sc_lv<13> ap_const_lv13_1680;
    static const sc_lv<13> ap_const_lv13_1;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<14> ap_const_lv14_3100;
    static const sc_lv<13> ap_const_lv13_780;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<8> ap_const_lv8_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const8();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state35();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_01001();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state11_pp1_stage0_iter0();
    void thread_ap_block_state12_pp1_stage0_iter1();
    void thread_ap_block_state13_pp1_stage0_iter2();
    void thread_ap_block_state14_pp1_stage0_iter3();
    void thread_ap_block_state15_pp1_stage0_iter4();
    void thread_ap_block_state16_pp1_stage0_iter5();
    void thread_ap_block_state17_pp1_stage0_iter6();
    void thread_ap_block_state18_pp1_stage0_iter7();
    void thread_ap_block_state19_pp1_stage0_iter8();
    void thread_ap_block_state20_pp1_stage0_iter9();
    void thread_ap_block_state21_pp1_stage0_iter10();
    void thread_ap_block_state22_pp1_stage0_iter11();
    void thread_ap_block_state23_pp1_stage0_iter12();
    void thread_ap_block_state24_pp1_stage0_iter13();
    void thread_ap_block_state25_pp1_stage0_iter14();
    void thread_ap_block_state26_pp1_stage0_iter15();
    void thread_ap_block_state27_pp1_stage0_iter16();
    void thread_ap_block_state28_io();
    void thread_ap_block_state28_pp1_stage0_iter17();
    void thread_ap_block_state29_io();
    void thread_ap_block_state29_pp1_stage0_iter18();
    void thread_ap_block_state30_pp1_stage0_iter19();
    void thread_ap_block_state31_pp1_stage0_iter20();
    void thread_ap_block_state32_pp1_stage0_iter21();
    void thread_ap_block_state33_pp1_stage0_iter22();
    void thread_ap_block_state34_pp1_stage0_iter23();
    void thread_ap_condition_582();
    void thread_ap_condition_pp1_exit_iter0_state11();
    void thread_ap_done();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_indvar_flatten_phi_fu_186_p4();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_gmem1_AWREADY();
    void thread_ap_sig_ioackin_gmem1_WREADY();
    void thread_exitcond_flatten_fu_343_p2();
    void thread_gmem1_AWADDR();
    void thread_gmem1_AWVALID();
    void thread_gmem1_BREADY();
    void thread_gmem1_WVALID();
    void thread_gmem1_blk_n_AW();
    void thread_gmem1_blk_n_B();
    void thread_gmem1_blk_n_W();
    void thread_grp_fu_419_ce();
    void thread_grp_fu_419_p1();
    void thread_grp_fu_439_ce();
    void thread_grp_fu_439_p0();
    void thread_grp_fu_439_p1();
    void thread_i2_mid2_fu_411_p3();
    void thread_i_1_fu_236_p2();
    void thread_i_s_fu_361_p2();
    void thread_indvar_flatten_next_fu_349_p2();
    void thread_j3_op_fu_425_p2();
    void thread_j_1_fu_307_p2();
    void thread_j_2_fu_431_p3();
    void thread_m_axi_gmem0_ARADDR();
    void thread_m_axi_gmem0_ARBURST();
    void thread_m_axi_gmem0_ARCACHE();
    void thread_m_axi_gmem0_ARID();
    void thread_m_axi_gmem0_ARLEN();
    void thread_m_axi_gmem0_ARLOCK();
    void thread_m_axi_gmem0_ARPROT();
    void thread_m_axi_gmem0_ARQOS();
    void thread_m_axi_gmem0_ARREGION();
    void thread_m_axi_gmem0_ARSIZE();
    void thread_m_axi_gmem0_ARUSER();
    void thread_m_axi_gmem0_ARVALID();
    void thread_m_axi_gmem0_AWADDR();
    void thread_m_axi_gmem0_AWBURST();
    void thread_m_axi_gmem0_AWCACHE();
    void thread_m_axi_gmem0_AWID();
    void thread_m_axi_gmem0_AWLEN();
    void thread_m_axi_gmem0_AWLOCK();
    void thread_m_axi_gmem0_AWPROT();
    void thread_m_axi_gmem0_AWQOS();
    void thread_m_axi_gmem0_AWREGION();
    void thread_m_axi_gmem0_AWSIZE();
    void thread_m_axi_gmem0_AWUSER();
    void thread_m_axi_gmem0_AWVALID();
    void thread_m_axi_gmem0_BREADY();
    void thread_m_axi_gmem0_RREADY();
    void thread_m_axi_gmem0_WDATA();
    void thread_m_axi_gmem0_WID();
    void thread_m_axi_gmem0_WLAST();
    void thread_m_axi_gmem0_WSTRB();
    void thread_m_axi_gmem0_WUSER();
    void thread_m_axi_gmem0_WVALID();
    void thread_out_pix4_sum7_cast_fu_457_p1();
    void thread_out_pix4_sum7_fu_452_p2();
    void thread_out_pix4_sum_cast_fu_291_p1();
    void thread_out_pix4_sum_fu_286_p2();
    void thread_p_shl1_cast_fu_250_p1();
    void thread_p_shl1_fu_242_p3();
    void thread_p_shl2_cast_fu_262_p1();
    void thread_p_shl2_fu_254_p3();
    void thread_p_shl3_cast_fu_333_p1();
    void thread_p_shl3_cast_mid1_fu_387_p1();
    void thread_p_shl3_fu_325_p3();
    void thread_p_shl3_mid1_fu_379_p3();
    void thread_p_shl_cast_fu_321_p1();
    void thread_p_shl_cast_mid1_fu_375_p1();
    void thread_p_shl_fu_313_p3();
    void thread_p_shl_mid1_fu_367_p3();
    void thread_tmp_11_fu_467_p2();
    void thread_tmp_13_fu_473_p2();
    void thread_tmp_1_fu_230_p2();
    void thread_tmp_25_mid2_cast_fu_448_p1();
    void thread_tmp_25_mid2_v_fu_445_p1();
    void thread_tmp_25_mid2_v_v_fu_405_p2();
    void thread_tmp_2_fu_266_p2();
    void thread_tmp_3_cast_fu_226_p1();
    void thread_tmp_3_fu_355_p2();
    void thread_tmp_4_fu_272_p2();
    void thread_tmp_5_fu_301_p2();
    void thread_tmp_6_fu_278_p1();
    void thread_tmp_7_fu_337_p2();
    void thread_tmp_7_mid1_fu_391_p2();
    void thread_tmp_7_mid2_fu_397_p3();
    void thread_tmp_8_cast_fu_282_p1();
    void thread_tmp_fu_216_p4();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
