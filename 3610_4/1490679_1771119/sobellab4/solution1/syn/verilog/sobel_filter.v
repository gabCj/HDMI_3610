// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel_filter,hls_ip_2017_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=4161625,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1963,HLS_SYN_LUT=2160}" *)

module sobel_filter (
        ap_clk,
        ap_rst_n,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_pp1_stage0 = 12'd1024;
parameter    ap_ST_fsm_state35 = 12'd2048;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM0_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM0_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_USER_VALUE = 0;
parameter    C_M_AXI_GMEM0_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM0_CACHE_VALUE = 3;
parameter    C_M_AXI_GMEM1_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM1_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM1_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_USER_VALUE = 0;
parameter    C_M_AXI_GMEM1_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM1_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM0_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM1_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_AWADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_AWID;
output  [7:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [C_M_AXI_GMEM0_AWUSER_WIDTH - 1:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_WDATA;
output  [C_M_AXI_GMEM0_WSTRB_WIDTH - 1:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_WID;
output  [C_M_AXI_GMEM0_WUSER_WIDTH - 1:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_ARADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_ARID;
output  [7:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [C_M_AXI_GMEM0_ARUSER_WIDTH - 1:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_RID;
input  [C_M_AXI_GMEM0_RUSER_WIDTH - 1:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_BID;
input  [C_M_AXI_GMEM0_BUSER_WIDTH - 1:0] m_axi_gmem0_BUSER;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [C_M_AXI_GMEM1_ADDR_WIDTH - 1:0] m_axi_gmem1_AWADDR;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_AWID;
output  [7:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [C_M_AXI_GMEM1_AWUSER_WIDTH - 1:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [C_M_AXI_GMEM1_DATA_WIDTH - 1:0] m_axi_gmem1_WDATA;
output  [C_M_AXI_GMEM1_WSTRB_WIDTH - 1:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_WID;
output  [C_M_AXI_GMEM1_WUSER_WIDTH - 1:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [C_M_AXI_GMEM1_ADDR_WIDTH - 1:0] m_axi_gmem1_ARADDR;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_ARID;
output  [7:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [C_M_AXI_GMEM1_ARUSER_WIDTH - 1:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [C_M_AXI_GMEM1_DATA_WIDTH - 1:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_RID;
input  [C_M_AXI_GMEM1_RUSER_WIDTH - 1:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_BID;
input  [C_M_AXI_GMEM1_BUSER_WIDTH - 1:0] m_axi_gmem1_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] inter_pix;
wire   [31:0] out_pix;
reg    gmem1_blk_n_AW;
wire    ap_CS_fsm_state3;
reg    gmem1_blk_n_W;
wire    ap_CS_fsm_state5;
reg    gmem1_blk_n_B;
wire    ap_CS_fsm_state10;
reg    ap_enable_reg_pp1_iter17;
wire    ap_block_pp1_stage0;
reg   [0:0] tmp_11_reg_539;
reg    ap_enable_reg_pp1_iter18;
reg   [0:0] exitcond_flatten_reg_508;
reg   [0:0] ap_reg_pp1_iter17_exitcond_flatten_reg_508;
reg    ap_enable_reg_pp1_iter23;
reg   [0:0] tmp_13_reg_543;
reg   [0:0] ap_reg_pp1_iter22_tmp_13_reg_543;
reg    gmem1_AWVALID;
wire    gmem1_AWREADY;
reg   [31:0] gmem1_AWADDR;
reg    gmem1_WVALID;
wire    gmem1_WREADY;
wire    gmem1_ARREADY;
wire    gmem1_RVALID;
wire   [31:0] gmem1_RDATA;
wire    gmem1_RLAST;
wire   [0:0] gmem1_RID;
wire   [0:0] gmem1_RUSER;
wire   [1:0] gmem1_RRESP;
wire    gmem1_BVALID;
reg    gmem1_BREADY;
wire   [1:0] gmem1_BRESP;
wire   [0:0] gmem1_BID;
wire   [0:0] gmem1_BUSER;
reg   [12:0] indvar_flatten_reg_182;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state11_pp1_stage0_iter0;
wire    ap_block_state12_pp1_stage0_iter1;
wire    ap_block_state13_pp1_stage0_iter2;
wire    ap_block_state14_pp1_stage0_iter3;
wire    ap_block_state15_pp1_stage0_iter4;
wire    ap_block_state16_pp1_stage0_iter5;
wire    ap_block_state17_pp1_stage0_iter6;
wire    ap_block_state18_pp1_stage0_iter7;
wire    ap_block_state19_pp1_stage0_iter8;
wire    ap_block_state20_pp1_stage0_iter9;
wire    ap_block_state21_pp1_stage0_iter10;
wire    ap_block_state22_pp1_stage0_iter11;
wire    ap_block_state23_pp1_stage0_iter12;
wire    ap_block_state24_pp1_stage0_iter13;
wire    ap_block_state25_pp1_stage0_iter14;
wire    ap_block_state26_pp1_stage0_iter15;
wire    ap_block_state27_pp1_stage0_iter16;
wire    ap_block_state28_pp1_stage0_iter17;
reg    ap_sig_ioackin_gmem1_AWREADY;
reg    ap_block_state28_io;
wire    ap_block_state29_pp1_stage0_iter18;
reg    ap_sig_ioackin_gmem1_WREADY;
reg    ap_block_state29_io;
wire    ap_block_state30_pp1_stage0_iter19;
wire    ap_block_state31_pp1_stage0_iter20;
wire    ap_block_state32_pp1_stage0_iter21;
wire    ap_block_state33_pp1_stage0_iter22;
reg    ap_block_state34_pp1_stage0_iter23;
reg    ap_block_pp1_stage0_11001;
reg   [1:0] i2_reg_194;
reg   [10:0] j3_reg_205;
wire   [32:0] tmp_3_cast_fu_226_p1;
reg   [32:0] tmp_3_cast_reg_479;
wire   [0:0] tmp_1_fu_230_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] i_1_fu_236_p2;
reg   [10:0] i_1_reg_489;
reg   [31:0] gmem1_addr_reg_494;
wire   [10:0] j_1_fu_307_p2;
reg   [10:0] j_1_reg_503;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_flatten_fu_343_p2;
reg   [0:0] ap_reg_pp1_iter1_exitcond_flatten_reg_508;
reg   [0:0] ap_reg_pp1_iter2_exitcond_flatten_reg_508;
reg   [0:0] ap_reg_pp1_iter3_exitcond_flatten_reg_508;
reg   [0:0] ap_reg_pp1_iter4_exitcond_flatten_reg_508;
reg   [0:0] ap_reg_pp1_iter5_exitcond_flatten_reg_508;
reg   [0:0] ap_reg_pp1_iter6_exitcond_flatten_reg_508;
reg   [0:0] ap_reg_pp1_iter7_exitcond_flatten_reg_508;
reg   [0:0] ap_reg_pp1_iter8_exitcond_flatten_reg_508;
reg   [0:0] ap_reg_pp1_iter9_exitcond_flatten_reg_508;
reg   [0:0] ap_reg_pp1_iter10_exitcond_flatten_reg_508;
reg   [0:0] ap_reg_pp1_iter11_exitcond_flatten_reg_508;
reg   [0:0] ap_reg_pp1_iter12_exitcond_flatten_reg_508;
reg   [0:0] ap_reg_pp1_iter13_exitcond_flatten_reg_508;
reg   [0:0] ap_reg_pp1_iter14_exitcond_flatten_reg_508;
reg   [0:0] ap_reg_pp1_iter15_exitcond_flatten_reg_508;
reg   [0:0] ap_reg_pp1_iter16_exitcond_flatten_reg_508;
wire   [12:0] indvar_flatten_next_fu_349_p2;
reg   [12:0] indvar_flatten_next_reg_512;
reg    ap_enable_reg_pp1_iter0;
wire   [13:0] tmp_25_mid2_v_v_fu_405_p2;
reg   [13:0] tmp_25_mid2_v_v_reg_518;
reg   [13:0] ap_reg_pp1_iter1_tmp_25_mid2_v_v_reg_518;
reg   [13:0] ap_reg_pp1_iter2_tmp_25_mid2_v_v_reg_518;
reg   [13:0] ap_reg_pp1_iter3_tmp_25_mid2_v_v_reg_518;
reg   [13:0] ap_reg_pp1_iter4_tmp_25_mid2_v_v_reg_518;
reg   [13:0] ap_reg_pp1_iter5_tmp_25_mid2_v_v_reg_518;
reg   [13:0] ap_reg_pp1_iter6_tmp_25_mid2_v_v_reg_518;
reg   [13:0] ap_reg_pp1_iter7_tmp_25_mid2_v_v_reg_518;
reg   [13:0] ap_reg_pp1_iter8_tmp_25_mid2_v_v_reg_518;
reg   [13:0] ap_reg_pp1_iter9_tmp_25_mid2_v_v_reg_518;
reg   [13:0] ap_reg_pp1_iter10_tmp_25_mid2_v_v_reg_518;
reg   [13:0] ap_reg_pp1_iter11_tmp_25_mid2_v_v_reg_518;
reg   [13:0] ap_reg_pp1_iter12_tmp_25_mid2_v_v_reg_518;
reg   [13:0] ap_reg_pp1_iter13_tmp_25_mid2_v_v_reg_518;
reg   [13:0] ap_reg_pp1_iter14_tmp_25_mid2_v_v_reg_518;
reg   [13:0] ap_reg_pp1_iter15_tmp_25_mid2_v_v_reg_518;
wire   [1:0] i2_mid2_fu_411_p3;
wire   [10:0] j_2_fu_431_p3;
reg   [31:0] gmem1_addr_1_reg_533;
wire   [0:0] tmp_11_fu_467_p2;
wire   [0:0] tmp_13_fu_473_p2;
reg   [0:0] ap_reg_pp1_iter17_tmp_13_reg_543;
reg   [0:0] ap_reg_pp1_iter18_tmp_13_reg_543;
reg   [0:0] ap_reg_pp1_iter19_tmp_13_reg_543;
reg   [0:0] ap_reg_pp1_iter20_tmp_13_reg_543;
reg   [0:0] ap_reg_pp1_iter21_tmp_13_reg_543;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state11;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter13;
reg    ap_enable_reg_pp1_iter14;
reg    ap_enable_reg_pp1_iter15;
reg    ap_enable_reg_pp1_iter16;
reg    ap_enable_reg_pp1_iter19;
reg    ap_enable_reg_pp1_iter20;
reg    ap_enable_reg_pp1_iter21;
reg    ap_enable_reg_pp1_iter22;
reg   [10:0] i_reg_160;
reg   [10:0] j_reg_171;
reg   [12:0] ap_phi_mux_indvar_flatten_phi_fu_186_p4;
wire   [63:0] out_pix4_sum_cast_fu_291_p1;
wire   [63:0] out_pix4_sum7_cast_fu_457_p1;
reg    ap_reg_ioackin_gmem1_AWREADY;
reg    ap_reg_ioackin_gmem1_WREADY;
reg    ap_block_pp1_stage0_01001;
wire   [29:0] tmp_fu_216_p4;
wire   [21:0] p_shl1_fu_242_p3;
wire   [17:0] p_shl2_fu_254_p3;
wire   [22:0] p_shl1_cast_fu_250_p1;
wire   [22:0] p_shl2_cast_fu_262_p1;
wire   [22:0] tmp_2_fu_266_p2;
wire   [22:0] tmp_4_fu_272_p2;
wire  signed [31:0] tmp_6_fu_278_p1;
wire   [32:0] tmp_8_cast_fu_282_p1;
wire   [32:0] out_pix4_sum_fu_286_p2;
wire   [12:0] p_shl_fu_313_p3;
wire   [8:0] p_shl3_fu_325_p3;
wire   [13:0] p_shl_cast_fu_321_p1;
wire   [13:0] p_shl3_cast_fu_333_p1;
wire   [1:0] i_s_fu_361_p2;
wire   [12:0] p_shl_mid1_fu_367_p3;
wire   [8:0] p_shl3_mid1_fu_379_p3;
wire   [13:0] p_shl_cast_mid1_fu_375_p1;
wire   [13:0] p_shl3_cast_mid1_fu_387_p1;
wire   [0:0] tmp_3_fu_355_p2;
wire   [13:0] tmp_7_mid1_fu_391_p2;
wire   [13:0] tmp_7_fu_337_p2;
wire   [13:0] tmp_7_mid2_fu_397_p3;
wire   [11:0] grp_fu_419_p1;
wire   [10:0] j3_op_fu_425_p2;
wire   [12:0] grp_fu_439_p0;
wire   [11:0] grp_fu_439_p1;
wire  signed [31:0] tmp_25_mid2_v_fu_445_p1;
wire   [32:0] tmp_25_mid2_cast_fu_448_p1;
wire   [32:0] out_pix4_sum7_fu_452_p2;
wire   [12:0] grp_fu_419_p2;
wire   [12:0] grp_fu_439_p2;
wire   [0:0] tmp_5_fu_301_p2;
reg    grp_fu_419_ce;
reg    grp_fu_439_ce;
wire    ap_CS_fsm_state35;
reg   [11:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_582;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp1_iter17 = 1'b0;
#0 ap_enable_reg_pp1_iter18 = 1'b0;
#0 ap_enable_reg_pp1_iter23 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp1_iter15 = 1'b0;
#0 ap_enable_reg_pp1_iter16 = 1'b0;
#0 ap_enable_reg_pp1_iter19 = 1'b0;
#0 ap_enable_reg_pp1_iter20 = 1'b0;
#0 ap_enable_reg_pp1_iter21 = 1'b0;
#0 ap_enable_reg_pp1_iter22 = 1'b0;
#0 ap_reg_ioackin_gmem1_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem1_WREADY = 1'b0;
end

sobel_filter_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
sobel_filter_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .inter_pix(inter_pix),
    .out_pix(out_pix)
);

sobel_filter_gmem1_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM1_CACHE_VALUE ))
sobel_filter_gmem1_m_axi_U(
    .AWVALID(m_axi_gmem1_AWVALID),
    .AWREADY(m_axi_gmem1_AWREADY),
    .AWADDR(m_axi_gmem1_AWADDR),
    .AWID(m_axi_gmem1_AWID),
    .AWLEN(m_axi_gmem1_AWLEN),
    .AWSIZE(m_axi_gmem1_AWSIZE),
    .AWBURST(m_axi_gmem1_AWBURST),
    .AWLOCK(m_axi_gmem1_AWLOCK),
    .AWCACHE(m_axi_gmem1_AWCACHE),
    .AWPROT(m_axi_gmem1_AWPROT),
    .AWQOS(m_axi_gmem1_AWQOS),
    .AWREGION(m_axi_gmem1_AWREGION),
    .AWUSER(m_axi_gmem1_AWUSER),
    .WVALID(m_axi_gmem1_WVALID),
    .WREADY(m_axi_gmem1_WREADY),
    .WDATA(m_axi_gmem1_WDATA),
    .WSTRB(m_axi_gmem1_WSTRB),
    .WLAST(m_axi_gmem1_WLAST),
    .WID(m_axi_gmem1_WID),
    .WUSER(m_axi_gmem1_WUSER),
    .ARVALID(m_axi_gmem1_ARVALID),
    .ARREADY(m_axi_gmem1_ARREADY),
    .ARADDR(m_axi_gmem1_ARADDR),
    .ARID(m_axi_gmem1_ARID),
    .ARLEN(m_axi_gmem1_ARLEN),
    .ARSIZE(m_axi_gmem1_ARSIZE),
    .ARBURST(m_axi_gmem1_ARBURST),
    .ARLOCK(m_axi_gmem1_ARLOCK),
    .ARCACHE(m_axi_gmem1_ARCACHE),
    .ARPROT(m_axi_gmem1_ARPROT),
    .ARQOS(m_axi_gmem1_ARQOS),
    .ARREGION(m_axi_gmem1_ARREGION),
    .ARUSER(m_axi_gmem1_ARUSER),
    .RVALID(m_axi_gmem1_RVALID),
    .RREADY(m_axi_gmem1_RREADY),
    .RDATA(m_axi_gmem1_RDATA),
    .RLAST(m_axi_gmem1_RLAST),
    .RID(m_axi_gmem1_RID),
    .RUSER(m_axi_gmem1_RUSER),
    .RRESP(m_axi_gmem1_RRESP),
    .BVALID(m_axi_gmem1_BVALID),
    .BREADY(m_axi_gmem1_BREADY),
    .BRESP(m_axi_gmem1_BRESP),
    .BID(m_axi_gmem1_BID),
    .BUSER(m_axi_gmem1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(gmem1_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem1_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(gmem1_RDATA),
    .I_RID(gmem1_RID),
    .I_RUSER(gmem1_RUSER),
    .I_RRESP(gmem1_RRESP),
    .I_RLAST(gmem1_RLAST),
    .I_AWVALID(gmem1_AWVALID),
    .I_AWREADY(gmem1_AWREADY),
    .I_AWADDR(gmem1_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1920),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem1_WVALID),
    .I_WREADY(gmem1_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem1_BVALID),
    .I_BREADY(gmem1_BREADY),
    .I_BRESP(gmem1_BRESP),
    .I_BID(gmem1_BID),
    .I_BUSER(gmem1_BUSER)
);

sobel_filter_urembkb #(
    .ID( 1 ),
    .NUM_STAGE( 17 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 13 ))
sobel_filter_urembkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ap_phi_mux_indvar_flatten_phi_fu_186_p4),
    .din1(grp_fu_419_p1),
    .ce(grp_fu_419_ce),
    .dout(grp_fu_419_p2)
);

sobel_filter_urembkb #(
    .ID( 1 ),
    .NUM_STAGE( 17 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 13 ))
sobel_filter_urembkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_439_p0),
    .din1(grp_fu_439_p1),
    .ce(grp_fu_439_ce),
    .dout(grp_fu_439_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((ap_block_pp1_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_1_fu_230_p2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state11)) begin
                ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state11 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter15 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter16 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter17 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter18 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter19 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter20 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter21 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter22 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter23 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_1_fu_230_p2))) begin
            ap_enable_reg_pp1_iter23 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem1_AWREADY <= 1'b0;
    end else begin
        if ((((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter17) & (tmp_11_reg_539 == 1'd1)) | ((ap_sig_ioackin_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_gmem1_AWREADY <= 1'b0;
        end else if ((((ap_block_pp1_stage0_01001 == 1'b0) & (1'b1 == gmem1_AWREADY) & (1'b1 == ap_enable_reg_pp1_iter17) & (tmp_11_reg_539 == 1'd1)) | ((1'b1 == gmem1_AWREADY) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_gmem1_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem1_WREADY <= 1'b0;
    end else begin
        if ((((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter18) & (ap_reg_pp1_iter17_exitcond_flatten_reg_508 == 1'd0)) | ((ap_sig_ioackin_gmem1_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
            ap_reg_ioackin_gmem1_WREADY <= 1'b0;
        end else if ((((ap_block_pp1_stage0_01001 == 1'b0) & (1'b1 == gmem1_WREADY) & (1'b1 == ap_enable_reg_pp1_iter18) & (ap_reg_pp1_iter17_exitcond_flatten_reg_508 == 1'd0)) | ((1'b1 == gmem1_WREADY) & (1'b1 == ap_CS_fsm_state5)))) begin
            ap_reg_ioackin_gmem1_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_1_fu_230_p2))) begin
        i2_reg_194 <= 2'd0;
    end else if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'd0 == exitcond_flatten_fu_343_p2))) begin
        i2_reg_194 <= i2_mid2_fu_411_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem1_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_reg_160 <= i_1_reg_489;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_160 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_1_fu_230_p2))) begin
        indvar_flatten_reg_182 <= 13'd0;
    end else if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_508 == 1'd0))) begin
        indvar_flatten_reg_182 <= indvar_flatten_next_reg_512;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_1_fu_230_p2))) begin
        j3_reg_205 <= 11'd0;
    end else if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'd0 == exitcond_flatten_fu_343_p2))) begin
        j3_reg_205 <= j_2_fu_431_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_gmem1_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_171 <= j_1_reg_503;
    end else if (((ap_sig_ioackin_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_171 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp1_stage0_11001 == 1'b0)) begin
        ap_reg_pp1_iter10_exitcond_flatten_reg_508 <= ap_reg_pp1_iter9_exitcond_flatten_reg_508;
        ap_reg_pp1_iter10_tmp_25_mid2_v_v_reg_518[13 : 7] <= ap_reg_pp1_iter9_tmp_25_mid2_v_v_reg_518[13 : 7];
        ap_reg_pp1_iter11_exitcond_flatten_reg_508 <= ap_reg_pp1_iter10_exitcond_flatten_reg_508;
        ap_reg_pp1_iter11_tmp_25_mid2_v_v_reg_518[13 : 7] <= ap_reg_pp1_iter10_tmp_25_mid2_v_v_reg_518[13 : 7];
        ap_reg_pp1_iter12_exitcond_flatten_reg_508 <= ap_reg_pp1_iter11_exitcond_flatten_reg_508;
        ap_reg_pp1_iter12_tmp_25_mid2_v_v_reg_518[13 : 7] <= ap_reg_pp1_iter11_tmp_25_mid2_v_v_reg_518[13 : 7];
        ap_reg_pp1_iter13_exitcond_flatten_reg_508 <= ap_reg_pp1_iter12_exitcond_flatten_reg_508;
        ap_reg_pp1_iter13_tmp_25_mid2_v_v_reg_518[13 : 7] <= ap_reg_pp1_iter12_tmp_25_mid2_v_v_reg_518[13 : 7];
        ap_reg_pp1_iter14_exitcond_flatten_reg_508 <= ap_reg_pp1_iter13_exitcond_flatten_reg_508;
        ap_reg_pp1_iter14_tmp_25_mid2_v_v_reg_518[13 : 7] <= ap_reg_pp1_iter13_tmp_25_mid2_v_v_reg_518[13 : 7];
        ap_reg_pp1_iter15_exitcond_flatten_reg_508 <= ap_reg_pp1_iter14_exitcond_flatten_reg_508;
        ap_reg_pp1_iter15_tmp_25_mid2_v_v_reg_518[13 : 7] <= ap_reg_pp1_iter14_tmp_25_mid2_v_v_reg_518[13 : 7];
        ap_reg_pp1_iter16_exitcond_flatten_reg_508 <= ap_reg_pp1_iter15_exitcond_flatten_reg_508;
        ap_reg_pp1_iter17_exitcond_flatten_reg_508 <= ap_reg_pp1_iter16_exitcond_flatten_reg_508;
        ap_reg_pp1_iter17_tmp_13_reg_543 <= tmp_13_reg_543;
        ap_reg_pp1_iter18_tmp_13_reg_543 <= ap_reg_pp1_iter17_tmp_13_reg_543;
        ap_reg_pp1_iter19_tmp_13_reg_543 <= ap_reg_pp1_iter18_tmp_13_reg_543;
        ap_reg_pp1_iter20_tmp_13_reg_543 <= ap_reg_pp1_iter19_tmp_13_reg_543;
        ap_reg_pp1_iter21_tmp_13_reg_543 <= ap_reg_pp1_iter20_tmp_13_reg_543;
        ap_reg_pp1_iter22_tmp_13_reg_543 <= ap_reg_pp1_iter21_tmp_13_reg_543;
        ap_reg_pp1_iter2_exitcond_flatten_reg_508 <= ap_reg_pp1_iter1_exitcond_flatten_reg_508;
        ap_reg_pp1_iter2_tmp_25_mid2_v_v_reg_518[13 : 7] <= ap_reg_pp1_iter1_tmp_25_mid2_v_v_reg_518[13 : 7];
        ap_reg_pp1_iter3_exitcond_flatten_reg_508 <= ap_reg_pp1_iter2_exitcond_flatten_reg_508;
        ap_reg_pp1_iter3_tmp_25_mid2_v_v_reg_518[13 : 7] <= ap_reg_pp1_iter2_tmp_25_mid2_v_v_reg_518[13 : 7];
        ap_reg_pp1_iter4_exitcond_flatten_reg_508 <= ap_reg_pp1_iter3_exitcond_flatten_reg_508;
        ap_reg_pp1_iter4_tmp_25_mid2_v_v_reg_518[13 : 7] <= ap_reg_pp1_iter3_tmp_25_mid2_v_v_reg_518[13 : 7];
        ap_reg_pp1_iter5_exitcond_flatten_reg_508 <= ap_reg_pp1_iter4_exitcond_flatten_reg_508;
        ap_reg_pp1_iter5_tmp_25_mid2_v_v_reg_518[13 : 7] <= ap_reg_pp1_iter4_tmp_25_mid2_v_v_reg_518[13 : 7];
        ap_reg_pp1_iter6_exitcond_flatten_reg_508 <= ap_reg_pp1_iter5_exitcond_flatten_reg_508;
        ap_reg_pp1_iter6_tmp_25_mid2_v_v_reg_518[13 : 7] <= ap_reg_pp1_iter5_tmp_25_mid2_v_v_reg_518[13 : 7];
        ap_reg_pp1_iter7_exitcond_flatten_reg_508 <= ap_reg_pp1_iter6_exitcond_flatten_reg_508;
        ap_reg_pp1_iter7_tmp_25_mid2_v_v_reg_518[13 : 7] <= ap_reg_pp1_iter6_tmp_25_mid2_v_v_reg_518[13 : 7];
        ap_reg_pp1_iter8_exitcond_flatten_reg_508 <= ap_reg_pp1_iter7_exitcond_flatten_reg_508;
        ap_reg_pp1_iter8_tmp_25_mid2_v_v_reg_518[13 : 7] <= ap_reg_pp1_iter7_tmp_25_mid2_v_v_reg_518[13 : 7];
        ap_reg_pp1_iter9_exitcond_flatten_reg_508 <= ap_reg_pp1_iter8_exitcond_flatten_reg_508;
        ap_reg_pp1_iter9_tmp_25_mid2_v_v_reg_518[13 : 7] <= ap_reg_pp1_iter8_tmp_25_mid2_v_v_reg_518[13 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_reg_pp1_iter1_exitcond_flatten_reg_508 <= exitcond_flatten_reg_508;
        ap_reg_pp1_iter1_tmp_25_mid2_v_v_reg_518[13 : 7] <= tmp_25_mid2_v_v_reg_518[13 : 7];
        exitcond_flatten_reg_508 <= exitcond_flatten_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'd0 == ap_reg_pp1_iter15_exitcond_flatten_reg_508))) begin
        gmem1_addr_1_reg_533 <= out_pix4_sum7_cast_fu_457_p1;
        tmp_11_reg_539 <= tmp_11_fu_467_p2;
        tmp_13_reg_543 <= tmp_13_fu_473_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_1_fu_230_p2))) begin
        gmem1_addr_reg_494 <= out_pix4_sum_cast_fu_291_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_489 <= i_1_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten_next_reg_512 <= indvar_flatten_next_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_1_reg_503 <= j_1_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'd0 == exitcond_flatten_fu_343_p2))) begin
        tmp_25_mid2_v_v_reg_518[13 : 7] <= tmp_25_mid2_v_v_fu_405_p2[13 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_3_cast_reg_479[29 : 0] <= tmp_3_cast_fu_226_p1[29 : 0];
    end
end

always @ (*) begin
    if ((1'd1 == exitcond_flatten_fu_343_p2)) begin
        ap_condition_pp1_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp1_iter22) & (1'b0 == ap_enable_reg_pp1_iter21) & (1'b0 == ap_enable_reg_pp1_iter20) & (1'b0 == ap_enable_reg_pp1_iter19) & (1'b0 == ap_enable_reg_pp1_iter16) & (1'b0 == ap_enable_reg_pp1_iter15) & (1'b0 == ap_enable_reg_pp1_iter14) & (1'b0 == ap_enable_reg_pp1_iter13) & (1'b0 == ap_enable_reg_pp1_iter12) & (1'b0 == ap_enable_reg_pp1_iter11) & (1'b0 == ap_enable_reg_pp1_iter10) & (1'b0 == ap_enable_reg_pp1_iter9) & (1'b0 == ap_enable_reg_pp1_iter8) & (1'b0 == ap_enable_reg_pp1_iter7) & (1'b0 == ap_enable_reg_pp1_iter6) & (1'b0 == ap_enable_reg_pp1_iter5) & (1'b0 == ap_enable_reg_pp1_iter4) & (1'b0 == ap_enable_reg_pp1_iter3) & (1'b0 == ap_enable_reg_pp1_iter2) & (1'b0 == ap_enable_reg_pp1_iter1) & (1'b0 == ap_enable_reg_pp1_iter0) & (1'b0 == ap_enable_reg_pp1_iter23) & (1'b0 == ap_enable_reg_pp1_iter18) & (1'b0 == ap_enable_reg_pp1_iter17))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_508 == 1'd0) & (ap_block_pp1_stage0 == 1'b0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_186_p4 = indvar_flatten_next_reg_512;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_186_p4 = indvar_flatten_reg_182;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem1_AWREADY)) begin
        ap_sig_ioackin_gmem1_AWREADY = gmem1_AWREADY;
    end else begin
        ap_sig_ioackin_gmem1_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem1_WREADY)) begin
        ap_sig_ioackin_gmem1_WREADY = gmem1_WREADY;
    end else begin
        ap_sig_ioackin_gmem1_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem1_AWREADY)) begin
        if ((ap_condition_582 == 1'b1)) begin
            gmem1_AWADDR = gmem1_addr_1_reg_533;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            gmem1_AWADDR = gmem1_addr_reg_494;
        end else begin
            gmem1_AWADDR = 'bx;
        end
    end else begin
        gmem1_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_block_pp1_stage0_01001 == 1'b0) & (1'b0 == ap_reg_ioackin_gmem1_AWREADY) & (1'b1 == ap_enable_reg_pp1_iter17) & (tmp_11_reg_539 == 1'd1)) | ((1'b0 == ap_reg_ioackin_gmem1_AWREADY) & (1'b1 == ap_CS_fsm_state3)))) begin
        gmem1_AWVALID = 1'b1;
    end else begin
        gmem1_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter23) & (1'd1 == ap_reg_pp1_iter22_tmp_13_reg_543)) | ((gmem1_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        gmem1_BREADY = 1'b1;
    end else begin
        gmem1_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp1_stage0_01001 == 1'b0) & (1'b0 == ap_reg_ioackin_gmem1_WREADY) & (1'b1 == ap_enable_reg_pp1_iter18) & (ap_reg_pp1_iter17_exitcond_flatten_reg_508 == 1'd0)) | ((1'b0 == ap_reg_ioackin_gmem1_WREADY) & (1'b1 == ap_CS_fsm_state5)))) begin
        gmem1_WVALID = 1'b1;
    end else begin
        gmem1_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_enable_reg_pp1_iter17) & (tmp_11_reg_539 == 1'd1) & (ap_block_pp1_stage0 == 1'b0)))) begin
        gmem1_blk_n_AW = m_axi_gmem1_AWREADY;
    end else begin
        gmem1_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_enable_reg_pp1_iter23) & (1'd1 == ap_reg_pp1_iter22_tmp_13_reg_543) & (ap_block_pp1_stage0 == 1'b0)))) begin
        gmem1_blk_n_B = m_axi_gmem1_BVALID;
    end else begin
        gmem1_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_enable_reg_pp1_iter18) & (ap_reg_pp1_iter17_exitcond_flatten_reg_508 == 1'd0) & (ap_block_pp1_stage0 == 1'b0)))) begin
        gmem1_blk_n_W = m_axi_gmem1_WREADY;
    end else begin
        gmem1_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_419_ce = 1'b1;
    end else begin
        grp_fu_419_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_439_ce = 1'b1;
    end else begin
        grp_fu_439_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_1_fu_230_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ap_sig_ioackin_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == tmp_5_fu_301_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((ap_sig_ioackin_gmem1_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((gmem1_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_block_pp1_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'd1 == exitcond_flatten_fu_343_p2)) & ~((ap_enable_reg_pp1_iter22 == 1'b0) & (ap_block_pp1_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter23)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_block_pp1_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'd1 == exitcond_flatten_fu_343_p2)) | ((ap_enable_reg_pp1_iter22 == 1'b0) & (ap_block_pp1_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter23)))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((1'b0 == gmem1_BVALID) & (1'b1 == ap_enable_reg_pp1_iter23) & (1'd1 == ap_reg_pp1_iter22_tmp_13_reg_543));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b0 == gmem1_BVALID) & (1'b1 == ap_enable_reg_pp1_iter23) & (1'd1 == ap_reg_pp1_iter22_tmp_13_reg_543)) | ((1'b1 == ap_block_state29_io) & (1'b1 == ap_enable_reg_pp1_iter18)) | ((1'b1 == ap_block_state28_io) & (1'b1 == ap_enable_reg_pp1_iter17)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b0 == gmem1_BVALID) & (1'b1 == ap_enable_reg_pp1_iter23) & (1'd1 == ap_reg_pp1_iter22_tmp_13_reg_543)) | ((1'b1 == ap_block_state29_io) & (1'b1 == ap_enable_reg_pp1_iter18)) | ((1'b1 == ap_block_state28_io) & (1'b1 == ap_enable_reg_pp1_iter17)));
end

assign ap_block_state11_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_io = ((1'b0 == ap_sig_ioackin_gmem1_AWREADY) & (tmp_11_reg_539 == 1'd1));
end

assign ap_block_state28_pp1_stage0_iter17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state29_io = ((1'b0 == ap_sig_ioackin_gmem1_WREADY) & (ap_reg_pp1_iter17_exitcond_flatten_reg_508 == 1'd0));
end

assign ap_block_state29_pp1_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage0_iter22 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state34_pp1_stage0_iter23 = ((1'b0 == gmem1_BVALID) & (1'd1 == ap_reg_pp1_iter22_tmp_13_reg_543));
end

always @ (*) begin
    ap_condition_582 = ((ap_block_pp1_stage0_01001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter17) & (tmp_11_reg_539 == 1'd1));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_flatten_fu_343_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_186_p4 == 13'd5760) ? 1'b1 : 1'b0);

assign grp_fu_419_p1 = 13'd1920;

assign grp_fu_439_p0 = (ap_phi_mux_indvar_flatten_phi_fu_186_p4 + 13'd1);

assign grp_fu_439_p1 = 13'd1920;

assign i2_mid2_fu_411_p3 = ((tmp_3_fu_355_p2[0:0] === 1'b1) ? i_s_fu_361_p2 : i2_reg_194);

assign i_1_fu_236_p2 = (i_reg_160 + 11'd1);

assign i_s_fu_361_p2 = (i2_reg_194 + 2'd1);

assign indvar_flatten_next_fu_349_p2 = (ap_phi_mux_indvar_flatten_phi_fu_186_p4 + 13'd1);

assign j3_op_fu_425_p2 = (j3_reg_205 + 11'd1);

assign j_1_fu_307_p2 = (j_reg_171 + 11'd1);

assign j_2_fu_431_p3 = ((tmp_3_fu_355_p2[0:0] === 1'b1) ? 11'd1 : j3_op_fu_425_p2);

assign m_axi_gmem0_ARADDR = 32'd0;

assign m_axi_gmem0_ARBURST = 2'd0;

assign m_axi_gmem0_ARCACHE = 4'd0;

assign m_axi_gmem0_ARID = 1'd0;

assign m_axi_gmem0_ARLEN = 8'd0;

assign m_axi_gmem0_ARLOCK = 2'd0;

assign m_axi_gmem0_ARPROT = 3'd0;

assign m_axi_gmem0_ARQOS = 4'd0;

assign m_axi_gmem0_ARREGION = 4'd0;

assign m_axi_gmem0_ARSIZE = 3'd0;

assign m_axi_gmem0_ARUSER = 1'd0;

assign m_axi_gmem0_ARVALID = 1'b0;

assign m_axi_gmem0_AWADDR = 32'd0;

assign m_axi_gmem0_AWBURST = 2'd0;

assign m_axi_gmem0_AWCACHE = 4'd0;

assign m_axi_gmem0_AWID = 1'd0;

assign m_axi_gmem0_AWLEN = 8'd0;

assign m_axi_gmem0_AWLOCK = 2'd0;

assign m_axi_gmem0_AWPROT = 3'd0;

assign m_axi_gmem0_AWQOS = 4'd0;

assign m_axi_gmem0_AWREGION = 4'd0;

assign m_axi_gmem0_AWSIZE = 3'd0;

assign m_axi_gmem0_AWUSER = 1'd0;

assign m_axi_gmem0_AWVALID = 1'b0;

assign m_axi_gmem0_BREADY = 1'b0;

assign m_axi_gmem0_RREADY = 1'b0;

assign m_axi_gmem0_WDATA = 32'd0;

assign m_axi_gmem0_WID = 1'd0;

assign m_axi_gmem0_WLAST = 1'b0;

assign m_axi_gmem0_WSTRB = 4'd0;

assign m_axi_gmem0_WUSER = 1'd0;

assign m_axi_gmem0_WVALID = 1'b0;

assign out_pix4_sum7_cast_fu_457_p1 = out_pix4_sum7_fu_452_p2;

assign out_pix4_sum7_fu_452_p2 = (tmp_25_mid2_cast_fu_448_p1 + tmp_3_cast_reg_479);

assign out_pix4_sum_cast_fu_291_p1 = out_pix4_sum_fu_286_p2;

assign out_pix4_sum_fu_286_p2 = (tmp_8_cast_fu_282_p1 + tmp_3_cast_reg_479);

assign p_shl1_cast_fu_250_p1 = p_shl1_fu_242_p3;

assign p_shl1_fu_242_p3 = {{i_reg_160}, {11'd0}};

assign p_shl2_cast_fu_262_p1 = p_shl2_fu_254_p3;

assign p_shl2_fu_254_p3 = {{i_reg_160}, {7'd0}};

assign p_shl3_cast_fu_333_p1 = p_shl3_fu_325_p3;

assign p_shl3_cast_mid1_fu_387_p1 = p_shl3_mid1_fu_379_p3;

assign p_shl3_fu_325_p3 = {{i2_reg_194}, {7'd0}};

assign p_shl3_mid1_fu_379_p3 = {{i_s_fu_361_p2}, {7'd0}};

assign p_shl_cast_fu_321_p1 = p_shl_fu_313_p3;

assign p_shl_cast_mid1_fu_375_p1 = p_shl_mid1_fu_367_p3;

assign p_shl_fu_313_p3 = {{i2_reg_194}, {11'd0}};

assign p_shl_mid1_fu_367_p3 = {{i_s_fu_361_p2}, {11'd0}};

assign tmp_11_fu_467_p2 = ((grp_fu_419_p2 == 13'd0) ? 1'b1 : 1'b0);

assign tmp_13_fu_473_p2 = ((grp_fu_439_p2 == 13'd0) ? 1'b1 : 1'b0);

assign tmp_1_fu_230_p2 = ((i_reg_160 == 11'd1080) ? 1'b1 : 1'b0);

assign tmp_25_mid2_cast_fu_448_p1 = $unsigned(tmp_25_mid2_v_fu_445_p1);

assign tmp_25_mid2_v_fu_445_p1 = $signed(ap_reg_pp1_iter15_tmp_25_mid2_v_v_reg_518);

assign tmp_25_mid2_v_v_fu_405_p2 = ($signed(tmp_7_mid2_fu_397_p3) + $signed(14'd12544));

assign tmp_2_fu_266_p2 = (p_shl1_cast_fu_250_p1 - p_shl2_cast_fu_262_p1);

assign tmp_3_cast_fu_226_p1 = tmp_fu_216_p4;

assign tmp_3_fu_355_p2 = ((j3_reg_205 == 11'd1920) ? 1'b1 : 1'b0);

assign tmp_4_fu_272_p2 = ($signed(tmp_2_fu_266_p2) + $signed(23'd8384768));

assign tmp_5_fu_301_p2 = ((j_reg_171 == 11'd1920) ? 1'b1 : 1'b0);

assign tmp_6_fu_278_p1 = $signed(tmp_4_fu_272_p2);

assign tmp_7_fu_337_p2 = (p_shl_cast_fu_321_p1 - p_shl3_cast_fu_333_p1);

assign tmp_7_mid1_fu_391_p2 = (p_shl_cast_mid1_fu_375_p1 - p_shl3_cast_mid1_fu_387_p1);

assign tmp_7_mid2_fu_397_p3 = ((tmp_3_fu_355_p2[0:0] === 1'b1) ? tmp_7_mid1_fu_391_p2 : tmp_7_fu_337_p2);

assign tmp_8_cast_fu_282_p1 = $unsigned(tmp_6_fu_278_p1);

assign tmp_fu_216_p4 = {{out_pix[31:2]}};

always @ (posedge ap_clk) begin
    tmp_3_cast_reg_479[32:30] <= 3'b000;
    tmp_25_mid2_v_v_reg_518[6:0] <= 7'b0000000;
    ap_reg_pp1_iter1_tmp_25_mid2_v_v_reg_518[6:0] <= 7'b0000000;
    ap_reg_pp1_iter2_tmp_25_mid2_v_v_reg_518[6:0] <= 7'b0000000;
    ap_reg_pp1_iter3_tmp_25_mid2_v_v_reg_518[6:0] <= 7'b0000000;
    ap_reg_pp1_iter4_tmp_25_mid2_v_v_reg_518[6:0] <= 7'b0000000;
    ap_reg_pp1_iter5_tmp_25_mid2_v_v_reg_518[6:0] <= 7'b0000000;
    ap_reg_pp1_iter6_tmp_25_mid2_v_v_reg_518[6:0] <= 7'b0000000;
    ap_reg_pp1_iter7_tmp_25_mid2_v_v_reg_518[6:0] <= 7'b0000000;
    ap_reg_pp1_iter8_tmp_25_mid2_v_v_reg_518[6:0] <= 7'b0000000;
    ap_reg_pp1_iter9_tmp_25_mid2_v_v_reg_518[6:0] <= 7'b0000000;
    ap_reg_pp1_iter10_tmp_25_mid2_v_v_reg_518[6:0] <= 7'b0000000;
    ap_reg_pp1_iter11_tmp_25_mid2_v_v_reg_518[6:0] <= 7'b0000000;
    ap_reg_pp1_iter12_tmp_25_mid2_v_v_reg_518[6:0] <= 7'b0000000;
    ap_reg_pp1_iter13_tmp_25_mid2_v_v_reg_518[6:0] <= 7'b0000000;
    ap_reg_pp1_iter14_tmp_25_mid2_v_v_reg_518[6:0] <= 7'b0000000;
    ap_reg_pp1_iter15_tmp_25_mid2_v_v_reg_518[6:0] <= 7'b0000000;
end

endmodule //sobel_filter
