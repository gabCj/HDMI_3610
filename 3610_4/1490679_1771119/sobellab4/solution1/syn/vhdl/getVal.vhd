-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getVal is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    index : IN STD_LOGIC_VECTOR (13 downto 0);
    xDiff : IN STD_LOGIC_VECTOR (1 downto 0);
    yDiff : IN STD_LOGIC_VECTOR (1 downto 0);
    Y_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    Y_ce0 : OUT STD_LOGIC;
    Y_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of getVal is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv15_1E00 : STD_LOGIC_VECTOR (14 downto 0) := "001111000000000";
    constant ap_const_lv15_6200 : STD_LOGIC_VECTOR (14 downto 0) := "110001000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal fullIndex_1_fu_152_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal fullIndex_1_reg_168 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_70_fu_163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl2_fu_68_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_60_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl2_cast_fu_76_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal xDiff_cast_fu_86_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_80_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp1_fu_90_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal index_cast_fu_100_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp1_cast_fu_96_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal fullIndex_fu_104_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal fullIndex_2_fu_118_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fullIndex_3_fu_134_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_s_fu_140_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_71_fu_110_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal fullIndex_2_cast_fu_124_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast_fu_148_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal fullIndex_1_cast_fu_160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_reset_start_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                fullIndex_1_reg_168 <= fullIndex_1_fu_152_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_reset_start_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Y_address0 <= tmp_70_fu_163_p1(13 - 1 downto 0);

    Y_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Y_ce0 <= ap_const_logic_1;
        else 
            Y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_start_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_start_pp0 <= ap_const_logic_1;
        else 
            ap_reset_start_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= Y_q0;
        fullIndex_1_cast_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(fullIndex_1_reg_168),32));

    fullIndex_1_fu_152_p3 <= 
        fullIndex_2_cast_fu_124_p1 when (tmp_71_fu_110_p3(0) = '1') else 
        p_cast_fu_148_p1;
    fullIndex_2_cast_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fullIndex_2_fu_118_p2),16));
    fullIndex_2_fu_118_p2 <= std_logic_vector(unsigned(fullIndex_fu_104_p2) + unsigned(ap_const_lv15_1E00));
    fullIndex_3_fu_134_p2 <= std_logic_vector(unsigned(fullIndex_fu_104_p2) + unsigned(ap_const_lv15_6200));
    fullIndex_fu_104_p2 <= std_logic_vector(signed(index_cast_fu_100_p1) + signed(tmp1_cast_fu_96_p1));
        index_cast_fu_100_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index),15));

        p_cast_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_s_fu_140_p3),16));

    p_s_fu_140_p3 <= 
        fullIndex_fu_104_p2 when (tmp_s_fu_128_p2(0) = '1') else 
        fullIndex_3_fu_134_p2;
        p_shl2_cast_fu_76_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl2_fu_68_p3),13));

    p_shl2_fu_68_p3 <= (yDiff & ap_const_lv7_0);
    p_shl_fu_60_p3 <= (yDiff & ap_const_lv11_0);
        tmp1_cast_fu_96_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_90_p2),15));

    tmp1_fu_90_p2 <= std_logic_vector(signed(xDiff_cast_fu_86_p1) + signed(tmp_fu_80_p2));
    tmp_70_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fullIndex_1_cast_fu_160_p1),64));
    tmp_71_fu_110_p3 <= fullIndex_fu_104_p2(14 downto 14);
    tmp_fu_80_p2 <= std_logic_vector(unsigned(p_shl_fu_60_p3) - unsigned(p_shl2_cast_fu_76_p1));
    tmp_s_fu_128_p2 <= "1" when (signed(fullIndex_fu_104_p2) < signed(ap_const_lv15_1E00)) else "0";
        xDiff_cast_fu_86_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xDiff),13));

end behav;
