-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_filter is
generic (
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of sobel_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sobel_filter,hls_ip_2017_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=4161625,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1963,HLS_SYN_LUT=2160}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_GMEM0_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM0_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM0_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_780 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011110000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv23_7FF100 : STD_LOGIC_VECTOR (22 downto 0) := "11111111111000100000000";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv13_1680 : STD_LOGIC_VECTOR (12 downto 0) := "1011010000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv14_3100 : STD_LOGIC_VECTOR (13 downto 0) := "11000100000000";
    constant ap_const_lv13_780 : STD_LOGIC_VECTOR (12 downto 0) := "0011110000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inter_pix : STD_LOGIC_VECTOR (31 downto 0);
    signal out_pix : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem1_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal gmem1_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_enable_reg_pp1_iter17 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_11_reg_539 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter18 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter17_exitcond_flatten_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter23 : STD_LOGIC := '0';
    signal tmp_13_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter22_tmp_13_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_AWVALID : STD_LOGIC;
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_WVALID : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_RLAST : STD_LOGIC;
    signal gmem1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BREADY : STD_LOGIC;
    signal gmem1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_182 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state11_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter12 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter13 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter14 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter15 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter16 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter17 : BOOLEAN;
    signal ap_sig_ioackin_gmem1_AWREADY : STD_LOGIC;
    signal ap_block_state28_io : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter18 : BOOLEAN;
    signal ap_sig_ioackin_gmem1_WREADY : STD_LOGIC;
    signal ap_block_state29_io : BOOLEAN;
    signal ap_block_state30_pp1_stage0_iter19 : BOOLEAN;
    signal ap_block_state31_pp1_stage0_iter20 : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter21 : BOOLEAN;
    signal ap_block_state33_pp1_stage0_iter22 : BOOLEAN;
    signal ap_block_state34_pp1_stage0_iter23 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i2_reg_194 : STD_LOGIC_VECTOR (1 downto 0);
    signal j3_reg_205 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_cast_fu_226_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_3_cast_reg_479 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_1_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_236_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_reg_489 : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem1_addr_reg_494 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_307_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_reg_503 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_flatten_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter1_exitcond_flatten_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter2_exitcond_flatten_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter3_exitcond_flatten_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter4_exitcond_flatten_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter5_exitcond_flatten_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter6_exitcond_flatten_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter7_exitcond_flatten_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter8_exitcond_flatten_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter9_exitcond_flatten_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter10_exitcond_flatten_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter11_exitcond_flatten_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter12_exitcond_flatten_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter13_exitcond_flatten_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter14_exitcond_flatten_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter15_exitcond_flatten_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter16_exitcond_flatten_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_349_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_flatten_next_reg_512 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_25_mid2_v_v_fu_405_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_25_mid2_v_v_reg_518 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp1_iter1_tmp_25_mid2_v_v_reg_518 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp1_iter2_tmp_25_mid2_v_v_reg_518 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp1_iter3_tmp_25_mid2_v_v_reg_518 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp1_iter4_tmp_25_mid2_v_v_reg_518 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp1_iter5_tmp_25_mid2_v_v_reg_518 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp1_iter6_tmp_25_mid2_v_v_reg_518 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp1_iter7_tmp_25_mid2_v_v_reg_518 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp1_iter8_tmp_25_mid2_v_v_reg_518 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp1_iter9_tmp_25_mid2_v_v_reg_518 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp1_iter10_tmp_25_mid2_v_v_reg_518 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp1_iter11_tmp_25_mid2_v_v_reg_518 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp1_iter12_tmp_25_mid2_v_v_reg_518 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp1_iter13_tmp_25_mid2_v_v_reg_518 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp1_iter14_tmp_25_mid2_v_v_reg_518 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp1_iter15_tmp_25_mid2_v_v_reg_518 : STD_LOGIC_VECTOR (13 downto 0);
    signal i2_mid2_fu_411_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_fu_431_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem1_addr_1_reg_533 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter17_tmp_13_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter18_tmp_13_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter19_tmp_13_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter20_tmp_13_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter21_tmp_13_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter22 : STD_LOGIC := '0';
    signal i_reg_160 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_171 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_186_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal out_pix4_sum_cast_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_pix4_sum7_cast_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem1_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem1_WREADY : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal tmp_fu_216_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_shl1_fu_242_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_shl2_fu_254_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl1_cast_fu_250_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl2_cast_fu_262_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_2_fu_266_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_4_fu_272_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_6_fu_278_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_cast_fu_282_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal out_pix4_sum_fu_286_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_shl_fu_313_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl3_fu_325_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_321_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl3_cast_fu_333_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_s_fu_361_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_mid1_fu_367_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl3_mid1_fu_379_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_mid1_fu_375_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl3_cast_mid1_fu_387_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_mid1_fu_391_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_fu_337_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_mid2_fu_397_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_419_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal j3_op_fu_425_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_439_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_439_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_25_mid2_v_fu_445_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_mid2_cast_fu_448_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal out_pix4_sum7_fu_452_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_419_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_439_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_419_ce : STD_LOGIC;
    signal grp_fu_439_ce : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_condition_582 : BOOLEAN;

    component sobel_filter_urembkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component sobel_filter_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        inter_pix : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_pix : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sobel_filter_gmem1_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    sobel_filter_AXILiteS_s_axi_U : component sobel_filter_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        inter_pix => inter_pix,
        out_pix => out_pix);

    sobel_filter_gmem1_m_axi_U : component sobel_filter_gmem1_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem1_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem1_RDATA,
        I_RID => gmem1_RID,
        I_RUSER => gmem1_RUSER,
        I_RRESP => gmem1_RRESP,
        I_RLAST => gmem1_RLAST,
        I_AWVALID => gmem1_AWVALID,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => gmem1_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_780,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem1_WVALID,
        I_WREADY => gmem1_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem1_BVALID,
        I_BREADY => gmem1_BREADY,
        I_BRESP => gmem1_BRESP,
        I_BID => gmem1_BID,
        I_BUSER => gmem1_BUSER);

    sobel_filter_urembkb_U1 : component sobel_filter_urembkb
    generic map (
        ID => 1,
        NUM_STAGE => 17,
        din0_WIDTH => 13,
        din1_WIDTH => 12,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_phi_mux_indvar_flatten_phi_fu_186_p4,
        din1 => grp_fu_419_p1,
        ce => grp_fu_419_ce,
        dout => grp_fu_419_p2);

    sobel_filter_urembkb_U2 : component sobel_filter_urembkb
    generic map (
        ID => 1,
        NUM_STAGE => 17,
        din0_WIDTH => 13,
        din1_WIDTH => 12,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_439_p0,
        din1 => grp_fu_439_p1,
        ce => grp_fu_439_ce,
        dout => grp_fu_439_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_1_fu_230_p2))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state11)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state11 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter13 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter14 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter15 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter16 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter17 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter18 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter19 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter20 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter21 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter22 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter23 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_1_fu_230_p2))) then 
                    ap_enable_reg_pp1_iter23 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem1_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem1_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter17) and (tmp_11_reg_539 = ap_const_lv1_1)) or ((ap_sig_ioackin_gmem1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    ap_reg_ioackin_gmem1_AWREADY <= ap_const_logic_0;
                elsif ((((ap_block_pp1_stage0_01001 = ap_const_boolean_0) and (ap_const_logic_1 = gmem1_AWREADY) and (ap_const_logic_1 = ap_enable_reg_pp1_iter17) and (tmp_11_reg_539 = ap_const_lv1_1)) or ((ap_const_logic_1 = gmem1_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    ap_reg_ioackin_gmem1_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem1_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem1_WREADY <= ap_const_logic_0;
            else
                if ((((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter18) and (ap_reg_pp1_iter17_exitcond_flatten_reg_508 = ap_const_lv1_0)) or ((ap_sig_ioackin_gmem1_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                    ap_reg_ioackin_gmem1_WREADY <= ap_const_logic_0;
                elsif ((((ap_block_pp1_stage0_01001 = ap_const_boolean_0) and (ap_const_logic_1 = gmem1_WREADY) and (ap_const_logic_1 = ap_enable_reg_pp1_iter18) and (ap_reg_pp1_iter17_exitcond_flatten_reg_508 = ap_const_lv1_0)) or ((ap_const_logic_1 = gmem1_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                    ap_reg_ioackin_gmem1_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i2_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_1_fu_230_p2))) then 
                i2_reg_194 <= ap_const_lv2_0;
            elsif (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten_fu_343_p2))) then 
                i2_reg_194 <= i2_mid2_fu_411_p3;
            end if; 
        end if;
    end process;

    i_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem1_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_reg_160 <= i_1_reg_489;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_160 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_1_fu_230_p2))) then 
                indvar_flatten_reg_182 <= ap_const_lv13_0;
            elsif (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_508 = ap_const_lv1_0))) then 
                indvar_flatten_reg_182 <= indvar_flatten_next_reg_512;
            end if; 
        end if;
    end process;

    j3_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_1_fu_230_p2))) then 
                j3_reg_205 <= ap_const_lv11_0;
            elsif (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten_fu_343_p2))) then 
                j3_reg_205 <= j_2_fu_431_p3;
            end if; 
        end if;
    end process;

    j_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_gmem1_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_reg_171 <= j_1_reg_503;
            elsif (((ap_sig_ioackin_gmem1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_171 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp1_stage0_11001 = ap_const_boolean_0)) then
                ap_reg_pp1_iter10_exitcond_flatten_reg_508 <= ap_reg_pp1_iter9_exitcond_flatten_reg_508;
                    ap_reg_pp1_iter10_tmp_25_mid2_v_v_reg_518(13 downto 7) <= ap_reg_pp1_iter9_tmp_25_mid2_v_v_reg_518(13 downto 7);
                ap_reg_pp1_iter11_exitcond_flatten_reg_508 <= ap_reg_pp1_iter10_exitcond_flatten_reg_508;
                    ap_reg_pp1_iter11_tmp_25_mid2_v_v_reg_518(13 downto 7) <= ap_reg_pp1_iter10_tmp_25_mid2_v_v_reg_518(13 downto 7);
                ap_reg_pp1_iter12_exitcond_flatten_reg_508 <= ap_reg_pp1_iter11_exitcond_flatten_reg_508;
                    ap_reg_pp1_iter12_tmp_25_mid2_v_v_reg_518(13 downto 7) <= ap_reg_pp1_iter11_tmp_25_mid2_v_v_reg_518(13 downto 7);
                ap_reg_pp1_iter13_exitcond_flatten_reg_508 <= ap_reg_pp1_iter12_exitcond_flatten_reg_508;
                    ap_reg_pp1_iter13_tmp_25_mid2_v_v_reg_518(13 downto 7) <= ap_reg_pp1_iter12_tmp_25_mid2_v_v_reg_518(13 downto 7);
                ap_reg_pp1_iter14_exitcond_flatten_reg_508 <= ap_reg_pp1_iter13_exitcond_flatten_reg_508;
                    ap_reg_pp1_iter14_tmp_25_mid2_v_v_reg_518(13 downto 7) <= ap_reg_pp1_iter13_tmp_25_mid2_v_v_reg_518(13 downto 7);
                ap_reg_pp1_iter15_exitcond_flatten_reg_508 <= ap_reg_pp1_iter14_exitcond_flatten_reg_508;
                    ap_reg_pp1_iter15_tmp_25_mid2_v_v_reg_518(13 downto 7) <= ap_reg_pp1_iter14_tmp_25_mid2_v_v_reg_518(13 downto 7);
                ap_reg_pp1_iter16_exitcond_flatten_reg_508 <= ap_reg_pp1_iter15_exitcond_flatten_reg_508;
                ap_reg_pp1_iter17_exitcond_flatten_reg_508 <= ap_reg_pp1_iter16_exitcond_flatten_reg_508;
                ap_reg_pp1_iter17_tmp_13_reg_543 <= tmp_13_reg_543;
                ap_reg_pp1_iter18_tmp_13_reg_543 <= ap_reg_pp1_iter17_tmp_13_reg_543;
                ap_reg_pp1_iter19_tmp_13_reg_543 <= ap_reg_pp1_iter18_tmp_13_reg_543;
                ap_reg_pp1_iter20_tmp_13_reg_543 <= ap_reg_pp1_iter19_tmp_13_reg_543;
                ap_reg_pp1_iter21_tmp_13_reg_543 <= ap_reg_pp1_iter20_tmp_13_reg_543;
                ap_reg_pp1_iter22_tmp_13_reg_543 <= ap_reg_pp1_iter21_tmp_13_reg_543;
                ap_reg_pp1_iter2_exitcond_flatten_reg_508 <= ap_reg_pp1_iter1_exitcond_flatten_reg_508;
                    ap_reg_pp1_iter2_tmp_25_mid2_v_v_reg_518(13 downto 7) <= ap_reg_pp1_iter1_tmp_25_mid2_v_v_reg_518(13 downto 7);
                ap_reg_pp1_iter3_exitcond_flatten_reg_508 <= ap_reg_pp1_iter2_exitcond_flatten_reg_508;
                    ap_reg_pp1_iter3_tmp_25_mid2_v_v_reg_518(13 downto 7) <= ap_reg_pp1_iter2_tmp_25_mid2_v_v_reg_518(13 downto 7);
                ap_reg_pp1_iter4_exitcond_flatten_reg_508 <= ap_reg_pp1_iter3_exitcond_flatten_reg_508;
                    ap_reg_pp1_iter4_tmp_25_mid2_v_v_reg_518(13 downto 7) <= ap_reg_pp1_iter3_tmp_25_mid2_v_v_reg_518(13 downto 7);
                ap_reg_pp1_iter5_exitcond_flatten_reg_508 <= ap_reg_pp1_iter4_exitcond_flatten_reg_508;
                    ap_reg_pp1_iter5_tmp_25_mid2_v_v_reg_518(13 downto 7) <= ap_reg_pp1_iter4_tmp_25_mid2_v_v_reg_518(13 downto 7);
                ap_reg_pp1_iter6_exitcond_flatten_reg_508 <= ap_reg_pp1_iter5_exitcond_flatten_reg_508;
                    ap_reg_pp1_iter6_tmp_25_mid2_v_v_reg_518(13 downto 7) <= ap_reg_pp1_iter5_tmp_25_mid2_v_v_reg_518(13 downto 7);
                ap_reg_pp1_iter7_exitcond_flatten_reg_508 <= ap_reg_pp1_iter6_exitcond_flatten_reg_508;
                    ap_reg_pp1_iter7_tmp_25_mid2_v_v_reg_518(13 downto 7) <= ap_reg_pp1_iter6_tmp_25_mid2_v_v_reg_518(13 downto 7);
                ap_reg_pp1_iter8_exitcond_flatten_reg_508 <= ap_reg_pp1_iter7_exitcond_flatten_reg_508;
                    ap_reg_pp1_iter8_tmp_25_mid2_v_v_reg_518(13 downto 7) <= ap_reg_pp1_iter7_tmp_25_mid2_v_v_reg_518(13 downto 7);
                ap_reg_pp1_iter9_exitcond_flatten_reg_508 <= ap_reg_pp1_iter8_exitcond_flatten_reg_508;
                    ap_reg_pp1_iter9_tmp_25_mid2_v_v_reg_518(13 downto 7) <= ap_reg_pp1_iter8_tmp_25_mid2_v_v_reg_518(13 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                ap_reg_pp1_iter1_exitcond_flatten_reg_508 <= exitcond_flatten_reg_508;
                    ap_reg_pp1_iter1_tmp_25_mid2_v_v_reg_518(13 downto 7) <= tmp_25_mid2_v_v_reg_518(13 downto 7);
                exitcond_flatten_reg_508 <= exitcond_flatten_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp1_iter15_exitcond_flatten_reg_508))) then
                gmem1_addr_1_reg_533 <= out_pix4_sum7_cast_fu_457_p1(32 - 1 downto 0);
                tmp_11_reg_539 <= tmp_11_fu_467_p2;
                tmp_13_reg_543 <= tmp_13_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_1_fu_230_p2))) then
                gmem1_addr_reg_494 <= out_pix4_sum_cast_fu_291_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_489 <= i_1_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                indvar_flatten_next_reg_512 <= indvar_flatten_next_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_1_reg_503 <= j_1_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten_fu_343_p2))) then
                    tmp_25_mid2_v_v_reg_518(13 downto 7) <= tmp_25_mid2_v_v_fu_405_p2(13 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_3_cast_reg_479(29 downto 0) <= tmp_3_cast_fu_226_p1(29 downto 0);
            end if;
        end if;
    end process;
    tmp_3_cast_reg_479(32 downto 30) <= "000";
    tmp_25_mid2_v_v_reg_518(6 downto 0) <= "0000000";
    ap_reg_pp1_iter1_tmp_25_mid2_v_v_reg_518(6 downto 0) <= "0000000";
    ap_reg_pp1_iter2_tmp_25_mid2_v_v_reg_518(6 downto 0) <= "0000000";
    ap_reg_pp1_iter3_tmp_25_mid2_v_v_reg_518(6 downto 0) <= "0000000";
    ap_reg_pp1_iter4_tmp_25_mid2_v_v_reg_518(6 downto 0) <= "0000000";
    ap_reg_pp1_iter5_tmp_25_mid2_v_v_reg_518(6 downto 0) <= "0000000";
    ap_reg_pp1_iter6_tmp_25_mid2_v_v_reg_518(6 downto 0) <= "0000000";
    ap_reg_pp1_iter7_tmp_25_mid2_v_v_reg_518(6 downto 0) <= "0000000";
    ap_reg_pp1_iter8_tmp_25_mid2_v_v_reg_518(6 downto 0) <= "0000000";
    ap_reg_pp1_iter9_tmp_25_mid2_v_v_reg_518(6 downto 0) <= "0000000";
    ap_reg_pp1_iter10_tmp_25_mid2_v_v_reg_518(6 downto 0) <= "0000000";
    ap_reg_pp1_iter11_tmp_25_mid2_v_v_reg_518(6 downto 0) <= "0000000";
    ap_reg_pp1_iter12_tmp_25_mid2_v_v_reg_518(6 downto 0) <= "0000000";
    ap_reg_pp1_iter13_tmp_25_mid2_v_v_reg_518(6 downto 0) <= "0000000";
    ap_reg_pp1_iter14_tmp_25_mid2_v_v_reg_518(6 downto 0) <= "0000000";
    ap_reg_pp1_iter15_tmp_25_mid2_v_v_reg_518(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_enable_reg_pp1_iter23, gmem1_BVALID, ap_sig_ioackin_gmem1_AWREADY, ap_sig_ioackin_gmem1_WREADY, tmp_1_fu_230_p2, ap_CS_fsm_state2, ap_CS_fsm_state4, exitcond_flatten_fu_343_p2, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter22, tmp_5_fu_301_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_1_fu_230_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_sig_ioackin_gmem1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_5_fu_301_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_sig_ioackin_gmem1_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((gmem1_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = exitcond_flatten_fu_343_p2))) and not(((ap_enable_reg_pp1_iter22 = ap_const_logic_0) and (ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter23))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = exitcond_flatten_fu_343_p2)) or ((ap_enable_reg_pp1_iter22 = ap_const_logic_0) and (ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter23)))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state35 <= ap_CS_fsm(11);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(ap_enable_reg_pp1_iter23, ap_reg_pp1_iter22_tmp_13_reg_543, gmem1_BVALID)
    begin
                ap_block_pp1_stage0_01001 <= ((ap_const_logic_0 = gmem1_BVALID) and (ap_const_logic_1 = ap_enable_reg_pp1_iter23) and (ap_const_lv1_1 = ap_reg_pp1_iter22_tmp_13_reg_543));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter17, ap_enable_reg_pp1_iter18, ap_enable_reg_pp1_iter23, ap_reg_pp1_iter22_tmp_13_reg_543, gmem1_BVALID, ap_block_state28_io, ap_block_state29_io)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_const_logic_0 = gmem1_BVALID) and (ap_const_logic_1 = ap_enable_reg_pp1_iter23) and (ap_const_lv1_1 = ap_reg_pp1_iter22_tmp_13_reg_543)) or ((ap_const_boolean_1 = ap_block_state29_io) and (ap_const_logic_1 = ap_enable_reg_pp1_iter18)) or ((ap_const_boolean_1 = ap_block_state28_io) and (ap_const_logic_1 = ap_enable_reg_pp1_iter17)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter17, ap_enable_reg_pp1_iter18, ap_enable_reg_pp1_iter23, ap_reg_pp1_iter22_tmp_13_reg_543, gmem1_BVALID, ap_block_state28_io, ap_block_state29_io)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_const_logic_0 = gmem1_BVALID) and (ap_const_logic_1 = ap_enable_reg_pp1_iter23) and (ap_const_lv1_1 = ap_reg_pp1_iter22_tmp_13_reg_543)) or ((ap_const_boolean_1 = ap_block_state29_io) and (ap_const_logic_1 = ap_enable_reg_pp1_iter18)) or ((ap_const_boolean_1 = ap_block_state28_io) and (ap_const_logic_1 = ap_enable_reg_pp1_iter17)));
    end process;

        ap_block_state11_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state28_io_assign_proc : process(tmp_11_reg_539, ap_sig_ioackin_gmem1_AWREADY)
    begin
                ap_block_state28_io <= ((ap_const_logic_0 = ap_sig_ioackin_gmem1_AWREADY) and (tmp_11_reg_539 = ap_const_lv1_1));
    end process;

        ap_block_state28_pp1_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state29_io_assign_proc : process(ap_reg_pp1_iter17_exitcond_flatten_reg_508, ap_sig_ioackin_gmem1_WREADY)
    begin
                ap_block_state29_io <= ((ap_const_logic_0 = ap_sig_ioackin_gmem1_WREADY) and (ap_reg_pp1_iter17_exitcond_flatten_reg_508 = ap_const_lv1_0));
    end process;

        ap_block_state29_pp1_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state34_pp1_stage0_iter23_assign_proc : process(ap_reg_pp1_iter22_tmp_13_reg_543, gmem1_BVALID)
    begin
                ap_block_state34_pp1_stage0_iter23 <= ((ap_const_logic_0 = gmem1_BVALID) and (ap_const_lv1_1 = ap_reg_pp1_iter22_tmp_13_reg_543));
    end process;


    ap_condition_582_assign_proc : process(ap_enable_reg_pp1_iter17, tmp_11_reg_539, ap_block_pp1_stage0_01001)
    begin
                ap_condition_582 <= ((ap_block_pp1_stage0_01001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter17) and (tmp_11_reg_539 = ap_const_lv1_1));
    end process;


    ap_condition_pp1_exit_iter0_state11_assign_proc : process(exitcond_flatten_fu_343_p2)
    begin
        if ((ap_const_lv1_1 = exitcond_flatten_fu_343_p2)) then 
            ap_condition_pp1_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter17, ap_enable_reg_pp1_iter18, ap_enable_reg_pp1_iter23, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter11, ap_enable_reg_pp1_iter12, ap_enable_reg_pp1_iter13, ap_enable_reg_pp1_iter14, ap_enable_reg_pp1_iter15, ap_enable_reg_pp1_iter16, ap_enable_reg_pp1_iter19, ap_enable_reg_pp1_iter20, ap_enable_reg_pp1_iter21, ap_enable_reg_pp1_iter22)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter22) and (ap_const_logic_0 = ap_enable_reg_pp1_iter21) and (ap_const_logic_0 = ap_enable_reg_pp1_iter20) and (ap_const_logic_0 = ap_enable_reg_pp1_iter19) and (ap_const_logic_0 = ap_enable_reg_pp1_iter16) and (ap_const_logic_0 = ap_enable_reg_pp1_iter15) and (ap_const_logic_0 = ap_enable_reg_pp1_iter14) and (ap_const_logic_0 = ap_enable_reg_pp1_iter13) and (ap_const_logic_0 = ap_enable_reg_pp1_iter12) and (ap_const_logic_0 = ap_enable_reg_pp1_iter11) and (ap_const_logic_0 = ap_enable_reg_pp1_iter10) and (ap_const_logic_0 = ap_enable_reg_pp1_iter9) and (ap_const_logic_0 = ap_enable_reg_pp1_iter8) and (ap_const_logic_0 = ap_enable_reg_pp1_iter7) and (ap_const_logic_0 = ap_enable_reg_pp1_iter6) and (ap_const_logic_0 = ap_enable_reg_pp1_iter5) and (ap_const_logic_0 = ap_enable_reg_pp1_iter4) and (ap_const_logic_0 = ap_enable_reg_pp1_iter3) and (ap_const_logic_0 = ap_enable_reg_pp1_iter2) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1) and (ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter23) and (ap_const_logic_0 = ap_enable_reg_pp1_iter18) and (ap_const_logic_0 = ap_enable_reg_pp1_iter17))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_186_p4_assign_proc : process(ap_block_pp1_stage0, exitcond_flatten_reg_508, indvar_flatten_reg_182, ap_CS_fsm_pp1_stage0, indvar_flatten_next_reg_512, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_508 = ap_const_lv1_0) and (ap_block_pp1_stage0 = ap_const_boolean_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_186_p4 <= indvar_flatten_next_reg_512;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_186_p4 <= indvar_flatten_reg_182;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem1_AWREADY_assign_proc : process(gmem1_AWREADY, ap_reg_ioackin_gmem1_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem1_AWREADY)) then 
            ap_sig_ioackin_gmem1_AWREADY <= gmem1_AWREADY;
        else 
            ap_sig_ioackin_gmem1_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem1_WREADY_assign_proc : process(gmem1_WREADY, ap_reg_ioackin_gmem1_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem1_WREADY)) then 
            ap_sig_ioackin_gmem1_WREADY <= gmem1_WREADY;
        else 
            ap_sig_ioackin_gmem1_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond_flatten_fu_343_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_186_p4 = ap_const_lv13_1680) else "0";

    gmem1_AWADDR_assign_proc : process(ap_CS_fsm_state3, gmem1_addr_reg_494, gmem1_addr_1_reg_533, ap_reg_ioackin_gmem1_AWREADY, ap_condition_582)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem1_AWREADY)) then
            if ((ap_condition_582 = ap_const_boolean_1)) then 
                gmem1_AWADDR <= gmem1_addr_1_reg_533;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                gmem1_AWADDR <= gmem1_addr_reg_494;
            else 
                gmem1_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem1_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem1_AWVALID_assign_proc : process(ap_CS_fsm_state3, ap_enable_reg_pp1_iter17, tmp_11_reg_539, ap_reg_ioackin_gmem1_AWREADY, ap_block_pp1_stage0_01001)
    begin
        if ((((ap_block_pp1_stage0_01001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_gmem1_AWREADY) and (ap_const_logic_1 = ap_enable_reg_pp1_iter17) and (tmp_11_reg_539 = ap_const_lv1_1)) or ((ap_const_logic_0 = ap_reg_ioackin_gmem1_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            gmem1_AWVALID <= ap_const_logic_1;
        else 
            gmem1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_BREADY_assign_proc : process(ap_CS_fsm_state10, ap_enable_reg_pp1_iter23, ap_reg_pp1_iter22_tmp_13_reg_543, gmem1_BVALID, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter23) and (ap_const_lv1_1 = ap_reg_pp1_iter22_tmp_13_reg_543)) or ((gmem1_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            gmem1_BREADY <= ap_const_logic_1;
        else 
            gmem1_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_WVALID_assign_proc : process(ap_CS_fsm_state5, ap_enable_reg_pp1_iter18, ap_reg_pp1_iter17_exitcond_flatten_reg_508, ap_reg_ioackin_gmem1_WREADY, ap_block_pp1_stage0_01001)
    begin
        if ((((ap_block_pp1_stage0_01001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_gmem1_WREADY) and (ap_const_logic_1 = ap_enable_reg_pp1_iter18) and (ap_reg_pp1_iter17_exitcond_flatten_reg_508 = ap_const_lv1_0)) or ((ap_const_logic_0 = ap_reg_ioackin_gmem1_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            gmem1_WVALID <= ap_const_logic_1;
        else 
            gmem1_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_blk_n_AW_assign_proc : process(m_axi_gmem1_AWREADY, ap_CS_fsm_state3, ap_enable_reg_pp1_iter17, ap_block_pp1_stage0, tmp_11_reg_539)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter17) and (tmp_11_reg_539 = ap_const_lv1_1) and (ap_block_pp1_stage0 = ap_const_boolean_0)))) then 
            gmem1_blk_n_AW <= m_axi_gmem1_AWREADY;
        else 
            gmem1_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_B_assign_proc : process(m_axi_gmem1_BVALID, ap_CS_fsm_state10, ap_block_pp1_stage0, ap_enable_reg_pp1_iter23, ap_reg_pp1_iter22_tmp_13_reg_543)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter23) and (ap_const_lv1_1 = ap_reg_pp1_iter22_tmp_13_reg_543) and (ap_block_pp1_stage0 = ap_const_boolean_0)))) then 
            gmem1_blk_n_B <= m_axi_gmem1_BVALID;
        else 
            gmem1_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_W_assign_proc : process(m_axi_gmem1_WREADY, ap_CS_fsm_state5, ap_block_pp1_stage0, ap_enable_reg_pp1_iter18, ap_reg_pp1_iter17_exitcond_flatten_reg_508)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter18) and (ap_reg_pp1_iter17_exitcond_flatten_reg_508 = ap_const_lv1_0) and (ap_block_pp1_stage0 = ap_const_boolean_0)))) then 
            gmem1_blk_n_W <= m_axi_gmem1_WREADY;
        else 
            gmem1_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_419_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_fu_419_ce <= ap_const_logic_1;
        else 
            grp_fu_419_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_419_p1 <= ap_const_lv13_780(12 - 1 downto 0);

    grp_fu_439_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_fu_439_ce <= ap_const_logic_1;
        else 
            grp_fu_439_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_439_p0 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_186_p4) + unsigned(ap_const_lv13_1));
    grp_fu_439_p1 <= ap_const_lv13_780(12 - 1 downto 0);
    i2_mid2_fu_411_p3 <= 
        i_s_fu_361_p2 when (tmp_3_fu_355_p2(0) = '1') else 
        i2_reg_194;
    i_1_fu_236_p2 <= std_logic_vector(unsigned(i_reg_160) + unsigned(ap_const_lv11_1));
    i_s_fu_361_p2 <= std_logic_vector(unsigned(i2_reg_194) + unsigned(ap_const_lv2_1));
    indvar_flatten_next_fu_349_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_186_p4) + unsigned(ap_const_lv13_1));
    j3_op_fu_425_p2 <= std_logic_vector(unsigned(j3_reg_205) + unsigned(ap_const_lv11_1));
    j_1_fu_307_p2 <= std_logic_vector(unsigned(j_reg_171) + unsigned(ap_const_lv11_1));
    j_2_fu_431_p3 <= 
        ap_const_lv11_1 when (tmp_3_fu_355_p2(0) = '1') else 
        j3_op_fu_425_p2;
    m_axi_gmem0_ARADDR <= ap_const_lv32_0;
    m_axi_gmem0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_ARLEN <= ap_const_lv8_0;
    m_axi_gmem0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem0_ARVALID <= ap_const_logic_0;
    m_axi_gmem0_AWADDR <= ap_const_lv32_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv8_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;
    m_axi_gmem0_RREADY <= ap_const_logic_0;
    m_axi_gmem0_WDATA <= ap_const_lv32_0;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv4_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    out_pix4_sum7_cast_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_pix4_sum7_fu_452_p2),64));
    out_pix4_sum7_fu_452_p2 <= std_logic_vector(unsigned(tmp_25_mid2_cast_fu_448_p1) + unsigned(tmp_3_cast_reg_479));
    out_pix4_sum_cast_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_pix4_sum_fu_286_p2),64));
    out_pix4_sum_fu_286_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_282_p1) + unsigned(tmp_3_cast_reg_479));
    p_shl1_cast_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_242_p3),23));
    p_shl1_fu_242_p3 <= (i_reg_160 & ap_const_lv11_0);
    p_shl2_cast_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_254_p3),23));
    p_shl2_fu_254_p3 <= (i_reg_160 & ap_const_lv7_0);
    p_shl3_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_325_p3),14));
    p_shl3_cast_mid1_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_mid1_fu_379_p3),14));
    p_shl3_fu_325_p3 <= (i2_reg_194 & ap_const_lv7_0);
    p_shl3_mid1_fu_379_p3 <= (i_s_fu_361_p2 & ap_const_lv7_0);
    p_shl_cast_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_313_p3),14));
    p_shl_cast_mid1_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_367_p3),14));
    p_shl_fu_313_p3 <= (i2_reg_194 & ap_const_lv11_0);
    p_shl_mid1_fu_367_p3 <= (i_s_fu_361_p2 & ap_const_lv11_0);
    tmp_11_fu_467_p2 <= "1" when (grp_fu_419_p2 = ap_const_lv13_0) else "0";
    tmp_13_fu_473_p2 <= "1" when (grp_fu_439_p2 = ap_const_lv13_0) else "0";
    tmp_1_fu_230_p2 <= "1" when (i_reg_160 = ap_const_lv11_438) else "0";
    tmp_25_mid2_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_mid2_v_fu_445_p1),33));
        tmp_25_mid2_v_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_reg_pp1_iter15_tmp_25_mid2_v_v_reg_518),32));

    tmp_25_mid2_v_v_fu_405_p2 <= std_logic_vector(unsigned(tmp_7_mid2_fu_397_p3) + unsigned(ap_const_lv14_3100));
    tmp_2_fu_266_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_250_p1) - unsigned(p_shl2_cast_fu_262_p1));
    tmp_3_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_216_p4),33));
    tmp_3_fu_355_p2 <= "1" when (j3_reg_205 = ap_const_lv11_780) else "0";
    tmp_4_fu_272_p2 <= std_logic_vector(unsigned(tmp_2_fu_266_p2) + unsigned(ap_const_lv23_7FF100));
    tmp_5_fu_301_p2 <= "1" when (j_reg_171 = ap_const_lv11_780) else "0";
        tmp_6_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_272_p2),32));

    tmp_7_fu_337_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_321_p1) - unsigned(p_shl3_cast_fu_333_p1));
    tmp_7_mid1_fu_391_p2 <= std_logic_vector(unsigned(p_shl_cast_mid1_fu_375_p1) - unsigned(p_shl3_cast_mid1_fu_387_p1));
    tmp_7_mid2_fu_397_p3 <= 
        tmp_7_mid1_fu_391_p2 when (tmp_3_fu_355_p2(0) = '1') else 
        tmp_7_fu_337_p2;
    tmp_8_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_278_p1),33));
    tmp_fu_216_p4 <= out_pix(31 downto 2);
end behav;
